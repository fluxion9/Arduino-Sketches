
/tmp/arduino_build_83020/inv.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  40:	0c 94 28 01 	jmp	0x250	; 0x250 <__vector_16>
  44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
  68:	00 00       	nop
  6a:	00 09       	sbc	r16, r0
  6c:	00 03       	mulsu	r16, r16
  6e:	02 00       	.word	0x0002	; ????
  70:	00 04       	cpc	r0, r0
  72:	05 08       	sbc	r0, r5
	...

0000007f <digital_pin_to_bit_mask_PGM>:
  7f:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8f:	04 08 10 20 40 80 40                                ... @.@

00000096 <digital_pin_to_port_PGM>:
  96:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a6:	03 03 03 03 02 02 03                                .......

000000ad <port_to_output_PGM>:
  ad:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b7 <port_to_mode_PGM>:
  b7:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000c2 <__ctors_end>:
__dtors_end():
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d8 e0       	ldi	r29, 0x08	; 8
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
  ce:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
  d0:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
  d2:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
  d4:	ec e0       	ldi	r30, 0x0C	; 12
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
  d6:	f6 e0       	ldi	r31, 0x06	; 6
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
  d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
  da:	05 90       	lpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
  dc:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
  de:	a0 30       	cpi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
  e0:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
  e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
  e4:	21 e0       	ldi	r18, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
  e6:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
  e8:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
  ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
  ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
  ee:	ab 30       	cpi	r26, 0x0B	; 11
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
  f0:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
  f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
.do_clear_bss_start():
  f4:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <main>
  f8:	0c 94 04 03 	jmp	0x608	; 0x608 <_exit>

000000fc <__bad_interrupt>:
__vector_22():
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <setup>:
setup():
/home/fluxion9/Arduino/inv/inv.ino:3
int i;
void setup() {
  pinMode(9, 1);
 100:	61 e0       	ldi	r22, 0x01	; 1
 102:	89 e0       	ldi	r24, 0x09	; 9
 104:	0e 94 89 02 	call	0x512	; 0x512 <pinMode>
/home/fluxion9/Arduino/inv/inv.ino:4
  pinMode(10, 1);
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	8a e0       	ldi	r24, 0x0A	; 10
 10c:	0e 94 89 02 	call	0x512	; 0x512 <pinMode>
/home/fluxion9/Arduino/inv/inv.ino:5
  pinMode(A5, 1);
 110:	61 e0       	ldi	r22, 0x01	; 1
 112:	83 e1       	ldi	r24, 0x13	; 19
 114:	0e 94 89 02 	call	0x512	; 0x512 <pinMode>
/home/fluxion9/Arduino/inv/inv.ino:6
  TCCR1B = TCCR1B & B11111000 | B00000001;
 118:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 11c:	88 7f       	andi	r24, 0xF8	; 248
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
/home/fluxion9/Arduino/inv/inv.ino:7
  for(i = 0; i < 3; i++)
 124:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
 128:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
/home/fluxion9/Arduino/inv/inv.ino:7 (discriminator 3)
 12c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 130:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
/home/fluxion9/Arduino/inv/inv.ino:14 (discriminator 3)
    digitalWrite(A5, 1);
    delay(500);
    digitalWrite(A5, 0);
    delay(500);
  }
  digitalWrite(A5, 1);
 134:	61 e0       	ldi	r22, 0x01	; 1
/home/fluxion9/Arduino/inv/inv.ino:7 (discriminator 3)
void setup() {
  pinMode(9, 1);
  pinMode(10, 1);
  pinMode(A5, 1);
  TCCR1B = TCCR1B & B11111000 | B00000001;
  for(i = 0; i < 3; i++)
 136:	03 97       	sbiw	r24, 0x03	; 3
 138:	ec f4       	brge	.+58     	; 0x174 <setup+0x74>
/home/fluxion9/Arduino/inv/inv.ino:9 (discriminator 2)
  {
    digitalWrite(A5, 1);
 13a:	83 e1       	ldi	r24, 0x13	; 19
 13c:	0e 94 c5 02 	call	0x58a	; 0x58a <digitalWrite>
/home/fluxion9/Arduino/inv/inv.ino:10 (discriminator 2)
    delay(500);
 140:	64 ef       	ldi	r22, 0xF4	; 244
 142:	71 e0       	ldi	r23, 0x01	; 1
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 97 01 	call	0x32e	; 0x32e <delay>
/home/fluxion9/Arduino/inv/inv.ino:11 (discriminator 2)
    digitalWrite(A5, 0);
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	83 e1       	ldi	r24, 0x13	; 19
 150:	0e 94 c5 02 	call	0x58a	; 0x58a <digitalWrite>
/home/fluxion9/Arduino/inv/inv.ino:12 (discriminator 2)
    delay(500);
 154:	64 ef       	ldi	r22, 0xF4	; 244
 156:	71 e0       	ldi	r23, 0x01	; 1
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 97 01 	call	0x32e	; 0x32e <delay>
/home/fluxion9/Arduino/inv/inv.ino:7 (discriminator 2)
void setup() {
  pinMode(9, 1);
  pinMode(10, 1);
  pinMode(A5, 1);
  TCCR1B = TCCR1B & B11111000 | B00000001;
  for(i = 0; i < 3; i++)
 160:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 164:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 16e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 172:	dc cf       	rjmp	.-72     	; 0x12c <setup+0x2c>
/home/fluxion9/Arduino/inv/inv.ino:14
    digitalWrite(A5, 1);
    delay(500);
    digitalWrite(A5, 0);
    delay(500);
  }
  digitalWrite(A5, 1);
 174:	83 e1       	ldi	r24, 0x13	; 19
 176:	0c 94 c5 02 	jmp	0x58a	; 0x58a <digitalWrite>

0000017a <loop>:
loop():
/home/fluxion9/Arduino/inv/inv.ino:18
}

void loop() {
  for(i = 0; i < 255; i++)
 17a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
 17e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
/home/fluxion9/Arduino/inv/inv.ino:18 (discriminator 3)
 182:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_end>
 186:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_end+0x1>
 18a:	6f 3f       	cpi	r22, 0xFF	; 255
 18c:	71 05       	cpc	r23, r1
 18e:	8c f4       	brge	.+34     	; 0x1b2 <loop+0x38>
/home/fluxion9/Arduino/inv/inv.ino:20 (discriminator 2)
  {
    analogWrite(9, i);
 190:	89 e0       	ldi	r24, 0x09	; 9
 192:	0e 94 03 02 	call	0x406	; 0x406 <analogWrite>
/home/fluxion9/Arduino/inv/inv.ino:21 (discriminator 2)
    delayMicroseconds(20);
 196:	84 e1       	ldi	r24, 0x14	; 20
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <delayMicroseconds>
/home/fluxion9/Arduino/inv/inv.ino:18 (discriminator 2)
  }
  digitalWrite(A5, 1);
}

void loop() {
  for(i = 0; i < 255; i++)
 19e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 1a2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 1a6:	01 96       	adiw	r24, 0x01	; 1
 1a8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 1ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 1b0:	e8 cf       	rjmp	.-48     	; 0x182 <loop+0x8>
/home/fluxion9/Arduino/inv/inv.ino:23
  {
    analogWrite(9, i);
    delayMicroseconds(20);
  }
  for(i = 254; i >= 0; i--)
 1b2:	8e ef       	ldi	r24, 0xFE	; 254
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 1ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 1be:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_end>
 1c2:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_end+0x1>
 1c6:	77 fd       	sbrc	r23, 7
 1c8:	0d c0       	rjmp	.+26     	; 0x1e4 <loop+0x6a>
/home/fluxion9/Arduino/inv/inv.ino:25 (discriminator 2)
  {
    analogWrite(9, i);
 1ca:	89 e0       	ldi	r24, 0x09	; 9
 1cc:	0e 94 03 02 	call	0x406	; 0x406 <analogWrite>
/home/fluxion9/Arduino/inv/inv.ino:26 (discriminator 2)
    delayMicroseconds(20);
 1d0:	84 e1       	ldi	r24, 0x14	; 20
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <delayMicroseconds>
/home/fluxion9/Arduino/inv/inv.ino:23 (discriminator 2)
  for(i = 0; i < 255; i++)
  {
    analogWrite(9, i);
    delayMicroseconds(20);
  }
  for(i = 254; i >= 0; i--)
 1d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 1dc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	e9 cf       	rjmp	.-46     	; 0x1b6 <loop+0x3c>
/home/fluxion9/Arduino/inv/inv.ino:28
  {
    analogWrite(9, i);
    delayMicroseconds(20);
  }
  for(i = 0; i < 255; i++)
 1e4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
 1e8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
/home/fluxion9/Arduino/inv/inv.ino:28 (discriminator 3)
 1ec:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_end>
 1f0:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_end+0x1>
 1f4:	6f 3f       	cpi	r22, 0xFF	; 255
 1f6:	71 05       	cpc	r23, r1
 1f8:	8c f4       	brge	.+34     	; 0x21c <loop+0xa2>
/home/fluxion9/Arduino/inv/inv.ino:30 (discriminator 2)
  {
    analogWrite(10, i);
 1fa:	8a e0       	ldi	r24, 0x0A	; 10
 1fc:	0e 94 03 02 	call	0x406	; 0x406 <analogWrite>
/home/fluxion9/Arduino/inv/inv.ino:31 (discriminator 2)
    delayMicroseconds(20);
 200:	84 e1       	ldi	r24, 0x14	; 20
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <delayMicroseconds>
/home/fluxion9/Arduino/inv/inv.ino:28 (discriminator 2)
  for(i = 254; i >= 0; i--)
  {
    analogWrite(9, i);
    delayMicroseconds(20);
  }
  for(i = 0; i < 255; i++)
 208:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 20c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 216:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 21a:	e8 cf       	rjmp	.-48     	; 0x1ec <loop+0x72>
/home/fluxion9/Arduino/inv/inv.ino:33
  {
    analogWrite(10, i);
    delayMicroseconds(20);
  }
  for(i = 254; i >= 0; i--)
 21c:	8e ef       	ldi	r24, 0xFE	; 254
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 224:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 228:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_end>
 22c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_end+0x1>
 230:	77 fd       	sbrc	r23, 7
 232:	0d c0       	rjmp	.+26     	; 0x24e <loop+0xd4>
/home/fluxion9/Arduino/inv/inv.ino:35 (discriminator 2)
  {
    analogWrite(10, i);
 234:	8a e0       	ldi	r24, 0x0A	; 10
 236:	0e 94 03 02 	call	0x406	; 0x406 <analogWrite>
/home/fluxion9/Arduino/inv/inv.ino:36 (discriminator 2)
    delayMicroseconds(20);
 23a:	84 e1       	ldi	r24, 0x14	; 20
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <delayMicroseconds>
/home/fluxion9/Arduino/inv/inv.ino:33 (discriminator 2)
  for(i = 0; i < 255; i++)
  {
    analogWrite(10, i);
    delayMicroseconds(20);
  }
  for(i = 254; i >= 0; i--)
 242:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 246:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	e9 cf       	rjmp	.-46     	; 0x220 <loop+0xa6>
/home/fluxion9/Arduino/inv/inv.ino:38
  {
    analogWrite(10, i);
    delayMicroseconds(20);
  }
}
 24e:	08 95       	ret

00000250 <__vector_16>:
__vector_16():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:227
  cli();
  m = timer0_millis;
  SREG = oldSREG;

  return m;
}
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	2f 93       	push	r18
 25c:	3f 93       	push	r19
 25e:	8f 93       	push	r24
 260:	9f 93       	push	r25
 262:	af 93       	push	r26
 264:	bf 93       	push	r27
 266:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <timer0_millis>
 26a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timer0_millis+0x1>
 26e:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <timer0_millis+0x2>
 272:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <timer0_millis+0x3>
 276:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <timer0_fract>
 27a:	23 e0       	ldi	r18, 0x03	; 3
 27c:	23 0f       	add	r18, r19
 27e:	2d 37       	cpi	r18, 0x7D	; 125
 280:	68 f1       	brcs	.+90     	; 0x2dc <__vector_16+0x8c>
 282:	26 e8       	ldi	r18, 0x86	; 134
 284:	23 0f       	add	r18, r19
 286:	02 96       	adiw	r24, 0x02	; 2
 288:	a1 1d       	adc	r26, r1
 28a:	b1 1d       	adc	r27, r1
 28c:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <timer0_fract>
 290:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <timer0_millis>
 294:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <timer0_millis+0x1>
 298:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <timer0_millis+0x2>
 29c:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <timer0_millis+0x3>
 2a0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <timer0_overflow_count>
 2a4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <timer0_overflow_count+0x1>
 2a8:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <timer0_overflow_count+0x2>
 2ac:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <timer0_overflow_count+0x3>
 2b0:	01 96       	adiw	r24, 0x01	; 1
 2b2:	a1 1d       	adc	r26, r1
 2b4:	b1 1d       	adc	r27, r1
 2b6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <timer0_overflow_count>
 2ba:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <timer0_overflow_count+0x1>
 2be:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <timer0_overflow_count+0x2>
 2c2:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <timer0_overflow_count+0x3>
 2c6:	bf 91       	pop	r27
 2c8:	af 91       	pop	r26
 2ca:	9f 91       	pop	r25
 2cc:	8f 91       	pop	r24
 2ce:	3f 91       	pop	r19
 2d0:	2f 91       	pop	r18
 2d2:	0f 90       	pop	r0
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	0f 90       	pop	r0
 2d8:	1f 90       	pop	r1
 2da:	18 95       	reti
 2dc:	01 96       	adiw	r24, 0x01	; 1
 2de:	a1 1d       	adc	r26, r1
 2e0:	b1 1d       	adc	r27, r1
 2e2:	d4 cf       	rjmp	.-88     	; 0x28c <__vector_16+0x3c>

000002e4 <micros>:
micros():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
 2e4:	3f b7       	in	r19, 0x3f	; 63
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
 2e6:	f8 94       	cli
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
 2e8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <timer0_overflow_count>
 2ec:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <timer0_overflow_count+0x1>
 2f0:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <timer0_overflow_count+0x2>
 2f4:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <timer0_overflow_count+0x3>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
 2f8:	26 b5       	in	r18, 0x26	; 38
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
 2fa:	a8 9b       	sbis	0x15, 0	; 21
 2fc:	05 c0       	rjmp	.+10     	; 0x308 <micros+0x24>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:261 (discriminator 1)
 2fe:	2f 3f       	cpi	r18, 0xFF	; 255
 300:	19 f0       	breq	.+6      	; 0x308 <micros+0x24>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
 302:	01 96       	adiw	r24, 0x01	; 1
 304:	a1 1d       	adc	r26, r1
 306:	b1 1d       	adc	r27, r1
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
 308:	3f bf       	out	0x3f, r19	; 63
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
 30a:	ba 2f       	mov	r27, r26
 30c:	a9 2f       	mov	r26, r25
 30e:	98 2f       	mov	r25, r24
 310:	88 27       	eor	r24, r24
 312:	bc 01       	movw	r22, r24
 314:	cd 01       	movw	r24, r26
 316:	62 0f       	add	r22, r18
 318:	71 1d       	adc	r23, r1
 31a:	81 1d       	adc	r24, r1
 31c:	91 1d       	adc	r25, r1
 31e:	42 e0       	ldi	r20, 0x02	; 2
 320:	66 0f       	add	r22, r22
 322:	77 1f       	adc	r23, r23
 324:	88 1f       	adc	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	4a 95       	dec	r20
 32a:	d1 f7       	brne	.-12     	; 0x320 <micros+0x3c>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
 32c:	08 95       	ret

0000032e <delay>:
delay():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
 32e:	8f 92       	push	r8
 330:	9f 92       	push	r9
 332:	af 92       	push	r10
 334:	bf 92       	push	r11
 336:	cf 92       	push	r12
 338:	df 92       	push	r13
 33a:	ef 92       	push	r14
 33c:	ff 92       	push	r15
 33e:	6b 01       	movw	r12, r22
 340:	7c 01       	movw	r14, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
 342:	0e 94 72 01 	call	0x2e4	; 0x2e4 <micros>
 346:	4b 01       	movw	r8, r22
 348:	5c 01       	movw	r10, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
 34a:	c1 14       	cp	r12, r1
 34c:	d1 04       	cpc	r13, r1
 34e:	e1 04       	cpc	r14, r1
 350:	f1 04       	cpc	r15, r1
 352:	e9 f0       	breq	.+58     	; 0x38e <delay+0x60>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:400
    yield();
 354:	0e 94 03 03 	call	0x606	; 0x606 <yield>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
 358:	0e 94 72 01 	call	0x2e4	; 0x2e4 <micros>
 35c:	68 19       	sub	r22, r8
 35e:	79 09       	sbc	r23, r9
 360:	8a 09       	sbc	r24, r10
 362:	9b 09       	sbc	r25, r11
 364:	68 3e       	cpi	r22, 0xE8	; 232
 366:	73 40       	sbci	r23, 0x03	; 3
 368:	81 05       	cpc	r24, r1
 36a:	91 05       	cpc	r25, r1
 36c:	70 f3       	brcs	.-36     	; 0x34a <delay+0x1c>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:402
      ms--;
 36e:	21 e0       	ldi	r18, 0x01	; 1
 370:	c2 1a       	sub	r12, r18
 372:	d1 08       	sbc	r13, r1
 374:	e1 08       	sbc	r14, r1
 376:	f1 08       	sbc	r15, r1
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
 378:	88 ee       	ldi	r24, 0xE8	; 232
 37a:	88 0e       	add	r8, r24
 37c:	83 e0       	ldi	r24, 0x03	; 3
 37e:	98 1e       	adc	r9, r24
 380:	a1 1c       	adc	r10, r1
 382:	b1 1c       	adc	r11, r1
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
 384:	c1 14       	cp	r12, r1
 386:	d1 04       	cpc	r13, r1
 388:	e1 04       	cpc	r14, r1
 38a:	f1 04       	cpc	r15, r1
 38c:	29 f7       	brne	.-54     	; 0x358 <delay+0x2a>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
 38e:	ff 90       	pop	r15
 390:	ef 90       	pop	r14
 392:	df 90       	pop	r13
 394:	cf 90       	pop	r12
 396:	bf 90       	pop	r11
 398:	af 90       	pop	r10
 39a:	9f 90       	pop	r9
 39c:	8f 90       	pop	r8
 39e:	08 95       	ret

000003a0 <delayMicroseconds>:
delayMicroseconds():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
 3a0:	82 30       	cpi	r24, 0x02	; 2
 3a2:	91 05       	cpc	r25, r1
 3a4:	38 f0       	brcs	.+14     	; 0x3b4 <delayMicroseconds+0x14>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
 3ae:	05 97       	sbiw	r24, 0x05	; 5
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
 3b0:	01 97       	sbiw	r24, 0x01	; 1
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <delayMicroseconds+0x10>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
 3b4:	08 95       	ret

000003b6 <init>:
init():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
 3b6:	78 94       	sei
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
 3b8:	84 b5       	in	r24, 0x24	; 36
 3ba:	83 60       	ori	r24, 0x03	; 3
 3bc:	84 bd       	out	0x24, r24	; 36
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
 3be:	85 b5       	in	r24, 0x25	; 37
 3c0:	83 60       	ori	r24, 0x03	; 3
 3c2:	85 bd       	out	0x25, r24	; 37
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
 3c4:	ee e6       	ldi	r30, 0x6E	; 110
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	81 60       	ori	r24, 0x01	; 1
 3cc:	80 83       	st	Z, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
 3ce:	e1 e8       	ldi	r30, 0x81	; 129
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	82 e0       	ldi	r24, 0x02	; 2
 3d4:	80 83       	st	Z, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
 3d6:	80 81       	ld	r24, Z
 3d8:	81 60       	ori	r24, 0x01	; 1
 3da:	80 83       	st	Z, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
 3dc:	e0 e8       	ldi	r30, 0x80	; 128
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	81 60       	ori	r24, 0x01	; 1
 3e4:	80 83       	st	Z, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
 3e6:	e1 eb       	ldi	r30, 0xB1	; 177
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	84 60       	ori	r24, 0x04	; 4
 3ee:	80 83       	st	Z, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
 3f0:	e0 eb       	ldi	r30, 0xB0	; 176
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	80 81       	ld	r24, Z
 3f6:	81 60       	ori	r24, 0x01	; 1
 3f8:	80 83       	st	Z, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
 3fa:	87 e8       	ldi	r24, 0x87	; 135
 3fc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
 400:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:1072
#endif
}
 404:	08 95       	ret

00000406 <analogWrite>:
analogWrite():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_analog.c:104
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
 406:	1f 93       	push	r17
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
 40c:	18 2f       	mov	r17, r24
 40e:	eb 01       	movw	r28, r22
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_analog.c:110
  // We need to make sure the PWM output is enabled for those pins
  // that support it, as we turn it off when digitally reading or
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);
 410:	61 e0       	ldi	r22, 0x01	; 1
 412:	0e 94 89 02 	call	0x512	; 0x512 <pinMode>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_analog.c:111
  if (val == 0)
 416:	20 97       	sbiw	r28, 0x00	; 0
 418:	39 f4       	brne	.+14     	; 0x428 <analogWrite+0x22>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_analog.c:113
  {
    digitalWrite(pin, LOW);
 41a:	60 e0       	ldi	r22, 0x00	; 0
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_analog.c:117
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
 41c:	81 2f       	mov	r24, r17
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_analog.c:308
        } else {
          digitalWrite(pin, HIGH);
        }
    }
  }
}
 41e:	df 91       	pop	r29
 420:	cf 91       	pop	r28
 422:	1f 91       	pop	r17
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_analog.c:117
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
 424:	0c 94 c5 02 	jmp	0x58a	; 0x58a <digitalWrite>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_analog.c:115
  pinMode(pin, OUTPUT);
  if (val == 0)
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
 428:	cf 3f       	cpi	r28, 0xFF	; 255
 42a:	d1 05       	cpc	r29, r1
 42c:	11 f4       	brne	.+4      	; 0x432 <analogWrite+0x2c>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_analog.c:117
  {
    digitalWrite(pin, HIGH);
 42e:	61 e0       	ldi	r22, 0x01	; 1
 430:	f5 cf       	rjmp	.-22     	; 0x41c <analogWrite+0x16>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_analog.c:121
  }
  else
  {
    switch(digitalPinToTimer(pin))
 432:	e1 2f       	mov	r30, r17
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	e8 59       	subi	r30, 0x98	; 152
 438:	ff 4f       	sbci	r31, 0xFF	; 255
 43a:	e4 91       	lpm	r30, Z
 43c:	e4 30       	cpi	r30, 0x04	; 4
 43e:	31 f1       	breq	.+76     	; 0x48c <analogWrite+0x86>
 440:	40 f4       	brcc	.+16     	; 0x452 <analogWrite+0x4c>
 442:	e2 30       	cpi	r30, 0x02	; 2
 444:	b1 f0       	breq	.+44     	; 0x472 <analogWrite+0x6c>
 446:	e3 30       	cpi	r30, 0x03	; 3
 448:	e1 f0       	breq	.+56     	; 0x482 <analogWrite+0x7c>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_analog.c:301
        break;
      #endif

      case NOT_ON_TIMER:
      default:
        if (val < 128) {
 44a:	c0 38       	cpi	r28, 0x80	; 128
 44c:	d1 05       	cpc	r29, r1
 44e:	7c f7       	brge	.-34     	; 0x42e <analogWrite+0x28>
 450:	e4 cf       	rjmp	.-56     	; 0x41a <analogWrite+0x14>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_analog.c:121
  {
    digitalWrite(pin, HIGH);
  }
  else
  {
    switch(digitalPinToTimer(pin))
 452:	e8 30       	cpi	r30, 0x08	; 8
 454:	29 f1       	breq	.+74     	; 0x4a0 <analogWrite+0x9a>
 456:	e9 30       	cpi	r30, 0x09	; 9
 458:	59 f1       	breq	.+86     	; 0x4b0 <analogWrite+0xaa>
 45a:	e5 30       	cpi	r30, 0x05	; 5
 45c:	b1 f7       	brne	.-20     	; 0x44a <analogWrite+0x44>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_analog.c:165
      #endif

      #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        // connect pwm to pin on timer 1, channel B
        TCCR1A |= _BV(COM1B1);
 45e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 462:	80 62       	ori	r24, 0x20	; 32
 464:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_analog.c:166
        OCR1B = val; // set pwm duty
 468:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 46c:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_analog.c:167
        break;
 470:	04 c0       	rjmp	.+8      	; 0x47a <analogWrite+0x74>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_analog.c:141
      #endif

      #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        // connect pwm to pin on timer 0, channel A
        TCCR0A |= _BV(COM0A1);
 472:	84 b5       	in	r24, 0x24	; 36
 474:	80 68       	ori	r24, 0x80	; 128
 476:	84 bd       	out	0x24, r24	; 36
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_analog.c:142
        OCR0A = val; // set pwm duty
 478:	c7 bd       	out	0x27, r28	; 39
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_analog.c:308
        } else {
          digitalWrite(pin, HIGH);
        }
    }
  }
}
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	1f 91       	pop	r17
 480:	08 95       	ret
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_analog.c:149
      #endif

      #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        // connect pwm to pin on timer 0, channel B
        TCCR0A |= _BV(COM0B1);
 482:	84 b5       	in	r24, 0x24	; 36
 484:	80 62       	ori	r24, 0x20	; 32
 486:	84 bd       	out	0x24, r24	; 36
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_analog.c:150
        OCR0B = val; // set pwm duty
 488:	c8 bd       	out	0x28, r28	; 40
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_analog.c:151
        break;
 48a:	f7 cf       	rjmp	.-18     	; 0x47a <analogWrite+0x74>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_analog.c:157
      #endif

      #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        // connect pwm to pin on timer 1, channel A
        TCCR1A |= _BV(COM1A1);
 48c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 490:	80 68       	ori	r24, 0x80	; 128
 492:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_analog.c:158
        OCR1A = val; // set pwm duty
 496:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 49a:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_analog.c:159
        break;
 49e:	ed cf       	rjmp	.-38     	; 0x47a <analogWrite+0x74>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_analog.c:189
      #endif

      #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        // connect pwm to pin on timer 2, channel A
        TCCR2A |= _BV(COM2A1);
 4a0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 4a4:	80 68       	ori	r24, 0x80	; 128
 4a6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_analog.c:190
        OCR2A = val; // set pwm duty
 4aa:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_analog.c:191
        break;
 4ae:	e5 cf       	rjmp	.-54     	; 0x47a <analogWrite+0x74>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_analog.c:197
      #endif

      #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        // connect pwm to pin on timer 2, channel B
        TCCR2A |= _BV(COM2B1);
 4b0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 4b4:	80 62       	ori	r24, 0x20	; 32
 4b6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_analog.c:198
        OCR2B = val; // set pwm duty
 4ba:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_analog.c:199
        break;
 4be:	dd cf       	rjmp	.-70     	; 0x47a <analogWrite+0x74>

000004c0 <turnOffPWM>:
turnOffPWM():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
 4c0:	84 30       	cpi	r24, 0x04	; 4
 4c2:	81 f0       	breq	.+32     	; 0x4e4 <turnOffPWM+0x24>
 4c4:	28 f4       	brcc	.+10     	; 0x4d0 <turnOffPWM+0x10>
 4c6:	82 30       	cpi	r24, 0x02	; 2
 4c8:	e9 f0       	breq	.+58     	; 0x504 <turnOffPWM+0x44>
 4ca:	83 30       	cpi	r24, 0x03	; 3
 4cc:	f9 f0       	breq	.+62     	; 0x50c <turnOffPWM+0x4c>
 4ce:	08 95       	ret
 4d0:	88 30       	cpi	r24, 0x08	; 8
 4d2:	71 f0       	breq	.+28     	; 0x4f0 <turnOffPWM+0x30>
 4d4:	89 30       	cpi	r24, 0x09	; 9
 4d6:	91 f0       	breq	.+36     	; 0x4fc <turnOffPWM+0x3c>
 4d8:	85 30       	cpi	r24, 0x05	; 5
 4da:	b9 f4       	brne	.+46     	; 0x50a <turnOffPWM+0x4a>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
 4dc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 4e0:	8f 7d       	andi	r24, 0xDF	; 223
 4e2:	03 c0       	rjmp	.+6      	; 0x4ea <turnOffPWM+0x2a>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
 4e4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 4e8:	8f 77       	andi	r24, 0x7F	; 127
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
 4ea:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:88
        break;
 4ee:	08 95       	ret
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
 4f0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 4f4:	8f 77       	andi	r24, 0x7F	; 127
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
 4f6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:110
        break;
 4fa:	08 95       	ret
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
 4fc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 500:	8f 7d       	andi	r24, 0xDF	; 223
 502:	f9 cf       	rjmp	.-14     	; 0x4f6 <turnOffPWM+0x36>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
 504:	84 b5       	in	r24, 0x24	; 36
 506:	8f 77       	andi	r24, 0x7F	; 127
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
 508:	84 bd       	out	0x24, r24	; 36
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
 50a:	08 95       	ret
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
 50c:	84 b5       	in	r24, 0x24	; 36
 50e:	8f 7d       	andi	r24, 0xDF	; 223
 510:	fb cf       	rjmp	.-10     	; 0x508 <turnOffPWM+0x48>

00000512 <pinMode>:
pinMode():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	fc 01       	movw	r30, r24
 51a:	e1 58       	subi	r30, 0x81	; 129
 51c:	ff 4f       	sbci	r31, 0xFF	; 255
 51e:	24 91       	lpm	r18, Z
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
 520:	8a 56       	subi	r24, 0x6A	; 106
 522:	9f 4f       	sbci	r25, 0xFF	; 255
 524:	fc 01       	movw	r30, r24
 526:	84 91       	lpm	r24, Z
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
 528:	88 23       	and	r24, r24
 52a:	c9 f0       	breq	.+50     	; 0x55e <pinMode+0x4c>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	88 0f       	add	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	fc 01       	movw	r30, r24
 534:	e9 54       	subi	r30, 0x49	; 73
 536:	ff 4f       	sbci	r31, 0xFF	; 255
 538:	a5 91       	lpm	r26, Z+
 53a:	b4 91       	lpm	r27, Z
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
 53c:	fc 01       	movw	r30, r24
 53e:	e3 55       	subi	r30, 0x53	; 83
 540:	ff 4f       	sbci	r31, 0xFF	; 255
 542:	c5 91       	lpm	r28, Z+
 544:	d4 91       	lpm	r29, Z
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
 546:	61 11       	cpse	r22, r1
 548:	0d c0       	rjmp	.+26     	; 0x564 <pinMode+0x52>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
 54a:	9f b7       	in	r25, 0x3f	; 63
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
 54c:	f8 94       	cli
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
 54e:	8c 91       	ld	r24, X
 550:	20 95       	com	r18
 552:	82 23       	and	r24, r18
 554:	8c 93       	st	X, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
 556:	88 81       	ld	r24, Y
 558:	28 23       	and	r18, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
 55a:	28 83       	st	Y, r18
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
 55c:	9f bf       	out	0x3f, r25	; 63
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	08 95       	ret
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
 564:	62 30       	cpi	r22, 0x02	; 2
 566:	51 f4       	brne	.+20     	; 0x57c <pinMode+0x6a>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
 568:	9f b7       	in	r25, 0x3f	; 63
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
 56a:	f8 94       	cli
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
 56c:	3c 91       	ld	r19, X
 56e:	82 2f       	mov	r24, r18
 570:	80 95       	com	r24
 572:	83 23       	and	r24, r19
 574:	8c 93       	st	X, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
 576:	e8 81       	ld	r30, Y
 578:	2e 2b       	or	r18, r30
 57a:	ef cf       	rjmp	.-34     	; 0x55a <pinMode+0x48>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
 57c:	8f b7       	in	r24, 0x3f	; 63
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
 57e:	f8 94       	cli
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
 580:	ec 91       	ld	r30, X
 582:	2e 2b       	or	r18, r30
 584:	2c 93       	st	X, r18
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
 586:	8f bf       	out	0x3f, r24	; 63
 588:	ea cf       	rjmp	.-44     	; 0x55e <pinMode+0x4c>

0000058a <digitalWrite>:
digitalWrite():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 58a:	1f 93       	push	r17
 58c:	cf 93       	push	r28
 58e:	df 93       	push	r29
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
 590:	28 2f       	mov	r18, r24
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	f9 01       	movw	r30, r18
 596:	e8 59       	subi	r30, 0x98	; 152
 598:	ff 4f       	sbci	r31, 0xFF	; 255
 59a:	84 91       	lpm	r24, Z
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
 59c:	f9 01       	movw	r30, r18
 59e:	e1 58       	subi	r30, 0x81	; 129
 5a0:	ff 4f       	sbci	r31, 0xFF	; 255
 5a2:	d4 91       	lpm	r29, Z
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
 5a4:	f9 01       	movw	r30, r18
 5a6:	ea 56       	subi	r30, 0x6A	; 106
 5a8:	ff 4f       	sbci	r31, 0xFF	; 255
 5aa:	c4 91       	lpm	r28, Z
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
 5ac:	cc 23       	and	r28, r28
 5ae:	a9 f0       	breq	.+42     	; 0x5da <digitalWrite+0x50>
 5b0:	16 2f       	mov	r17, r22
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 5b2:	81 11       	cpse	r24, r1
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
 5b4:	0e 94 60 02 	call	0x4c0	; 0x4c0 <turnOffPWM>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
 5b8:	ec 2f       	mov	r30, r28
 5ba:	f0 e0       	ldi	r31, 0x00	; 0
 5bc:	ee 0f       	add	r30, r30
 5be:	ff 1f       	adc	r31, r31
 5c0:	e3 55       	subi	r30, 0x53	; 83
 5c2:	ff 4f       	sbci	r31, 0xFF	; 255
 5c4:	a5 91       	lpm	r26, Z+
 5c6:	b4 91       	lpm	r27, Z
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
 5c8:	8f b7       	in	r24, 0x3f	; 63
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
 5ca:	f8 94       	cli
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
 5cc:	ec 91       	ld	r30, X
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
 5ce:	11 11       	cpse	r17, r1
 5d0:	08 c0       	rjmp	.+16     	; 0x5e2 <digitalWrite+0x58>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
 5d2:	d0 95       	com	r29
 5d4:	de 23       	and	r29, r30
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
 5d6:	dc 93       	st	X, r29
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
 5d8:	8f bf       	out	0x3f, r24	; 63
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:212
}
 5da:	df 91       	pop	r29
 5dc:	cf 91       	pop	r28
 5de:	1f 91       	pop	r17
 5e0:	08 95       	ret
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
 5e2:	de 2b       	or	r29, r30
 5e4:	f8 cf       	rjmp	.-16     	; 0x5d6 <digitalWrite+0x4c>

000005e6 <initVariant>:
initVariant():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
 5e6:	08 95       	ret

000005e8 <main>:
main():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
 5e8:	0e 94 db 01 	call	0x3b6	; 0x3b6 <init>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/main.cpp:37

  initVariant();
 5ec:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <initVariant>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
 5f0:	0e 94 80 00 	call	0x100	; 0x100 <setup>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
 5f4:	c0 e0       	ldi	r28, 0x00	; 0
 5f6:	d0 e0       	ldi	r29, 0x00	; 0
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
 5f8:	0e 94 bd 00 	call	0x17a	; 0x17a <loop>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
 5fc:	20 97       	sbiw	r28, 0x00	; 0
 5fe:	e1 f3       	breq	.-8      	; 0x5f8 <main+0x10>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/main.cpp:47 (discriminator 1)
 600:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 604:	f9 cf       	rjmp	.-14     	; 0x5f8 <main+0x10>

00000606 <yield>:
__empty():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
 606:	08 95       	ret

00000608 <_exit>:
exit():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
 608:	f8 94       	cli

0000060a <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
 60a:	ff cf       	rjmp	.-2      	; 0x60a <__stop_program>
