
/tmp/arduino_build_761813/Autonomous_Trash_Can.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__dtors_end>
       4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
       8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
       c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      10:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      14:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      18:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      1c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      20:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      24:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      28:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      2c:	0c 94 33 06 	jmp	0xc66	; 0xc66 <__vector_11>
      30:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      34:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      38:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      3c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      40:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_16>
      44:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      48:	0c 94 82 12 	jmp	0x2504	; 0x2504 <__vector_18>
      4c:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__vector_19>
      50:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      54:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      58:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      5c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      60:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__vector_24>
      64:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__trampolines_end>:
__trampolines_start():
      96:	4e 41       	sbci	r20, 0x1E	; 30
      98:	4e 49       	Address 0x0000000000000098 is out of bounds.
.word	0xffff	; ????

00000099 <pstr_inity>:
      99:	49 4e 49 54 59                                      INITY

0000009e <pstr_inf>:
      9e:	49 4e 46                                            INF

000000a1 <pwr_m10>:
      a1:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      b1:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000b9 <pwr_p10>:
      b9:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      c9:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
      d9:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      e9:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      f9:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     109:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     119:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     129:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     139:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     149:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     159:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     169:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     179:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     189:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     199:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     1a9:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     1b9:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     1c9:	3d 27                                               ='

000001cb <digital_pin_to_timer_PGM>:
     1cb:	00 00 00 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
     1db:	00 00 00 00 00 00 00                                .......

000001e2 <digital_pin_to_bit_mask_PGM>:
     1e2:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     1f2:	04 08 10 20 40 80 40                                ... @.@

000001f9 <digital_pin_to_port_PGM>:
     1f9:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     209:	03 03 03 03 02 02 03                                .......

00000210 <port_to_input_PGM>:
     210:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000021a <port_to_output_PGM>:
     21a:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000224 <port_to_mode_PGM>:
     224:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000022e <__ctors_start>:
__ctors_start():
     22e:	3b 03       	fmul	r19, r19
     230:	00 0a       	sbc	r0, r16
     232:	e4 12       	cpse	r14, r20

00000234 <__ctors_end>:
__dtors_start():
     234:	61 03       	mulsu	r22, r17

00000236 <__dtors_end>:
__dtors_end():
     236:	11 24       	eor	r1, r1
     238:	1f be       	out	0x3f, r1	; 63
     23a:	cf ef       	ldi	r28, 0xFF	; 255
     23c:	d8 e0       	ldi	r29, 0x08	; 8
     23e:	de bf       	out	0x3e, r29	; 62
     240:	cd bf       	out	0x3d, r28	; 61

00000242 <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     242:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     244:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     246:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     248:	ee ee       	ldi	r30, 0xEE	; 238
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     24a:	f1 e4       	ldi	r31, 0x41	; 65
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     24c:	02 c0       	rjmp	.+4      	; 0x252 <__do_copy_data+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     24e:	05 90       	lpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     250:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     252:	ac 3b       	cpi	r26, 0xBC	; 188
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     254:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     256:	d9 f7       	brne	.-10     	; 0x24e <__do_copy_data+0xc>

00000258 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     258:	24 e0       	ldi	r18, 0x04	; 4
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     25a:	ac eb       	ldi	r26, 0xBC	; 188
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     25c:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     25e:	01 c0       	rjmp	.+2      	; 0x262 <.do_clear_bss_start>

00000260 <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     260:	1d 92       	st	X+, r1

00000262 <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     262:	ac 31       	cpi	r26, 0x1C	; 28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     264:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     266:	e1 f7       	brne	.-8      	; 0x260 <.do_clear_bss_loop>

00000268 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     268:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     26a:	ca e1       	ldi	r28, 0x1A	; 26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     26c:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     26e:	04 c0       	rjmp	.+8      	; 0x278 <__do_global_ctors+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     270:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     272:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     274:	0e 94 4c 1a 	call	0x3498	; 0x3498 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     278:	c7 31       	cpi	r28, 0x17	; 23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     27a:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     27c:	c9 f7       	brne	.-14     	; 0x270 <__do_global_ctors+0x8>
     27e:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <main>
     282:	0c 94 ea 20 	jmp	0x41d4	; 0x41d4 <__do_global_dtors>

00000286 <__bad_interrupt>:
__vector_22():
     286:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028a <countPulseASM>:
countPulseASM():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:62

countPulseASM:

.LM0:
.LFBB1:
    push r12   ;   ;  130 pushqi1/1 [length = 1]
     28a:	cf 92       	push	r12
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:63
    push r13   ;   ;  131 pushqi1/1 [length = 1]
     28c:	df 92       	push	r13
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:64
    push r14   ;   ;  132 pushqi1/1 [length = 1]
     28e:	ef 92       	push	r14
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:65
    push r15   ;   ;  133 pushqi1/1 [length = 1]
     290:	ff 92       	push	r15
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:66
    push r16   ;   ;  134 pushqi1/1 [length = 1]
     292:	0f 93       	push	r16
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:67
    push r17   ;   ;  135 pushqi1/1 [length = 1]
     294:	1f 93       	push	r17
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:72
/* prologue: function */
/* frame size = 0 */
/* stack size = 6 */
.L__stack_usage = 6
    mov r30,r24  ;  port, port   ;  2 *movhi/1  [length = 2]
     296:	e8 2f       	mov	r30, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:73
    mov r31,r25  ;  port, port
     298:	f9 2f       	mov	r31, r25
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:79
/*     unsigned long width = 0;
***     // wait for any previous pulse to end
***     while ((*port & bit) == stateMask)
*/
.LM1:
    rjmp .L2   ;   ;  181 jump  [length = 1]
     29a:	05 c0       	rjmp	.+10     	; 0x2a6 <countPulseASM+0x1c>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:83
.L4:
/*         if (--maxloops == 0) */
.LM2:
    subi r16,1   ;  maxloops,  ;  17  addsi3/2  [length = 4]
     29c:	01 50       	subi	r16, 0x01	; 1
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:84
    sbc r17, r1   ;  maxloops
     29e:	11 09       	sbc	r17, r1
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:85
    sbc r18, r1   ;  maxloops
     2a0:	21 09       	sbc	r18, r1
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:86
    sbc r19, r1   ;  maxloops
     2a2:	31 09       	sbc	r19, r1
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:87
    breq .L13  ; ,   ;  19  branch  [length = 1]
     2a4:	61 f1       	breq	.+88     	; 0x2fe <countPulseASM+0x74>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:91
.L2:
/*         if (--maxloops == 0) */
.LM3:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  22  movqi_insn/4  [length = 1]
     2a6:	90 81       	ld	r25, Z
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:92
    and r25,r22  ;  D.1554, bit  ;  24  andqi3/1  [length = 1]
     2a8:	96 23       	and	r25, r22
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:93
    cp r25,r20   ;  D.1554, stateMask  ;  25  *cmpqi/2  [length = 1]
     2aa:	94 17       	cp	r25, r20
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:94
    breq .L4   ; ,   ;  26  branch  [length = 1]
     2ac:	b9 f3       	breq	.-18     	; 0x29c <countPulseASM+0x12>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:95
    rjmp .L6   ;   ;  184 jump  [length = 1]
     2ae:	05 c0       	rjmp	.+10     	; 0x2ba <countPulseASM+0x30>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:104
***     // wait for the pulse to start
***     while ((*port & bit) != stateMask)
***         if (--maxloops == 0)
*/
.LM4:
    subi r16,1   ;  maxloops,  ;  31  addsi3/2  [length = 4]
     2b0:	01 50       	subi	r16, 0x01	; 1
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:105
    sbc r17, r1   ;  maxloops
     2b2:	11 09       	sbc	r17, r1
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:106
    sbc r18, r1   ;  maxloops
     2b4:	21 09       	sbc	r18, r1
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:107
    sbc r19, r1   ;  maxloops
     2b6:	31 09       	sbc	r19, r1
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:108
    breq .L13  ; ,   ;  33  branch  [length = 1]
     2b8:	11 f1       	breq	.+68     	; 0x2fe <countPulseASM+0x74>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:112
.L6:
/*         if (--maxloops == 0) */
.LM5:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  41  movqi_insn/4  [length = 1]
     2ba:	90 81       	ld	r25, Z
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:113
    and r25,r22  ;  D.1554, bit  ;  43  andqi3/1  [length = 1]
     2bc:	96 23       	and	r25, r22
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:114
    cpse r25,r20   ;  D.1554, stateMask  ;  44  enable_interrupt-3  [length = 1]
     2be:	94 13       	cpse	r25, r20
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:115
    rjmp .L7   ;
     2c0:	f7 cf       	rjmp	.-18     	; 0x2b0 <countPulseASM+0x26>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:116
    mov r12, r1   ;  width  ;  7 *movsi/2  [length = 4]
     2c2:	c1 2c       	mov	r12, r1
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:117
    mov r13, r1   ;  width
     2c4:	d1 2c       	mov	r13, r1
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:118
    mov r14, r1   ;  width
     2c6:	e1 2c       	mov	r14, r1
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:119
    mov r15, r1   ;  width
     2c8:	f1 2c       	mov	r15, r1
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:120
    rjmp .L9   ;   ;  186 jump  [length = 1]
     2ca:	0a c0       	rjmp	.+20     	; 0x2e0 <countPulseASM+0x56>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:129
***     // wait for the pulse to stop
***     while ((*port & bit) == stateMask) {
***         if (++width == maxloops)
*/
.LM6:
    ldi r24,-1   ; ,   ;  50  addsi3/3  [length = 5]
     2cc:	8f ef       	ldi	r24, 0xFF	; 255
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:130
    sub r12,r24  ;  width,
     2ce:	c8 1a       	sub	r12, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:131
    sbc r13,r24  ;  width,
     2d0:	d8 0a       	sbc	r13, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:132
    sbc r14,r24  ;  width,
     2d2:	e8 0a       	sbc	r14, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:133
    sbc r15,r24  ;  width,
     2d4:	f8 0a       	sbc	r15, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:134
    cp r16,r12   ;  maxloops, width  ;  51  *cmpsi/2  [length = 4]
     2d6:	0c 15       	cp	r16, r12
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:135
    cpc r17,r13  ;  maxloops, width
     2d8:	1d 05       	cpc	r17, r13
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:136
    cpc r18,r14  ;  maxloops, width
     2da:	2e 05       	cpc	r18, r14
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:137
    cpc r19,r15  ;  maxloops, width
     2dc:	3f 05       	cpc	r19, r15
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:138
    breq .L13  ; ,   ;  52  branch  [length = 1]
     2de:	79 f0       	breq	.+30     	; 0x2fe <countPulseASM+0x74>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:142
.L9:
/*         if (++width == maxloops) */
.LM7:
    ld r24,Z   ;  D.1554, *port_7(D)   ;  60  movqi_insn/4  [length = 1]
     2e0:	80 81       	ld	r24, Z
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:143
    and r24,r22  ;  D.1554, bit  ;  62  andqi3/1  [length = 1]
     2e2:	86 23       	and	r24, r22
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:144
    cp r24,r20   ;  D.1554, stateMask  ;  63  *cmpqi/2  [length = 1]
     2e4:	84 17       	cp	r24, r20
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:145
    breq .L10  ; ,   ;  64  branch  [length = 1]
     2e6:	91 f3       	breq	.-28     	; 0x2cc <countPulseASM+0x42>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:151
/*             return 0;
***     }
***     return width;
*/
.LM8:
    mov r22,r12  ;  D.1553, width  ;  108 movqi_insn/1  [length = 1]
     2e8:	6c 2d       	mov	r22, r12
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:152
    mov r23,r13  ;  D.1553, width  ;  109 movqi_insn/1  [length = 1]
     2ea:	7d 2d       	mov	r23, r13
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:153
    mov r24,r14  ;  D.1553, width  ;  110 movqi_insn/1  [length = 1]
     2ec:	8e 2d       	mov	r24, r14
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:154
    mov r25,r15  ;  D.1553, width  ;  111 movqi_insn/1  [length = 1]
     2ee:	9f 2d       	mov	r25, r15
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:157
/* epilogue start */
.LM9:
    pop r17  ;   ;  171 popqi [length = 1]
     2f0:	1f 91       	pop	r17
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:158
    pop r16  ;   ;  172 popqi [length = 1]
     2f2:	0f 91       	pop	r16
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:159
    pop r15  ;   ;  173 popqi [length = 1]
     2f4:	ff 90       	pop	r15
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:160
    pop r14  ;   ;  174 popqi [length = 1]
     2f6:	ef 90       	pop	r14
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:161
    pop r13  ;   ;  175 popqi [length = 1]
     2f8:	df 90       	pop	r13
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:162
    pop r12  ;   ;  176 popqi [length = 1]
     2fa:	cf 90       	pop	r12
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:163
    ret  ;  177 return_from_epilogue  [length = 1]
     2fc:	08 95       	ret
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:166
.L13:
.LM10:
    ldi r22,0  ;  D.1553   ;  120 movqi_insn/1  [length = 1]
     2fe:	60 e0       	ldi	r22, 0x00	; 0
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:167
    ldi r23,0  ;  D.1553   ;  121 movqi_insn/1  [length = 1]
     300:	70 e0       	ldi	r23, 0x00	; 0
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:168
    ldi r24,0  ;  D.1553   ;  122 movqi_insn/1  [length = 1]
     302:	80 e0       	ldi	r24, 0x00	; 0
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:169
    ldi r25,0  ;  D.1553   ;  123 movqi_insn/1  [length = 1]
     304:	90 e0       	ldi	r25, 0x00	; 0
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:172
/* epilogue start */
.LM11:
    pop r17  ;   ;  138 popqi [length = 1]
     306:	1f 91       	pop	r17
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:173
    pop r16  ;   ;  139 popqi [length = 1]
     308:	0f 91       	pop	r16
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:174
    pop r15  ;   ;  140 popqi [length = 1]
     30a:	ff 90       	pop	r15
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:175
    pop r14  ;   ;  141 popqi [length = 1]
     30c:	ef 90       	pop	r14
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:176
    pop r13  ;   ;  142 popqi [length = 1]
     30e:	df 90       	pop	r13
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:177
    pop r12  ;   ;  143 popqi [length = 1]
     310:	cf 90       	pop	r12
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.S:178
    ret  ;  144 return_from_epilogue  [length = 1]
     312:	08 95       	ret

00000314 <ATC::stop() [clone .isra.8]>:
_ZN3ATC4stopEv():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:207
    digitalWrite(m1f, 1);
    digitalWrite(m0r, 1);
    Status = turnleft;
  }

  void stop()
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	ec 01       	movw	r28, r24
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:209
  {
    digitalWrite(m0f, 0);
     31a:	60 e0       	ldi	r22, 0x00	; 0
     31c:	8b e0       	ldi	r24, 0x0B	; 11
     31e:	0e 94 01 11 	call	0x2202	; 0x2202 <digitalWrite>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:210
    digitalWrite(m0r, 0);
     322:	60 e0       	ldi	r22, 0x00	; 0
     324:	8a e0       	ldi	r24, 0x0A	; 10
     326:	0e 94 01 11 	call	0x2202	; 0x2202 <digitalWrite>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:211
    digitalWrite(m1f, 0);
     32a:	60 e0       	ldi	r22, 0x00	; 0
     32c:	8c e0       	ldi	r24, 0x0C	; 12
     32e:	0e 94 01 11 	call	0x2202	; 0x2202 <digitalWrite>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:212
    digitalWrite(m1r, 0);
     332:	60 e0       	ldi	r22, 0x00	; 0
     334:	8d e0       	ldi	r24, 0x0D	; 13
     336:	0e 94 01 11 	call	0x2202	; 0x2202 <digitalWrite>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:213
    Status = stopped;
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	99 83       	std	Y+1, r25	; 0x01
     340:	88 83       	st	Y, r24
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:214
  }
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	08 95       	ret

00000348 <ATC::isListData(String*) [clone .isra.9] [clone .constprop.13]>:
_ZN3ATC10isListDataEP6String():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:255
    Buffer.concat(",\"azm\":");
    Buffer.concat(azimuthal);
    Buffer.concat("}");
  }

  bool isListData(String* data)
     348:	1f 93       	push	r17
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
     352:	2c 97       	sbiw	r28, 0x0c	; 12
     354:	0f b6       	in	r0, 0x3f	; 63
     356:	f8 94       	cli
     358:	de bf       	out	0x3e, r29	; 62
     35a:	0f be       	out	0x3f, r0	; 63
     35c:	cd bf       	out	0x3d, r28	; 61
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:257
  {
    if (data->startsWith("[") && data->endsWith("]"))
     35e:	66 e3       	ldi	r22, 0x36	; 54
     360:	71 e0       	ldi	r23, 0x01	; 1
     362:	ce 01       	movw	r24, r28
     364:	07 96       	adiw	r24, 0x07	; 7
     366:	0e 94 22 14 	call	0x2844	; 0x2844 <String::String(char const*)>
     36a:	be 01       	movw	r22, r28
     36c:	69 5f       	subi	r22, 0xF9	; 249
     36e:	7f 4f       	sbci	r23, 0xFF	; 255
     370:	89 ed       	ldi	r24, 0xD9	; 217
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <String::startsWith(String const&) const>
     378:	10 e0       	ldi	r17, 0x00	; 0
     37a:	88 23       	and	r24, r24
     37c:	a9 f0       	breq	.+42     	; 0x3a8 <ATC::isListData(String*) [clone .isra.9] [clone .constprop.13]+0x60>
     37e:	68 e3       	ldi	r22, 0x38	; 56
     380:	71 e0       	ldi	r23, 0x01	; 1
     382:	ce 01       	movw	r24, r28
     384:	01 96       	adiw	r24, 0x01	; 1
     386:	0e 94 22 14 	call	0x2844	; 0x2844 <String::String(char const*)>
     38a:	be 01       	movw	r22, r28
     38c:	6f 5f       	subi	r22, 0xFF	; 255
     38e:	7f 4f       	sbci	r23, 0xFF	; 255
     390:	89 ed       	ldi	r24, 0xD9	; 217
     392:	91 e0       	ldi	r25, 0x01	; 1
     394:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <String::endsWith(String const&) const>
     398:	11 e0       	ldi	r17, 0x01	; 1
     39a:	81 11       	cpse	r24, r1
     39c:	01 c0       	rjmp	.+2      	; 0x3a0 <ATC::isListData(String*) [clone .isra.9] [clone .constprop.13]+0x58>
     39e:	10 e0       	ldi	r17, 0x00	; 0
     3a0:	ce 01       	movw	r24, r28
     3a2:	01 96       	adiw	r24, 0x01	; 1
     3a4:	0e 94 b3 13 	call	0x2766	; 0x2766 <String::~String()>
     3a8:	ce 01       	movw	r24, r28
     3aa:	07 96       	adiw	r24, 0x07	; 7
     3ac:	0e 94 b3 13 	call	0x2766	; 0x2766 <String::~String()>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:264
      return true;
    }
    else {
      return false;
    }
  }
     3b0:	81 2f       	mov	r24, r17
     3b2:	2c 96       	adiw	r28, 0x0c	; 12
     3b4:	0f b6       	in	r0, 0x3f	; 63
     3b6:	f8 94       	cli
     3b8:	de bf       	out	0x3e, r29	; 62
     3ba:	0f be       	out	0x3f, r0	; 63
     3bc:	cd bf       	out	0x3d, r28	; 61
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	1f 91       	pop	r17
     3c4:	08 95       	ret

000003c6 <ATC::init()>:
_ZN3ATC4initEv():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:42
  enum states {bin_full = 200};
  enum motions {idle, stopped, Forward, Backward, turnleft, turnright};
  bool binState = closed, Locked = false, gpsStat = false;
  int Status = idle, azimuthal = 0;

  void init(void)
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	ec 01       	movw	r28, r24
_ZN14HardwareSerial5beginEm():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     3cc:	26 e0       	ldi	r18, 0x06	; 6
     3ce:	40 e8       	ldi	r20, 0x80	; 128
     3d0:	55 e2       	ldi	r21, 0x25	; 37
     3d2:	60 e0       	ldi	r22, 0x00	; 0
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	88 e7       	ldi	r24, 0x78	; 120
     3d8:	93 e0       	ldi	r25, 0x03	; 3
     3da:	0e 94 2a 12 	call	0x2454	; 0x2454 <HardwareSerial::begin(unsigned long, unsigned char)>
_ZN3ATC4initEv():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:45
  {
    Serial.begin(9600);
    Wire.begin();
     3de:	8b ea       	ldi	r24, 0xAB	; 171
     3e0:	92 e0       	ldi	r25, 0x02	; 2
     3e2:	0e 94 65 09 	call	0x12ca	; 0x12ca <TwoWire::begin()>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:46
    compass.init();
     3e6:	85 ee       	ldi	r24, 0xE5	; 229
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <QMC5883LCompass::init()>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:47
    pinMode(m0f, OUTPUT);
     3ee:	61 e0       	ldi	r22, 0x01	; 1
     3f0:	8b e0       	ldi	r24, 0x0B	; 11
     3f2:	0e 94 c5 10 	call	0x218a	; 0x218a <pinMode>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:48
    pinMode(m0r, OUTPUT);
     3f6:	61 e0       	ldi	r22, 0x01	; 1
     3f8:	8a e0       	ldi	r24, 0x0A	; 10
     3fa:	0e 94 c5 10 	call	0x218a	; 0x218a <pinMode>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:49
    pinMode(m1f, OUTPUT);
     3fe:	61 e0       	ldi	r22, 0x01	; 1
     400:	8c e0       	ldi	r24, 0x0C	; 12
     402:	0e 94 c5 10 	call	0x218a	; 0x218a <pinMode>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:50
    pinMode(m1r, OUTPUT);
     406:	61 e0       	ldi	r22, 0x01	; 1
     408:	8d e0       	ldi	r24, 0x0D	; 13
     40a:	0e 94 c5 10 	call	0x218a	; 0x218a <pinMode>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:51
    stop();
     40e:	ce 01       	movw	r24, r28
     410:	03 96       	adiw	r24, 0x03	; 3
     412:	0e 94 8a 01 	call	0x314	; 0x314 <ATC::stop() [clone .isra.8]>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:53

    pinMode(trig0, 1);
     416:	61 e0       	ldi	r22, 0x01	; 1
     418:	87 e0       	ldi	r24, 0x07	; 7
     41a:	0e 94 c5 10 	call	0x218a	; 0x218a <pinMode>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:54
    pinMode(echo0, 0);
     41e:	60 e0       	ldi	r22, 0x00	; 0
     420:	88 e0       	ldi	r24, 0x08	; 8
     422:	0e 94 c5 10 	call	0x218a	; 0x218a <pinMode>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:55
    pinMode(trig1, 1);
     426:	61 e0       	ldi	r22, 0x01	; 1
     428:	8e e0       	ldi	r24, 0x0E	; 14
     42a:	0e 94 c5 10 	call	0x218a	; 0x218a <pinMode>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:56
    pinMode(echo1, 0);
     42e:	60 e0       	ldi	r22, 0x00	; 0
     430:	8f e0       	ldi	r24, 0x0F	; 15
     432:	0e 94 c5 10 	call	0x218a	; 0x218a <pinMode>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:58

    digitalWrite(trig0, 0);
     436:	60 e0       	ldi	r22, 0x00	; 0
     438:	87 e0       	ldi	r24, 0x07	; 7
     43a:	0e 94 01 11 	call	0x2202	; 0x2202 <digitalWrite>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:59
    digitalWrite(trig1, 0);
     43e:	60 e0       	ldi	r22, 0x00	; 0
     440:	8e e0       	ldi	r24, 0x0E	; 14
     442:	0e 94 01 11 	call	0x2202	; 0x2202 <digitalWrite>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:61
    
    delay(1500);
     446:	6c ed       	ldi	r22, 0xDC	; 220
     448:	75 e0       	ldi	r23, 0x05	; 5
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 30 10 	call	0x2060	; 0x2060 <delay>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:63

    servo.attach(servomotor);
     452:	69 e0       	ldi	r22, 0x09	; 9
     454:	70 e0       	ldi	r23, 0x00	; 0
     456:	82 e8       	ldi	r24, 0x82	; 130
     458:	92 e0       	ldi	r25, 0x02	; 2
     45a:	0e 94 88 07 	call	0xf10	; 0xf10 <Servo::attach(int)>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:64
    servo.write(closePos);
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	60 e0       	ldi	r22, 0x00	; 0
     462:	82 e8       	ldi	r24, 0x82	; 130
     464:	92 e0       	ldi	r25, 0x02	; 2
     466:	0e 94 c5 07 	call	0xf8a	; 0xf8a <Servo::write(int)>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:66

    Buffer.reserve(100);
     46a:	64 e6       	ldi	r22, 0x64	; 100
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	8f ed       	ldi	r24, 0xDF	; 223
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <String::reserve(unsigned int)>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:67
    data.reserve(100);
     476:	64 e6       	ldi	r22, 0x64	; 100
     478:	70 e0       	ldi	r23, 0x00	; 0
     47a:	89 ed       	ldi	r24, 0xD9	; 217
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <String::reserve(unsigned int)>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:68
    mem.reserve(100);
     482:	64 e6       	ldi	r22, 0x64	; 100
     484:	70 e0       	ldi	r23, 0x00	; 0
     486:	83 ed       	ldi	r24, 0xD3	; 211
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <String::reserve(unsigned int)>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:69
    ltd.reserve(15);
     48e:	6f e0       	ldi	r22, 0x0F	; 15
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	8d ec       	ldi	r24, 0xCD	; 205
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <String::reserve(unsigned int)>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:70
    lgd.reserve(15);
     49a:	6f e0       	ldi	r22, 0x0F	; 15
     49c:	70 e0       	ldi	r23, 0x00	; 0
     49e:	87 ec       	ldi	r24, 0xC7	; 199
     4a0:	91 e0       	ldi	r25, 0x01	; 1
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:71
  }
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:70

    Buffer.reserve(100);
    data.reserve(100);
    mem.reserve(100);
    ltd.reserve(15);
    lgd.reserve(15);
     4a6:	0c 94 e4 13 	jmp	0x27c8	; 0x27c8 <String::reserve(unsigned int)>

000004aa <ATC::load_buffer()>:
_ZN3ATC11load_bufferEv():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:237
  //  void react()
  //  {
  //
  //  }

  void load_buffer(void)
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	ec 01       	movw	r28, r24
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:239
  {
    Buffer = "";
     4b0:	6b eb       	ldi	r22, 0xBB	; 187
     4b2:	71 e0       	ldi	r23, 0x01	; 1
     4b4:	8f ed       	ldi	r24, 0xDF	; 223
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	0e 94 aa 14 	call	0x2954	; 0x2954 <String::operator=(char const*)>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:240
    Buffer.concat("{\"stat\":");
     4bc:	6a e3       	ldi	r22, 0x3A	; 58
     4be:	71 e0       	ldi	r23, 0x01	; 1
     4c0:	8f ed       	ldi	r24, 0xDF	; 223
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <String::concat(char const*)>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:241
    Buffer.concat(Status);
     4c8:	6b 81       	ldd	r22, Y+3	; 0x03
     4ca:	7c 81       	ldd	r23, Y+4	; 0x04
     4cc:	8f ed       	ldi	r24, 0xDF	; 223
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <String::concat(int)>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:242
    Buffer.concat(",\"gStat\":");
     4d4:	63 e4       	ldi	r22, 0x43	; 67
     4d6:	71 e0       	ldi	r23, 0x01	; 1
     4d8:	8f ed       	ldi	r24, 0xDF	; 223
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <String::concat(char const*)>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:243
    Buffer.concat(gpsStat);
     4e0:	6a 81       	ldd	r22, Y+2	; 0x02
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	8f ed       	ldi	r24, 0xDF	; 223
     4e6:	91 e0       	ldi	r25, 0x01	; 1
     4e8:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <String::concat(int)>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:244
    Buffer.concat(",\"lat\":");
     4ec:	6d e4       	ldi	r22, 0x4D	; 77
     4ee:	71 e0       	ldi	r23, 0x01	; 1
     4f0:	8f ed       	ldi	r24, 0xDF	; 223
     4f2:	91 e0       	ldi	r25, 0x01	; 1
     4f4:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <String::concat(char const*)>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:245
    Buffer.concat(ltd);
     4f8:	6d ec       	ldi	r22, 0xCD	; 205
     4fa:	71 e0       	ldi	r23, 0x01	; 1
     4fc:	8f ed       	ldi	r24, 0xDF	; 223
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	0e 94 e5 14 	call	0x29ca	; 0x29ca <String::concat(String const&)>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:246
    Buffer.concat(",\"lng\":");
     504:	65 e5       	ldi	r22, 0x55	; 85
     506:	71 e0       	ldi	r23, 0x01	; 1
     508:	8f ed       	ldi	r24, 0xDF	; 223
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <String::concat(char const*)>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:247
    Buffer.concat(lgd);
     510:	67 ec       	ldi	r22, 0xC7	; 199
     512:	71 e0       	ldi	r23, 0x01	; 1
     514:	8f ed       	ldi	r24, 0xDF	; 223
     516:	91 e0       	ldi	r25, 0x01	; 1
     518:	0e 94 e5 14 	call	0x29ca	; 0x29ca <String::concat(String const&)>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:248
    Buffer.concat(",\"dist\":");
     51c:	6d e5       	ldi	r22, 0x5D	; 93
     51e:	71 e0       	ldi	r23, 0x01	; 1
     520:	8f ed       	ldi	r24, 0xDF	; 223
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <String::concat(char const*)>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:249
    Buffer.concat(dist);
     528:	40 91 c3 01 	lds	r20, 0x01C3	; 0x8001c3 <dist>
     52c:	50 91 c4 01 	lds	r21, 0x01C4	; 0x8001c4 <dist+0x1>
     530:	60 91 c5 01 	lds	r22, 0x01C5	; 0x8001c5 <dist+0x2>
     534:	70 91 c6 01 	lds	r23, 0x01C6	; 0x8001c6 <dist+0x3>
     538:	8f ed       	ldi	r24, 0xDF	; 223
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <String::concat(float)>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:250
    Buffer.concat(",\"azm\":");
     540:	66 e6       	ldi	r22, 0x66	; 102
     542:	71 e0       	ldi	r23, 0x01	; 1
     544:	8f ed       	ldi	r24, 0xDF	; 223
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <String::concat(char const*)>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:251
    Buffer.concat(azimuthal);
     54c:	6d 81       	ldd	r22, Y+5	; 0x05
     54e:	7e 81       	ldd	r23, Y+6	; 0x06
     550:	8f ed       	ldi	r24, 0xDF	; 223
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <String::concat(int)>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:252
    Buffer.concat("}");
     558:	6e e6       	ldi	r22, 0x6E	; 110
     55a:	71 e0       	ldi	r23, 0x01	; 1
     55c:	8f ed       	ldi	r24, 0xDF	; 223
     55e:	91 e0       	ldi	r25, 0x01	; 1
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:253
  }
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:252
    Buffer.concat(lgd);
    Buffer.concat(",\"dist\":");
    Buffer.concat(dist);
    Buffer.concat(",\"azm\":");
    Buffer.concat(azimuthal);
    Buffer.concat("}");
     564:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <String::concat(char const*)>

00000568 <ATC::readStrList(String*, String, unsigned char)>:
_ZN3ATC11readStrListEP6StringS0_h():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:266
    else {
      return false;
    }
  }

  String readStrList(String* memory, String strList, byte position)
     568:	7f 92       	push	r7
     56a:	8f 92       	push	r8
     56c:	9f 92       	push	r9
     56e:	af 92       	push	r10
     570:	bf 92       	push	r11
     572:	cf 92       	push	r12
     574:	df 92       	push	r13
     576:	ef 92       	push	r14
     578:	ff 92       	push	r15
     57a:	0f 93       	push	r16
     57c:	1f 93       	push	r17
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29
     582:	00 d0       	rcall	.+0      	; 0x584 <ATC::readStrList(String*, String, unsigned char)+0x1c>
     584:	00 d0       	rcall	.+0      	; 0x586 <ATC::readStrList(String*, String, unsigned char)+0x1e>
     586:	00 d0       	rcall	.+0      	; 0x588 <ATC::readStrList(String*, String, unsigned char)+0x20>
     588:	cd b7       	in	r28, 0x3d	; 61
     58a:	de b7       	in	r29, 0x3e	; 62
     58c:	4c 01       	movw	r8, r24
     58e:	7a 01       	movw	r14, r20
     590:	59 01       	movw	r10, r18
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:269
  {
    byte index = 0;
    *memory = "";
     592:	6b eb       	ldi	r22, 0xBB	; 187
     594:	71 e0       	ldi	r23, 0x01	; 1
     596:	ca 01       	movw	r24, r20
     598:	0e 94 aa 14 	call	0x2954	; 0x2954 <String::operator=(char const*)>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:270
    for (int i = 0; i < strList.length(); i++)
     59c:	d1 2c       	mov	r13, r1
     59e:	c1 2c       	mov	r12, r1
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:268
    }
  }

  String readStrList(String* memory, String strList, byte position)
  {
    byte index = 0;
     5a0:	71 2c       	mov	r7, r1
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:276
    {
      if (strList[i] == ',')
      {
        index++;
      }
      if (index == position - 1)
     5a2:	01 50       	subi	r16, 0x01	; 1
     5a4:	11 0b       	sbc	r17, r17
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:270 (discriminator 1)

  String readStrList(String* memory, String strList, byte position)
  {
    byte index = 0;
    *memory = "";
    for (int i = 0; i < strList.length(); i++)
     5a6:	f5 01       	movw	r30, r10
     5a8:	84 81       	ldd	r24, Z+4	; 0x04
     5aa:	95 81       	ldd	r25, Z+5	; 0x05
     5ac:	c8 16       	cp	r12, r24
     5ae:	d9 06       	cpc	r13, r25
     5b0:	c8 f4       	brcc	.+50     	; 0x5e4 <ATC::readStrList(String*, String, unsigned char)+0x7c>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:272
    {
      if (strList[i] == ',')
     5b2:	b6 01       	movw	r22, r12
     5b4:	c5 01       	movw	r24, r10
     5b6:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <String::operator[](unsigned int)>
     5ba:	fc 01       	movw	r30, r24
     5bc:	80 81       	ld	r24, Z
     5be:	8c 32       	cpi	r24, 0x2C	; 44
     5c0:	09 f4       	brne	.+2      	; 0x5c4 <ATC::readStrList(String*, String, unsigned char)+0x5c>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:274
      {
        index++;
     5c2:	73 94       	inc	r7
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:276
      }
      if (index == position - 1)
     5c4:	70 16       	cp	r7, r16
     5c6:	11 06       	cpc	r1, r17
     5c8:	49 f4       	brne	.+18     	; 0x5dc <ATC::readStrList(String*, String, unsigned char)+0x74>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:278
      {
        memory->concat(strList[i]);
     5ca:	b6 01       	movw	r22, r12
     5cc:	c5 01       	movw	r24, r10
     5ce:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <String::operator[](unsigned int)>
     5d2:	fc 01       	movw	r30, r24
     5d4:	60 81       	ld	r22, Z
     5d6:	c7 01       	movw	r24, r14
     5d8:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <String::concat(char)>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:270 (discriminator 2)

  String readStrList(String* memory, String strList, byte position)
  {
    byte index = 0;
    *memory = "";
    for (int i = 0; i < strList.length(); i++)
     5dc:	ff ef       	ldi	r31, 0xFF	; 255
     5de:	cf 1a       	sub	r12, r31
     5e0:	df 0a       	sbc	r13, r31
     5e2:	e1 cf       	rjmp	.-62     	; 0x5a6 <ATC::readStrList(String*, String, unsigned char)+0x3e>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:281
      if (index == position - 1)
      {
        memory->concat(strList[i]);
      }
    }
    if (memory->startsWith(","))
     5e4:	60 e7       	ldi	r22, 0x70	; 112
     5e6:	71 e0       	ldi	r23, 0x01	; 1
     5e8:	ce 01       	movw	r24, r28
     5ea:	01 96       	adiw	r24, 0x01	; 1
     5ec:	0e 94 22 14 	call	0x2844	; 0x2844 <String::String(char const*)>
     5f0:	be 01       	movw	r22, r28
     5f2:	6f 5f       	subi	r22, 0xFF	; 255
     5f4:	7f 4f       	sbci	r23, 0xFF	; 255
     5f6:	c7 01       	movw	r24, r14
     5f8:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <String::startsWith(String const&) const>
     5fc:	18 2f       	mov	r17, r24
     5fe:	ce 01       	movw	r24, r28
     600:	01 96       	adiw	r24, 0x01	; 1
     602:	0e 94 b3 13 	call	0x2766	; 0x2766 <String::~String()>
     606:	11 23       	and	r17, r17
     608:	c9 f0       	breq	.+50     	; 0x63c <ATC::readStrList(String*, String, unsigned char)+0xd4>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:283
    {
      *memory = memory->substring(memory->indexOf(',') + 1);
     60a:	6c e2       	ldi	r22, 0x2C	; 44
     60c:	c7 01       	movw	r24, r14
     60e:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <String::indexOf(char) const>
_ZNK6String9substringEj():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.h:178
  int indexOf( const String &str, unsigned int fromIndex ) const;
  int lastIndexOf( char ch ) const;
  int lastIndexOf( char ch, unsigned int fromIndex ) const;
  int lastIndexOf( const String &str ) const;
  int lastIndexOf( const String &str, unsigned int fromIndex ) const;
  String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
     612:	f7 01       	movw	r30, r14
     614:	24 81       	ldd	r18, Z+4	; 0x04
     616:	35 81       	ldd	r19, Z+5	; 0x05
_ZN3ATC11readStrListEP6StringS0_h():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:283
     618:	ac 01       	movw	r20, r24
     61a:	4f 5f       	subi	r20, 0xFF	; 255
     61c:	5f 4f       	sbci	r21, 0xFF	; 255
_ZNK6String9substringEj():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.h:178
     61e:	b7 01       	movw	r22, r14
     620:	ce 01       	movw	r24, r28
     622:	01 96       	adiw	r24, 0x01	; 1
     624:	0e 94 12 16 	call	0x2c24	; 0x2c24 <String::substring(unsigned int, unsigned int) const>
_ZN3ATC11readStrListEP6StringS0_h():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:283
     628:	be 01       	movw	r22, r28
     62a:	6f 5f       	subi	r22, 0xFF	; 255
     62c:	7f 4f       	sbci	r23, 0xFF	; 255
     62e:	c7 01       	movw	r24, r14
     630:	0e 94 9e 14 	call	0x293c	; 0x293c <String::operator=(String&&)>
     634:	ce 01       	movw	r24, r28
     636:	01 96       	adiw	r24, 0x01	; 1
     638:	0e 94 b3 13 	call	0x2766	; 0x2766 <String::~String()>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:285
    }
    return *memory;
     63c:	b7 01       	movw	r22, r14
     63e:	c4 01       	movw	r24, r8
     640:	0e 94 95 14 	call	0x292a	; 0x292a <String::String(String const&)>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:286
  }
     644:	c4 01       	movw	r24, r8
     646:	26 96       	adiw	r28, 0x06	; 6
     648:	0f b6       	in	r0, 0x3f	; 63
     64a:	f8 94       	cli
     64c:	de bf       	out	0x3e, r29	; 62
     64e:	0f be       	out	0x3f, r0	; 63
     650:	cd bf       	out	0x3d, r28	; 61
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	1f 91       	pop	r17
     658:	0f 91       	pop	r16
     65a:	ff 90       	pop	r15
     65c:	ef 90       	pop	r14
     65e:	df 90       	pop	r13
     660:	cf 90       	pop	r12
     662:	bf 90       	pop	r11
     664:	af 90       	pop	r10
     666:	9f 90       	pop	r9
     668:	8f 90       	pop	r8
     66a:	7f 90       	pop	r7
     66c:	08 95       	ret

0000066e <setup>:
setup():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:378
  }
} atc;

void setup()
{
  atc.init();
     66e:	8c eb       	ldi	r24, 0xBC	; 188
     670:	91 e0       	ldi	r25, 0x01	; 1
     672:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <ATC::init()>

00000676 <_GLOBAL__sub_I_servo>:
_GLOBAL__sub_I_servo():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:28

#define servomotor 9

#define cs 0.0332 // cm/uS

Servo servo;
     676:	82 e8       	ldi	r24, 0x82	; 130
     678:	92 e0       	ldi	r25, 0x02	; 2
     67a:	0e 94 ee 06 	call	0xddc	; 0xddc <Servo::Servo()>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:29
QMC5883LCompass compass;
     67e:	85 ee       	ldi	r24, 0xE5	; 229
     680:	91 e0       	ldi	r25, 0x01	; 1
     682:	0e 94 2f 0c 	call	0x185e	; 0x185e <QMC5883LCompass::QMC5883LCompass()>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:31

String Buffer = "", data = "", mem = "";
     686:	6b eb       	ldi	r22, 0xBB	; 187
     688:	71 e0       	ldi	r23, 0x01	; 1
     68a:	8f ed       	ldi	r24, 0xDF	; 223
     68c:	91 e0       	ldi	r25, 0x01	; 1
     68e:	0e 94 22 14 	call	0x2844	; 0x2844 <String::String(char const*)>
     692:	6b eb       	ldi	r22, 0xBB	; 187
     694:	71 e0       	ldi	r23, 0x01	; 1
     696:	89 ed       	ldi	r24, 0xD9	; 217
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	0e 94 22 14 	call	0x2844	; 0x2844 <String::String(char const*)>
     69e:	6b eb       	ldi	r22, 0xBB	; 187
     6a0:	71 e0       	ldi	r23, 0x01	; 1
     6a2:	83 ed       	ldi	r24, 0xD3	; 211
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	0e 94 22 14 	call	0x2844	; 0x2844 <String::String(char const*)>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:32
String ltd = "", lgd = "";
     6aa:	6b eb       	ldi	r22, 0xBB	; 187
     6ac:	71 e0       	ldi	r23, 0x01	; 1
     6ae:	8d ec       	ldi	r24, 0xCD	; 205
     6b0:	91 e0       	ldi	r25, 0x01	; 1
     6b2:	0e 94 22 14 	call	0x2844	; 0x2844 <String::String(char const*)>
     6b6:	6b eb       	ldi	r22, 0xBB	; 187
     6b8:	71 e0       	ldi	r23, 0x01	; 1
     6ba:	87 ec       	ldi	r24, 0xC7	; 199
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	0c 94 22 14 	jmp	0x2844	; 0x2844 <String::String(char const*)>

000006c2 <_GLOBAL__sub_D_servo>:
_GLOBAL__sub_D_servo():
     6c2:	87 ec       	ldi	r24, 0xC7	; 199
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	0e 94 b3 13 	call	0x2766	; 0x2766 <String::~String()>
     6ca:	8d ec       	ldi	r24, 0xCD	; 205
     6cc:	91 e0       	ldi	r25, 0x01	; 1
     6ce:	0e 94 b3 13 	call	0x2766	; 0x2766 <String::~String()>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:31
#define cs 0.0332 // cm/uS

Servo servo;
QMC5883LCompass compass;

String Buffer = "", data = "", mem = "";
     6d2:	83 ed       	ldi	r24, 0xD3	; 211
     6d4:	91 e0       	ldi	r25, 0x01	; 1
     6d6:	0e 94 b3 13 	call	0x2766	; 0x2766 <String::~String()>
     6da:	89 ed       	ldi	r24, 0xD9	; 217
     6dc:	91 e0       	ldi	r25, 0x01	; 1
     6de:	0e 94 b3 13 	call	0x2766	; 0x2766 <String::~String()>
     6e2:	8f ed       	ldi	r24, 0xDF	; 223
     6e4:	91 e0       	ldi	r25, 0x01	; 1
     6e6:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <String::~String()>

000006ea <ATC::readGPS()>:
_ZN3ATC7readGPSEv():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:113
    t /= 2;
    d = cs * t;
    return d;
  }

  void readGPS()
     6ea:	ef 92       	push	r14
     6ec:	ff 92       	push	r15
     6ee:	0f 93       	push	r16
     6f0:	1f 93       	push	r17
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
     6f6:	cd b7       	in	r28, 0x3d	; 61
     6f8:	de b7       	in	r29, 0x3e	; 62
     6fa:	2c 97       	sbiw	r28, 0x0c	; 12
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	f8 94       	cli
     700:	de bf       	out	0x3e, r29	; 62
     702:	0f be       	out	0x3f, r0	; 63
     704:	cd bf       	out	0x3d, r28	; 61
     706:	7c 01       	movw	r14, r24
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:115
  {
    data = "";
     708:	6b eb       	ldi	r22, 0xBB	; 187
     70a:	71 e0       	ldi	r23, 0x01	; 1
     70c:	89 ed       	ldi	r24, 0xD9	; 217
     70e:	91 e0       	ldi	r25, 0x01	; 1
     710:	0e 94 aa 14 	call	0x2954	; 0x2954 <String::operator=(char const*)>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:116
    Wire.requestFrom(35, 25);
     714:	49 e1       	ldi	r20, 0x19	; 25
     716:	50 e0       	ldi	r21, 0x00	; 0
     718:	63 e2       	ldi	r22, 0x23	; 35
     71a:	70 e0       	ldi	r23, 0x00	; 0
     71c:	8b ea       	ldi	r24, 0xAB	; 171
     71e:	92 e0       	ldi	r25, 0x02	; 2
     720:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <TwoWire::requestFrom(int, int)>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:117
    while (Wire.available())
     724:	8b ea       	ldi	r24, 0xAB	; 171
     726:	92 e0       	ldi	r25, 0x02	; 2
     728:	0e 94 a9 08 	call	0x1152	; 0x1152 <TwoWire::available()>
     72c:	89 2b       	or	r24, r25
     72e:	51 f0       	breq	.+20     	; 0x744 <ATC::readGPS()+0x5a>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:119
    {
      char d = Wire.read();
     730:	8b ea       	ldi	r24, 0xAB	; 171
     732:	92 e0       	ldi	r25, 0x02	; 2
     734:	0e 94 b0 08 	call	0x1160	; 0x1160 <TwoWire::read()>
_ZN6StringpLEc():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.h:115

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
  String & operator += (const char *cstr)   {concat(cstr); return (*this);}
  String & operator += (char c)     {concat(c); return (*this);}
     738:	68 2f       	mov	r22, r24
     73a:	89 ed       	ldi	r24, 0xD9	; 217
     73c:	91 e0       	ldi	r25, 0x01	; 1
     73e:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <String::concat(char)>
     742:	f0 cf       	rjmp	.-32     	; 0x724 <ATC::readGPS()+0x3a>
_ZN3ATC7readGPSEv():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:122
      data += d;
    }
    if (data.length() > 1)
     744:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <data+0x4>
     748:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <data+0x5>
     74c:	02 97       	sbiw	r24, 0x02	; 2
     74e:	08 f4       	brcc	.+2      	; 0x752 <ATC::readGPS()+0x68>
     750:	8b c0       	rjmp	.+278    	; 0x868 <ATC::readGPS()+0x17e>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:124
    {
      data = data.substring(0, data.indexOf(';'));
     752:	6b e3       	ldi	r22, 0x3B	; 59
     754:	89 ed       	ldi	r24, 0xD9	; 217
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <String::indexOf(char) const>
     75c:	9c 01       	movw	r18, r24
     75e:	50 e0       	ldi	r21, 0x00	; 0
     760:	40 e0       	ldi	r20, 0x00	; 0
     762:	69 ed       	ldi	r22, 0xD9	; 217
     764:	71 e0       	ldi	r23, 0x01	; 1
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	0e 94 12 16 	call	0x2c24	; 0x2c24 <String::substring(unsigned int, unsigned int) const>
     76e:	be 01       	movw	r22, r28
     770:	6f 5f       	subi	r22, 0xFF	; 255
     772:	7f 4f       	sbci	r23, 0xFF	; 255
     774:	89 ed       	ldi	r24, 0xD9	; 217
     776:	91 e0       	ldi	r25, 0x01	; 1
     778:	0e 94 9e 14 	call	0x293c	; 0x293c <String::operator=(String&&)>
     77c:	ce 01       	movw	r24, r28
     77e:	01 96       	adiw	r24, 0x01	; 1
     780:	0e 94 b3 13 	call	0x2766	; 0x2766 <String::~String()>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:125
      if (isListData(&data))
     784:	0e 94 a4 01 	call	0x348	; 0x348 <ATC::isListData(String*) [clone .isra.9] [clone .constprop.13]>
     788:	88 23       	and	r24, r24
     78a:	09 f4       	brne	.+2      	; 0x78e <ATC::readGPS()+0xa4>
     78c:	6d c0       	rjmp	.+218    	; 0x868 <ATC::readGPS()+0x17e>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:127
      {
        data = data.substring(data.indexOf('[') + 1, data.indexOf(']'));
     78e:	6d e5       	ldi	r22, 0x5D	; 93
     790:	89 ed       	ldi	r24, 0xD9	; 217
     792:	91 e0       	ldi	r25, 0x01	; 1
     794:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <String::indexOf(char) const>
     798:	8c 01       	movw	r16, r24
     79a:	6b e5       	ldi	r22, 0x5B	; 91
     79c:	89 ed       	ldi	r24, 0xD9	; 217
     79e:	91 e0       	ldi	r25, 0x01	; 1
     7a0:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <String::indexOf(char) const>
     7a4:	ac 01       	movw	r20, r24
     7a6:	4f 5f       	subi	r20, 0xFF	; 255
     7a8:	5f 4f       	sbci	r21, 0xFF	; 255
     7aa:	98 01       	movw	r18, r16
     7ac:	69 ed       	ldi	r22, 0xD9	; 217
     7ae:	71 e0       	ldi	r23, 0x01	; 1
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	0e 94 12 16 	call	0x2c24	; 0x2c24 <String::substring(unsigned int, unsigned int) const>
     7b8:	be 01       	movw	r22, r28
     7ba:	6f 5f       	subi	r22, 0xFF	; 255
     7bc:	7f 4f       	sbci	r23, 0xFF	; 255
     7be:	89 ed       	ldi	r24, 0xD9	; 217
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	0e 94 9e 14 	call	0x293c	; 0x293c <String::operator=(String&&)>
     7c6:	ce 01       	movw	r24, r28
     7c8:	01 96       	adiw	r24, 0x01	; 1
     7ca:	0e 94 b3 13 	call	0x2766	; 0x2766 <String::~String()>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:128
        ltd = readStrList(&mem, data, 1);
     7ce:	69 ed       	ldi	r22, 0xD9	; 217
     7d0:	71 e0       	ldi	r23, 0x01	; 1
     7d2:	ce 01       	movw	r24, r28
     7d4:	07 96       	adiw	r24, 0x07	; 7
     7d6:	0e 94 95 14 	call	0x292a	; 0x292a <String::String(String const&)>
     7da:	01 e0       	ldi	r16, 0x01	; 1
     7dc:	9e 01       	movw	r18, r28
     7de:	29 5f       	subi	r18, 0xF9	; 249
     7e0:	3f 4f       	sbci	r19, 0xFF	; 255
     7e2:	43 ed       	ldi	r20, 0xD3	; 211
     7e4:	51 e0       	ldi	r21, 0x01	; 1
     7e6:	b7 01       	movw	r22, r14
     7e8:	ce 01       	movw	r24, r28
     7ea:	01 96       	adiw	r24, 0x01	; 1
     7ec:	0e 94 b4 02 	call	0x568	; 0x568 <ATC::readStrList(String*, String, unsigned char)>
     7f0:	be 01       	movw	r22, r28
     7f2:	6f 5f       	subi	r22, 0xFF	; 255
     7f4:	7f 4f       	sbci	r23, 0xFF	; 255
     7f6:	8d ec       	ldi	r24, 0xCD	; 205
     7f8:	91 e0       	ldi	r25, 0x01	; 1
     7fa:	0e 94 9e 14 	call	0x293c	; 0x293c <String::operator=(String&&)>
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 b3 13 	call	0x2766	; 0x2766 <String::~String()>
     806:	ce 01       	movw	r24, r28
     808:	07 96       	adiw	r24, 0x07	; 7
     80a:	0e 94 b3 13 	call	0x2766	; 0x2766 <String::~String()>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:129
        lgd = readStrList(&mem, data, 2);
     80e:	69 ed       	ldi	r22, 0xD9	; 217
     810:	71 e0       	ldi	r23, 0x01	; 1
     812:	ce 01       	movw	r24, r28
     814:	07 96       	adiw	r24, 0x07	; 7
     816:	0e 94 95 14 	call	0x292a	; 0x292a <String::String(String const&)>
     81a:	02 e0       	ldi	r16, 0x02	; 2
     81c:	9e 01       	movw	r18, r28
     81e:	29 5f       	subi	r18, 0xF9	; 249
     820:	3f 4f       	sbci	r19, 0xFF	; 255
     822:	43 ed       	ldi	r20, 0xD3	; 211
     824:	51 e0       	ldi	r21, 0x01	; 1
     826:	b7 01       	movw	r22, r14
     828:	ce 01       	movw	r24, r28
     82a:	01 96       	adiw	r24, 0x01	; 1
     82c:	0e 94 b4 02 	call	0x568	; 0x568 <ATC::readStrList(String*, String, unsigned char)>
     830:	be 01       	movw	r22, r28
     832:	6f 5f       	subi	r22, 0xFF	; 255
     834:	7f 4f       	sbci	r23, 0xFF	; 255
     836:	87 ec       	ldi	r24, 0xC7	; 199
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	0e 94 9e 14 	call	0x293c	; 0x293c <String::operator=(String&&)>
     83e:	ce 01       	movw	r24, r28
     840:	01 96       	adiw	r24, 0x01	; 1
     842:	0e 94 b3 13 	call	0x2766	; 0x2766 <String::~String()>
     846:	ce 01       	movw	r24, r28
     848:	07 96       	adiw	r24, 0x07	; 7
     84a:	0e 94 b3 13 	call	0x2766	; 0x2766 <String::~String()>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:130
        if (ltd.toFloat() == 0.0 || lgd.toFloat() == 0.0)
     84e:	8d ec       	ldi	r24, 0xCD	; 205
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <String::toFloat() const>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	a9 01       	movw	r20, r18
     85c:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <__cmpsf2>
     860:	81 11       	cpse	r24, r1
     862:	15 c0       	rjmp	.+42     	; 0x88e <ATC::readGPS()+0x1a4>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:132
        {
          gpsStat = 0;
     864:	f7 01       	movw	r30, r14
     866:	12 82       	std	Z+2, r1	; 0x02
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:139
        else {
          gpsStat = 1;
        }
      }
    }
    data = "";
     868:	6b eb       	ldi	r22, 0xBB	; 187
     86a:	71 e0       	ldi	r23, 0x01	; 1
     86c:	89 ed       	ldi	r24, 0xD9	; 217
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	0e 94 aa 14 	call	0x2954	; 0x2954 <String::operator=(char const*)>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:140
  }
     874:	2c 96       	adiw	r28, 0x0c	; 12
     876:	0f b6       	in	r0, 0x3f	; 63
     878:	f8 94       	cli
     87a:	de bf       	out	0x3e, r29	; 62
     87c:	0f be       	out	0x3f, r0	; 63
     87e:	cd bf       	out	0x3d, r28	; 61
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	08 95       	ret
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:130 (discriminator 2)
      if (isListData(&data))
      {
        data = data.substring(data.indexOf('[') + 1, data.indexOf(']'));
        ltd = readStrList(&mem, data, 1);
        lgd = readStrList(&mem, data, 2);
        if (ltd.toFloat() == 0.0 || lgd.toFloat() == 0.0)
     88e:	87 ec       	ldi	r24, 0xC7	; 199
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <String::toFloat() const>
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	a9 01       	movw	r20, r18
     89c:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <__cmpsf2>
     8a0:	88 23       	and	r24, r24
     8a2:	01 f3       	breq	.-64     	; 0x864 <ATC::readGPS()+0x17a>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:135
        {
          gpsStat = 0;
        }
        else {
          gpsStat = 1;
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	f7 01       	movw	r30, r14
     8a8:	82 83       	std	Z+2, r24	; 0x02
     8aa:	de cf       	rjmp	.-68     	; 0x868 <ATC::readGPS()+0x17e>

000008ac <ATC::run()>:
_ZN3ATC3runEv():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:293
  void wait(uint16_t period)
  {
    delay(period * 1000);
  }

  void run()
     8ac:	ef 92       	push	r14
     8ae:	ff 92       	push	r15
     8b0:	0f 93       	push	r16
     8b2:	1f 93       	push	r17
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	cd b7       	in	r28, 0x3d	; 61
     8ba:	de b7       	in	r29, 0x3e	; 62
     8bc:	62 97       	sbiw	r28, 0x12	; 18
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	f8 94       	cli
     8c2:	de bf       	out	0x3e, r29	; 62
     8c4:	0f be       	out	0x3f, r0	; 63
     8c6:	cd bf       	out	0x3d, r28	; 61
     8c8:	7c 01       	movw	r14, r24
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:295
  {
    if (Serial.available())
     8ca:	88 e7       	ldi	r24, 0x78	; 120
     8cc:	93 e0       	ldi	r25, 0x03	; 3
     8ce:	0e 94 57 11 	call	0x22ae	; 0x22ae <HardwareSerial::available()>
     8d2:	89 2b       	or	r24, r25
     8d4:	b9 f0       	breq	.+46     	; 0x904 <__stack+0x5>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:297
    {
      while (Serial.available() > 0)
     8d6:	88 e7       	ldi	r24, 0x78	; 120
     8d8:	93 e0       	ldi	r25, 0x03	; 3
     8da:	0e 94 57 11 	call	0x22ae	; 0x22ae <HardwareSerial::available()>
     8de:	18 16       	cp	r1, r24
     8e0:	19 06       	cpc	r1, r25
     8e2:	84 f4       	brge	.+32     	; 0x904 <__stack+0x5>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:299
      {
        delay(3);
     8e4:	63 e0       	ldi	r22, 0x03	; 3
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	0e 94 30 10 	call	0x2060	; 0x2060 <delay>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:300
        char c = Serial.read();
     8f0:	88 e7       	ldi	r24, 0x78	; 120
     8f2:	93 e0       	ldi	r25, 0x03	; 3
     8f4:	0e 94 71 11 	call	0x22e2	; 0x22e2 <HardwareSerial::read()>
_ZN6StringpLEc():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.h:115
     8f8:	68 2f       	mov	r22, r24
     8fa:	89 ed       	ldi	r24, 0xD9	; 217
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <String::concat(char)>
     902:	e9 cf       	rjmp	.-46     	; 0x8d6 <ATC::run()+0x2a>
_ZN3ATC3runEv():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:304
        data += c;
      }
    }
    if (data.length() > 0)
     904:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <data+0x4>
     908:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <data+0x5>
     90c:	89 2b       	or	r24, r25
     90e:	09 f4       	brne	.+2      	; 0x912 <__stack+0x13>
     910:	92 c0       	rjmp	.+292    	; 0xa36 <__stack+0x137>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:306
    {
      data.trim();
     912:	89 ed       	ldi	r24, 0xD9	; 217
     914:	91 e0       	ldi	r25, 0x01	; 1
     916:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <String::trim()>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:307
      if (isListData(&data))
     91a:	0e 94 a4 01 	call	0x348	; 0x348 <ATC::isListData(String*) [clone .isra.9] [clone .constprop.13]>
     91e:	88 23       	and	r24, r24
     920:	09 f4       	brne	.+2      	; 0x924 <__stack+0x25>
     922:	dd c0       	rjmp	.+442    	; 0xade <__stack+0x1df>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:309
      {
        data = data.substring(data.indexOf('[') + 1, data.indexOf(']'));
     924:	6d e5       	ldi	r22, 0x5D	; 93
     926:	89 ed       	ldi	r24, 0xD9	; 217
     928:	91 e0       	ldi	r25, 0x01	; 1
     92a:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <String::indexOf(char) const>
     92e:	8c 01       	movw	r16, r24
     930:	6b e5       	ldi	r22, 0x5B	; 91
     932:	89 ed       	ldi	r24, 0xD9	; 217
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <String::indexOf(char) const>
     93a:	ac 01       	movw	r20, r24
     93c:	4f 5f       	subi	r20, 0xFF	; 255
     93e:	5f 4f       	sbci	r21, 0xFF	; 255
     940:	98 01       	movw	r18, r16
     942:	69 ed       	ldi	r22, 0xD9	; 217
     944:	71 e0       	ldi	r23, 0x01	; 1
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 12 16 	call	0x2c24	; 0x2c24 <String::substring(unsigned int, unsigned int) const>
     94e:	be 01       	movw	r22, r28
     950:	6f 5f       	subi	r22, 0xFF	; 255
     952:	7f 4f       	sbci	r23, 0xFF	; 255
     954:	89 ed       	ldi	r24, 0xD9	; 217
     956:	91 e0       	ldi	r25, 0x01	; 1
     958:	0e 94 9e 14 	call	0x293c	; 0x293c <String::operator=(String&&)>
     95c:	ce 01       	movw	r24, r28
     95e:	01 96       	adiw	r24, 0x01	; 1
     960:	0e 94 b3 13 	call	0x2766	; 0x2766 <String::~String()>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:310
        String command = readStrList(&mem, data, 1);
     964:	69 ed       	ldi	r22, 0xD9	; 217
     966:	71 e0       	ldi	r23, 0x01	; 1
     968:	ce 01       	movw	r24, r28
     96a:	01 96       	adiw	r24, 0x01	; 1
     96c:	0e 94 95 14 	call	0x292a	; 0x292a <String::String(String const&)>
     970:	01 e0       	ldi	r16, 0x01	; 1
     972:	9e 01       	movw	r18, r28
     974:	2f 5f       	subi	r18, 0xFF	; 255
     976:	3f 4f       	sbci	r19, 0xFF	; 255
     978:	43 ed       	ldi	r20, 0xD3	; 211
     97a:	51 e0       	ldi	r21, 0x01	; 1
     97c:	b7 01       	movw	r22, r14
     97e:	ce 01       	movw	r24, r28
     980:	0d 96       	adiw	r24, 0x0d	; 13
     982:	0e 94 b4 02 	call	0x568	; 0x568 <ATC::readStrList(String*, String, unsigned char)>
     986:	ce 01       	movw	r24, r28
     988:	01 96       	adiw	r24, 0x01	; 1
     98a:	0e 94 b3 13 	call	0x2766	; 0x2766 <String::~String()>
_ZNK6StringeqEPKc():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.h:143
  operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
  int compareTo(const String &s) const;
  unsigned char equals(const String &s) const;
  unsigned char equals(const char *cstr) const;
  unsigned char operator == (const String &rhs) const {return equals(rhs);}
  unsigned char operator == (const char *cstr) const {return equals(cstr);}
     98e:	63 e7       	ldi	r22, 0x73	; 115
     990:	71 e0       	ldi	r23, 0x01	; 1
     992:	ce 01       	movw	r24, r28
     994:	0d 96       	adiw	r24, 0x0d	; 13
     996:	0e 94 6f 15 	call	0x2ade	; 0x2ade <String::equals(char const*) const>
_ZN3ATC3runEv():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:311
        if (command == "cw")
     99a:	88 23       	and	r24, r24
     99c:	e9 f0       	breq	.+58     	; 0x9d8 <__stack+0xd9>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:313
        {
          int val = readStrList(&mem, data, 2).toInt();
     99e:	69 ed       	ldi	r22, 0xD9	; 217
     9a0:	71 e0       	ldi	r23, 0x01	; 1
     9a2:	ce 01       	movw	r24, r28
     9a4:	07 96       	adiw	r24, 0x07	; 7
     9a6:	0e 94 95 14 	call	0x292a	; 0x292a <String::String(String const&)>
     9aa:	02 e0       	ldi	r16, 0x02	; 2
     9ac:	9e 01       	movw	r18, r28
     9ae:	29 5f       	subi	r18, 0xF9	; 249
     9b0:	3f 4f       	sbci	r19, 0xFF	; 255
     9b2:	43 ed       	ldi	r20, 0xD3	; 211
     9b4:	51 e0       	ldi	r21, 0x01	; 1
     9b6:	b7 01       	movw	r22, r14
     9b8:	ce 01       	movw	r24, r28
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	0e 94 b4 02 	call	0x568	; 0x568 <ATC::readStrList(String*, String, unsigned char)>
     9c0:	ce 01       	movw	r24, r28
     9c2:	01 96       	adiw	r24, 0x01	; 1
     9c4:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <String::toInt() const>
     9c8:	ce 01       	movw	r24, r28
     9ca:	01 96       	adiw	r24, 0x01	; 1
     9cc:	0e 94 b3 13 	call	0x2766	; 0x2766 <String::~String()>
     9d0:	ce 01       	movw	r24, r28
     9d2:	07 96       	adiw	r24, 0x07	; 7
     9d4:	0e 94 b3 13 	call	0x2766	; 0x2766 <String::~String()>
_ZNK6StringeqEPKc():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.h:143
     9d8:	62 e7       	ldi	r22, 0x72	; 114
     9da:	71 e0       	ldi	r23, 0x01	; 1
     9dc:	ce 01       	movw	r24, r28
     9de:	0d 96       	adiw	r24, 0x0d	; 13
     9e0:	0e 94 6f 15 	call	0x2ade	; 0x2ade <String::equals(char const*) const>
_ZN3ATC3runEv():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:316
//          turnCW(val);
        }
        if (command == "ccw")
     9e4:	88 23       	and	r24, r24
     9e6:	e9 f0       	breq	.+58     	; 0xa22 <__stack+0x123>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:318
        {
          int val = readStrList(&mem, data, 2).toInt();
     9e8:	69 ed       	ldi	r22, 0xD9	; 217
     9ea:	71 e0       	ldi	r23, 0x01	; 1
     9ec:	ce 01       	movw	r24, r28
     9ee:	07 96       	adiw	r24, 0x07	; 7
     9f0:	0e 94 95 14 	call	0x292a	; 0x292a <String::String(String const&)>
     9f4:	02 e0       	ldi	r16, 0x02	; 2
     9f6:	9e 01       	movw	r18, r28
     9f8:	29 5f       	subi	r18, 0xF9	; 249
     9fa:	3f 4f       	sbci	r19, 0xFF	; 255
     9fc:	43 ed       	ldi	r20, 0xD3	; 211
     9fe:	51 e0       	ldi	r21, 0x01	; 1
     a00:	b7 01       	movw	r22, r14
     a02:	ce 01       	movw	r24, r28
     a04:	01 96       	adiw	r24, 0x01	; 1
     a06:	0e 94 b4 02 	call	0x568	; 0x568 <ATC::readStrList(String*, String, unsigned char)>
     a0a:	ce 01       	movw	r24, r28
     a0c:	01 96       	adiw	r24, 0x01	; 1
     a0e:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <String::toInt() const>
     a12:	ce 01       	movw	r24, r28
     a14:	01 96       	adiw	r24, 0x01	; 1
     a16:	0e 94 b3 13 	call	0x2766	; 0x2766 <String::~String()>
     a1a:	ce 01       	movw	r24, r28
     a1c:	07 96       	adiw	r24, 0x07	; 7
     a1e:	0e 94 b3 13 	call	0x2766	; 0x2766 <String::~String()>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:310
    {
      data.trim();
      if (isListData(&data))
      {
        data = data.substring(data.indexOf('[') + 1, data.indexOf(']'));
        String command = readStrList(&mem, data, 1);
     a22:	ce 01       	movw	r24, r28
     a24:	0d 96       	adiw	r24, 0x0d	; 13
     a26:	0e 94 b3 13 	call	0x2766	; 0x2766 <String::~String()>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:347
      else if (data == "+read;")
      {
        load_buffer();
        Serial.println(Buffer);
      }
      data = "";
     a2a:	6b eb       	ldi	r22, 0xBB	; 187
     a2c:	71 e0       	ldi	r23, 0x01	; 1
     a2e:	89 ed       	ldi	r24, 0xD9	; 217
     a30:	91 e0       	ldi	r25, 0x01	; 1
     a32:	0e 94 aa 14 	call	0x2954	; 0x2954 <String::operator=(char const*)>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:349
    }
    if (!Locked && checkPresence())
     a36:	f7 01       	movw	r30, r14
     a38:	81 81       	ldd	r24, Z+1	; 0x01
     a3a:	81 11       	cpse	r24, r1
     a3c:	f3 c0       	rjmp	.+486    	; 0xc24 <__stack+0x325>
_ZN3ATC15measureDistanceEhh():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:103

  float measureDistance(byte trig, byte echo)
  {
    unsigned long t;
    float d;
    digitalWrite(trig, 0);
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	8e e0       	ldi	r24, 0x0E	; 14
     a42:	0e 94 01 11 	call	0x2202	; 0x2202 <digitalWrite>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:104
    digitalWrite(trig, 1);
     a46:	61 e0       	ldi	r22, 0x01	; 1
     a48:	8e e0       	ldi	r24, 0x0E	; 14
     a4a:	0e 94 01 11 	call	0x2202	; 0x2202 <digitalWrite>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:105
    delayMicroseconds(10);
     a4e:	8a e0       	ldi	r24, 0x0A	; 10
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	0e 94 69 10 	call	0x20d2	; 0x20d2 <delayMicroseconds>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:106
    digitalWrite(trig, 0);
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	8e e0       	ldi	r24, 0x0E	; 14
     a5a:	0e 94 01 11 	call	0x2202	; 0x2202 <digitalWrite>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:107
    t = pulseIn(echo, 1);
     a5e:	20 e4       	ldi	r18, 0x40	; 64
     a60:	32 e4       	ldi	r19, 0x42	; 66
     a62:	4f e0       	ldi	r20, 0x0F	; 15
     a64:	50 e0       	ldi	r21, 0x00	; 0
     a66:	61 e0       	ldi	r22, 0x01	; 1
     a68:	8f e0       	ldi	r24, 0x0F	; 15
     a6a:	0e 94 2f 11 	call	0x225e	; 0x225e <pulseIn>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:108
    t /= 2;
     a6e:	96 95       	lsr	r25
     a70:	87 95       	ror	r24
     a72:	77 95       	ror	r23
     a74:	67 95       	ror	r22
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:109
    d = cs * t;
     a76:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__floatunsisf>
     a7a:	29 eb       	ldi	r18, 0xB9	; 185
     a7c:	3c ef       	ldi	r19, 0xFC	; 252
     a7e:	47 e0       	ldi	r20, 0x07	; 7
     a80:	5d e3       	ldi	r21, 0x3D	; 61
     a82:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
_ZN3ATC13checkPresenceEv():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:89
  }

  bool checkPresence(void)
  {
    float distance = measureDistance(trig1, echo1);
    dist = distance;
     a86:	60 93 c3 01 	sts	0x01C3, r22	; 0x8001c3 <dist>
     a8a:	70 93 c4 01 	sts	0x01C4, r23	; 0x8001c4 <dist+0x1>
     a8e:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <dist+0x2>
     a92:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <dist+0x3>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:90
    if (distance <= frontThresh)
     a96:	20 e0       	ldi	r18, 0x00	; 0
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	40 e7       	ldi	r20, 0x70	; 112
     a9c:	52 e4       	ldi	r21, 0x42	; 66
     a9e:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <__cmpsf2>
     aa2:	18 16       	cp	r1, r24
     aa4:	0c f4       	brge	.+2      	; 0xaa8 <__stack+0x1a9>
     aa6:	be c0       	rjmp	.+380    	; 0xc24 <__stack+0x325>
_ZN3ATC7openBinEv():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:151
    return azimuthal;
  }

  void openBin()
  {
    if (binState == closed)
     aa8:	f7 01       	movw	r30, r14
     aaa:	80 81       	ld	r24, Z
     aac:	81 11       	cpse	r24, r1
     aae:	99 c0       	rjmp	.+306    	; 0xbe2 <__stack+0x2e3>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:153
    {
      for (int i = servo.read(); i <= openPos; i++)
     ab0:	82 e8       	ldi	r24, 0x82	; 130
     ab2:	92 e0       	ldi	r25, 0x02	; 2
     ab4:	0e 94 41 08 	call	0x1082	; 0x1082 <Servo::read()>
     ab8:	8c 01       	movw	r16, r24
     aba:	0b 35       	cpi	r16, 0x5B	; 91
     abc:	11 05       	cpc	r17, r1
     abe:	0c f0       	brlt	.+2      	; 0xac2 <__stack+0x1c3>
     ac0:	8d c0       	rjmp	.+282    	; 0xbdc <__stack+0x2dd>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:155
      {
        servo.write(i);
     ac2:	b8 01       	movw	r22, r16
     ac4:	82 e8       	ldi	r24, 0x82	; 130
     ac6:	92 e0       	ldi	r25, 0x02	; 2
     ac8:	0e 94 c5 07 	call	0xf8a	; 0xf8a <Servo::write(int)>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:156
        delay(15);
     acc:	6f e0       	ldi	r22, 0x0F	; 15
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	0e 94 30 10 	call	0x2060	; 0x2060 <delay>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:153

  void openBin()
  {
    if (binState == closed)
    {
      for (int i = servo.read(); i <= openPos; i++)
     ad8:	0f 5f       	subi	r16, 0xFF	; 255
     ada:	1f 4f       	sbci	r17, 0xFF	; 255
     adc:	ee cf       	rjmp	.-36     	; 0xaba <__stack+0x1bb>
_ZNK6StringeqEPKc():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.h:143
     ade:	66 e7       	ldi	r22, 0x76	; 118
     ae0:	71 e0       	ldi	r23, 0x01	; 1
     ae2:	89 ed       	ldi	r24, 0xD9	; 217
     ae4:	91 e0       	ldi	r25, 0x01	; 1
     ae6:	0e 94 6f 15 	call	0x2ade	; 0x2ade <String::equals(char const*) const>
_ZN3ATC3runEv():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:322
        {
          int val = readStrList(&mem, data, 2).toInt();
//          turnCCW(val);
        }
      }
      else if (data == "+fwd")
     aea:	88 23       	and	r24, r24
     aec:	91 f0       	breq	.+36     	; 0xb12 <__stack+0x213>
_ZN3ATC7forwardEv():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:177
    }
  }

  void forward()
  {
    stop();
     aee:	c7 01       	movw	r24, r14
     af0:	03 96       	adiw	r24, 0x03	; 3
     af2:	0e 94 8a 01 	call	0x314	; 0x314 <ATC::stop() [clone .isra.8]>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:178
    digitalWrite(m0f, 1);
     af6:	61 e0       	ldi	r22, 0x01	; 1
     af8:	8b e0       	ldi	r24, 0x0B	; 11
     afa:	0e 94 01 11 	call	0x2202	; 0x2202 <digitalWrite>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:179
    digitalWrite(m1f, 1);
     afe:	61 e0       	ldi	r22, 0x01	; 1
     b00:	8c e0       	ldi	r24, 0x0C	; 12
     b02:	0e 94 01 11 	call	0x2202	; 0x2202 <digitalWrite>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:180
    Status = Forward;
     b06:	82 e0       	ldi	r24, 0x02	; 2
     b08:	90 e0       	ldi	r25, 0x00	; 0
_ZN3ATC8backwardEv():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:188
  void backward()
  {
    stop();
    digitalWrite(m0r, 1);
    digitalWrite(m1r, 1);
    Status = Backward;
     b0a:	f7 01       	movw	r30, r14
     b0c:	94 83       	std	Z+4, r25	; 0x04
     b0e:	83 83       	std	Z+3, r24	; 0x03
     b10:	8c cf       	rjmp	.-232    	; 0xa2a <__stack+0x12b>
_ZNK6StringeqEPKc():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.h:143
     b12:	6b e7       	ldi	r22, 0x7B	; 123
     b14:	71 e0       	ldi	r23, 0x01	; 1
     b16:	89 ed       	ldi	r24, 0xD9	; 217
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	0e 94 6f 15 	call	0x2ade	; 0x2ade <String::equals(char const*) const>
_ZN3ATC3runEv():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:326
      }
      else if (data == "+fwd")
      {
        forward();
      }
      else if (data == "+bwd")
     b1e:	88 23       	and	r24, r24
     b20:	79 f0       	breq	.+30     	; 0xb40 <__stack+0x241>
_ZN3ATC8backwardEv():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:185
    Status = Forward;
  }

  void backward()
  {
    stop();
     b22:	c7 01       	movw	r24, r14
     b24:	03 96       	adiw	r24, 0x03	; 3
     b26:	0e 94 8a 01 	call	0x314	; 0x314 <ATC::stop() [clone .isra.8]>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:186
    digitalWrite(m0r, 1);
     b2a:	61 e0       	ldi	r22, 0x01	; 1
     b2c:	8a e0       	ldi	r24, 0x0A	; 10
     b2e:	0e 94 01 11 	call	0x2202	; 0x2202 <digitalWrite>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:187
    digitalWrite(m1r, 1);
     b32:	61 e0       	ldi	r22, 0x01	; 1
     b34:	8d e0       	ldi	r24, 0x0D	; 13
     b36:	0e 94 01 11 	call	0x2202	; 0x2202 <digitalWrite>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:188
    Status = Backward;
     b3a:	83 e0       	ldi	r24, 0x03	; 3
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	e5 cf       	rjmp	.-54     	; 0xb0a <__stack+0x20b>
_ZNK6StringeqEPKc():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.h:143
     b40:	60 e8       	ldi	r22, 0x80	; 128
     b42:	71 e0       	ldi	r23, 0x01	; 1
     b44:	89 ed       	ldi	r24, 0xD9	; 217
     b46:	91 e0       	ldi	r25, 0x01	; 1
     b48:	0e 94 6f 15 	call	0x2ade	; 0x2ade <String::equals(char const*) const>
_ZN3ATC3runEv():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:330
      }
      else if (data == "+bwd")
      {
        backward();
      }
      else if (data == "+tr")
     b4c:	88 23       	and	r24, r24
     b4e:	79 f0       	breq	.+30     	; 0xb6e <__stack+0x26f>
_ZN3ATC9turnRightEv():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:193
    Status = Backward;
  }

  void turnRight()
  {
    stop();
     b50:	c7 01       	movw	r24, r14
     b52:	03 96       	adiw	r24, 0x03	; 3
     b54:	0e 94 8a 01 	call	0x314	; 0x314 <ATC::stop() [clone .isra.8]>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:194
    digitalWrite(m0f, 1);
     b58:	61 e0       	ldi	r22, 0x01	; 1
     b5a:	8b e0       	ldi	r24, 0x0B	; 11
     b5c:	0e 94 01 11 	call	0x2202	; 0x2202 <digitalWrite>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:195
    digitalWrite(m1r, 1);
     b60:	61 e0       	ldi	r22, 0x01	; 1
     b62:	8d e0       	ldi	r24, 0x0D	; 13
     b64:	0e 94 01 11 	call	0x2202	; 0x2202 <digitalWrite>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:196
    Status = turnright;
     b68:	85 e0       	ldi	r24, 0x05	; 5
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	ce cf       	rjmp	.-100    	; 0xb0a <__stack+0x20b>
_ZNK6StringeqEPKc():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.h:143
     b6e:	64 e8       	ldi	r22, 0x84	; 132
     b70:	71 e0       	ldi	r23, 0x01	; 1
     b72:	89 ed       	ldi	r24, 0xD9	; 217
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	0e 94 6f 15 	call	0x2ade	; 0x2ade <String::equals(char const*) const>
_ZN3ATC3runEv():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:334
      }
      else if (data == "+tr")
      {
        turnRight();
      }
      else if (data == "+tl")
     b7a:	88 23       	and	r24, r24
     b7c:	79 f0       	breq	.+30     	; 0xb9c <__stack+0x29d>
_ZN3ATC8turnLeftEv():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:201
    Status = turnright;
  }

  void turnLeft()
  {
    stop();
     b7e:	c7 01       	movw	r24, r14
     b80:	03 96       	adiw	r24, 0x03	; 3
     b82:	0e 94 8a 01 	call	0x314	; 0x314 <ATC::stop() [clone .isra.8]>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:202
    digitalWrite(m1f, 1);
     b86:	61 e0       	ldi	r22, 0x01	; 1
     b88:	8c e0       	ldi	r24, 0x0C	; 12
     b8a:	0e 94 01 11 	call	0x2202	; 0x2202 <digitalWrite>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:203
    digitalWrite(m0r, 1);
     b8e:	61 e0       	ldi	r22, 0x01	; 1
     b90:	8a e0       	ldi	r24, 0x0A	; 10
     b92:	0e 94 01 11 	call	0x2202	; 0x2202 <digitalWrite>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:204
    Status = turnleft;
     b96:	84 e0       	ldi	r24, 0x04	; 4
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	b7 cf       	rjmp	.-146    	; 0xb0a <__stack+0x20b>
_ZNK6StringeqEPKc():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.h:143
     b9c:	68 e8       	ldi	r22, 0x88	; 136
     b9e:	71 e0       	ldi	r23, 0x01	; 1
     ba0:	89 ed       	ldi	r24, 0xD9	; 217
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	0e 94 6f 15 	call	0x2ade	; 0x2ade <String::equals(char const*) const>
_ZN3ATC3runEv():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:338
      }
      else if (data == "+tl")
      {
        turnLeft();
      }
      else if (data == "+stop")
     ba8:	88 23       	and	r24, r24
     baa:	29 f0       	breq	.+10     	; 0xbb6 <__stack+0x2b7>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:340
      {
        stop();
     bac:	c7 01       	movw	r24, r14
     bae:	03 96       	adiw	r24, 0x03	; 3
     bb0:	0e 94 8a 01 	call	0x314	; 0x314 <ATC::stop() [clone .isra.8]>
     bb4:	3a cf       	rjmp	.-396    	; 0xa2a <__stack+0x12b>
_ZNK6StringeqEPKc():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.h:143
     bb6:	6e e8       	ldi	r22, 0x8E	; 142
     bb8:	71 e0       	ldi	r23, 0x01	; 1
     bba:	89 ed       	ldi	r24, 0xD9	; 217
     bbc:	91 e0       	ldi	r25, 0x01	; 1
     bbe:	0e 94 6f 15 	call	0x2ade	; 0x2ade <String::equals(char const*) const>
_ZN3ATC3runEv():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:342
      }
      else if (data == "+read;")
     bc2:	88 23       	and	r24, r24
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <__stack+0x2c9>
     bc6:	31 cf       	rjmp	.-414    	; 0xa2a <__stack+0x12b>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:344
      {
        load_buffer();
     bc8:	c7 01       	movw	r24, r14
     bca:	0e 94 55 02 	call	0x4aa	; 0x4aa <ATC::load_buffer()>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:345
        Serial.println(Buffer);
     bce:	6f ed       	ldi	r22, 0xDF	; 223
     bd0:	71 e0       	ldi	r23, 0x01	; 1
     bd2:	88 e7       	ldi	r24, 0x78	; 120
     bd4:	93 e0       	ldi	r25, 0x03	; 3
     bd6:	0e 94 5f 13 	call	0x26be	; 0x26be <Print::println(String const&)>
     bda:	27 cf       	rjmp	.-434    	; 0xa2a <__stack+0x12b>
_ZN3ATC7openBinEv():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:158
      for (int i = servo.read(); i <= openPos; i++)
      {
        servo.write(i);
        delay(15);
      }
      binState = opened;
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	f7 01       	movw	r30, r14
     be0:	80 83       	st	Z, r24
_ZN3ATC4waitEj():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:290
    return *memory;
  }

  void wait(uint16_t period)
  {
    delay(period * 1000);
     be2:	68 e8       	ldi	r22, 0x88	; 136
     be4:	73 e1       	ldi	r23, 0x13	; 19
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	0e 94 30 10 	call	0x2060	; 0x2060 <delay>
_ZN3ATC8closeBinEv():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:164
    }
  }

  void closeBin()
  {
    if (binState == opened)
     bee:	f7 01       	movw	r30, r14
     bf0:	80 81       	ld	r24, Z
     bf2:	88 23       	and	r24, r24
     bf4:	b9 f0       	breq	.+46     	; 0xc24 <__stack+0x325>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:166
    {
      for (int i = servo.read(); i >= closePos; i--)
     bf6:	82 e8       	ldi	r24, 0x82	; 130
     bf8:	92 e0       	ldi	r25, 0x02	; 2
     bfa:	0e 94 41 08 	call	0x1082	; 0x1082 <Servo::read()>
     bfe:	8c 01       	movw	r16, r24
     c00:	17 fd       	sbrc	r17, 7
     c02:	0e c0       	rjmp	.+28     	; 0xc20 <__stack+0x321>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:168
      {
        servo.write(i);
     c04:	b8 01       	movw	r22, r16
     c06:	82 e8       	ldi	r24, 0x82	; 130
     c08:	92 e0       	ldi	r25, 0x02	; 2
     c0a:	0e 94 c5 07 	call	0xf8a	; 0xf8a <Servo::write(int)>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:169
        delay(15);
     c0e:	6f e0       	ldi	r22, 0x0F	; 15
     c10:	70 e0       	ldi	r23, 0x00	; 0
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	0e 94 30 10 	call	0x2060	; 0x2060 <delay>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:166

  void closeBin()
  {
    if (binState == opened)
    {
      for (int i = servo.read(); i >= closePos; i--)
     c1a:	01 50       	subi	r16, 0x01	; 1
     c1c:	11 09       	sbc	r17, r1
     c1e:	f0 cf       	rjmp	.-32     	; 0xc00 <__stack+0x301>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:171
      {
        servo.write(i);
        delay(15);
      }
      binState = closed;
     c20:	f7 01       	movw	r30, r14
     c22:	10 82       	st	Z, r1
_ZN3ATC3runEv():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:359
      if (checkBin() == bin_full)
      {
        Locked = true;
      }
      else {
        Locked = false;
     c24:	f7 01       	movw	r30, r14
     c26:	11 82       	std	Z+1, r1	; 0x01
_ZN3ATC11readCompassEv():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:144
    data = "";
  }

  int readCompass()
  {
    compass.read();
     c28:	85 ee       	ldi	r24, 0xE5	; 229
     c2a:	91 e0       	ldi	r25, 0x01	; 1
     c2c:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <QMC5883LCompass::read()>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:145
    azimuthal = compass.getAzimuth();
     c30:	85 ee       	ldi	r24, 0xE5	; 229
     c32:	91 e0       	ldi	r25, 0x01	; 1
     c34:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <QMC5883LCompass::getAzimuth()>
     c38:	f7 01       	movw	r30, r14
     c3a:	96 83       	std	Z+6, r25	; 0x06
     c3c:	85 83       	std	Z+5, r24	; 0x05
_ZN3ATC3runEv():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:372
      else {
        Locked = false;
      }
    }
    readCompass();
    readGPS();
     c3e:	c7 01       	movw	r24, r14
     c40:	0e 94 75 03 	call	0x6ea	; 0x6ea <ATC::readGPS()>
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:373
  }
     c44:	62 96       	adiw	r28, 0x12	; 18
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	f8 94       	cli
     c4a:	de bf       	out	0x3e, r29	; 62
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	cd bf       	out	0x3d, r28	; 61
     c50:	df 91       	pop	r29
     c52:	cf 91       	pop	r28
     c54:	1f 91       	pop	r17
     c56:	0f 91       	pop	r16
     c58:	ff 90       	pop	r15
     c5a:	ef 90       	pop	r14
     c5c:	08 95       	ret

00000c5e <loop>:
loop():
/home/fluxion9/Arduino/Arduino-Sketches/Autonomous_Trash_Can/Autonomous_Trash_Can.ino:383
  atc.init();
}

void loop()
{
  atc.run();
     c5e:	8c eb       	ldi	r24, 0xBC	; 188
     c60:	91 e0       	ldi	r25, 0x01	; 1
     c62:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <ATC::run()>

00000c66 <__vector_11>:
__vector_11():
/home/fluxion9/arduino-1.8.19/libraries/Servo/src/avr/Servo.cpp:262
  servos[this->servoIndex].Pin.isActive = false;
  timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
  if(isTimerActive(timer) == false) {
    finISR(timer);
  }
}
     c66:	1f 92       	push	r1
     c68:	0f 92       	push	r0
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	0f 92       	push	r0
     c6e:	11 24       	eor	r1, r1
     c70:	2f 93       	push	r18
     c72:	3f 93       	push	r19
     c74:	4f 93       	push	r20
     c76:	5f 93       	push	r21
     c78:	6f 93       	push	r22
     c7a:	7f 93       	push	r23
     c7c:	8f 93       	push	r24
     c7e:	9f 93       	push	r25
     c80:	af 93       	push	r26
     c82:	bf 93       	push	r27
     c84:	ef 93       	push	r30
     c86:	ff 93       	push	r31
handle_interrupts():
     c88:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <Channel>
     c8c:	87 ff       	sbrs	r24, 7
     c8e:	27 c0       	rjmp	.+78     	; 0xcde <__vector_11+0x78>
     c90:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c94:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c98:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <Channel>
     c9c:	8f 5f       	subi	r24, 0xFF	; 255
     c9e:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <Channel>
     ca2:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <Channel>
     ca6:	08 2e       	mov	r0, r24
     ca8:	00 0c       	add	r0, r0
     caa:	99 0b       	sbc	r25, r25
     cac:	20 91 85 02 	lds	r18, 0x0285	; 0x800285 <ServoCount>
     cb0:	28 17       	cp	r18, r24
     cb2:	19 06       	cpc	r1, r25
     cb4:	29 f0       	breq	.+10     	; 0xcc0 <__vector_11+0x5a>
     cb6:	24 f0       	brlt	.+8      	; 0xcc0 <__vector_11+0x5a>
     cb8:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <Channel>
     cbc:	8c 30       	cpi	r24, 0x0C	; 12
     cbe:	dc f1       	brlt	.+118    	; 0xd36 <__vector_11+0xd0>
     cc0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     cc4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     cc8:	04 96       	adiw	r24, 0x04	; 4
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	9c 49       	sbci	r25, 0x9C	; 156
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__vector_11+0x6c>
     cd0:	7b c0       	rjmp	.+246    	; 0xdc8 <__vector_11+0x162>
     cd2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     cd6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     cda:	04 96       	adiw	r24, 0x04	; 4
     cdc:	77 c0       	rjmp	.+238    	; 0xdcc <__vector_11+0x166>
     cde:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <Channel>
     ce2:	08 2e       	mov	r0, r24
     ce4:	00 0c       	add	r0, r0
     ce6:	99 0b       	sbc	r25, r25
     ce8:	20 91 85 02 	lds	r18, 0x0285	; 0x800285 <ServoCount>
     cec:	28 17       	cp	r18, r24
     cee:	19 06       	cpc	r1, r25
     cf0:	99 f2       	breq	.-90     	; 0xc98 <__vector_11+0x32>
     cf2:	94 f2       	brlt	.-92     	; 0xc98 <__vector_11+0x32>
     cf4:	e0 91 86 02 	lds	r30, 0x0286	; 0x800286 <Channel>
     cf8:	8e 2f       	mov	r24, r30
     cfa:	ee 0f       	add	r30, r30
     cfc:	99 0b       	sbc	r25, r25
     cfe:	fc 01       	movw	r30, r24
     d00:	ee 0f       	add	r30, r30
     d02:	ff 1f       	adc	r31, r31
     d04:	e8 0f       	add	r30, r24
     d06:	f9 1f       	adc	r31, r25
     d08:	e9 57       	subi	r30, 0x79	; 121
     d0a:	fd 4f       	sbci	r31, 0xFD	; 253
     d0c:	80 81       	ld	r24, Z
     d0e:	86 ff       	sbrs	r24, 6
     d10:	c3 cf       	rjmp	.-122    	; 0xc98 <__vector_11+0x32>
     d12:	e0 91 86 02 	lds	r30, 0x0286	; 0x800286 <Channel>
     d16:	8e 2f       	mov	r24, r30
     d18:	ee 0f       	add	r30, r30
     d1a:	99 0b       	sbc	r25, r25
     d1c:	fc 01       	movw	r30, r24
     d1e:	ee 0f       	add	r30, r30
     d20:	ff 1f       	adc	r31, r31
     d22:	e8 0f       	add	r30, r24
     d24:	f9 1f       	adc	r31, r25
     d26:	e9 57       	subi	r30, 0x79	; 121
     d28:	fd 4f       	sbci	r31, 0xFD	; 253
     d2a:	80 81       	ld	r24, Z
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	8f 73       	andi	r24, 0x3F	; 63
     d30:	0e 94 01 11 	call	0x2202	; 0x2202 <digitalWrite>
     d34:	b1 cf       	rjmp	.-158    	; 0xc98 <__vector_11+0x32>
     d36:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d3a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d3e:	e0 91 86 02 	lds	r30, 0x0286	; 0x800286 <Channel>
     d42:	8e 2f       	mov	r24, r30
     d44:	ee 0f       	add	r30, r30
     d46:	99 0b       	sbc	r25, r25
     d48:	fc 01       	movw	r30, r24
     d4a:	ee 0f       	add	r30, r30
     d4c:	ff 1f       	adc	r31, r31
     d4e:	e8 0f       	add	r30, r24
     d50:	f9 1f       	adc	r31, r25
     d52:	e9 57       	subi	r30, 0x79	; 121
     d54:	fd 4f       	sbci	r31, 0xFD	; 253
     d56:	81 81       	ldd	r24, Z+1	; 0x01
     d58:	92 81       	ldd	r25, Z+2	; 0x02
     d5a:	82 0f       	add	r24, r18
     d5c:	93 1f       	adc	r25, r19
     d5e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     d62:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     d66:	e0 91 86 02 	lds	r30, 0x0286	; 0x800286 <Channel>
     d6a:	8e 2f       	mov	r24, r30
     d6c:	ee 0f       	add	r30, r30
     d6e:	99 0b       	sbc	r25, r25
     d70:	fc 01       	movw	r30, r24
     d72:	ee 0f       	add	r30, r30
     d74:	ff 1f       	adc	r31, r31
     d76:	e8 0f       	add	r30, r24
     d78:	f9 1f       	adc	r31, r25
     d7a:	e9 57       	subi	r30, 0x79	; 121
     d7c:	fd 4f       	sbci	r31, 0xFD	; 253
     d7e:	80 81       	ld	r24, Z
     d80:	86 ff       	sbrs	r24, 6
     d82:	11 c0       	rjmp	.+34     	; 0xda6 <__vector_11+0x140>
     d84:	e0 91 86 02 	lds	r30, 0x0286	; 0x800286 <Channel>
     d88:	8e 2f       	mov	r24, r30
     d8a:	ee 0f       	add	r30, r30
     d8c:	99 0b       	sbc	r25, r25
     d8e:	fc 01       	movw	r30, r24
     d90:	ee 0f       	add	r30, r30
     d92:	ff 1f       	adc	r31, r31
     d94:	e8 0f       	add	r30, r24
     d96:	f9 1f       	adc	r31, r25
     d98:	e9 57       	subi	r30, 0x79	; 121
     d9a:	fd 4f       	sbci	r31, 0xFD	; 253
     d9c:	80 81       	ld	r24, Z
     d9e:	61 e0       	ldi	r22, 0x01	; 1
     da0:	8f 73       	andi	r24, 0x3F	; 63
     da2:	0e 94 01 11 	call	0x2202	; 0x2202 <digitalWrite>
__vector_11():
     da6:	ff 91       	pop	r31
     da8:	ef 91       	pop	r30
     daa:	bf 91       	pop	r27
     dac:	af 91       	pop	r26
     dae:	9f 91       	pop	r25
     db0:	8f 91       	pop	r24
     db2:	7f 91       	pop	r23
     db4:	6f 91       	pop	r22
     db6:	5f 91       	pop	r21
     db8:	4f 91       	pop	r20
     dba:	3f 91       	pop	r19
     dbc:	2f 91       	pop	r18
     dbe:	0f 90       	pop	r0
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	0f 90       	pop	r0
     dc4:	1f 90       	pop	r1
     dc6:	18 95       	reti
handle_interrupts():
     dc8:	80 e4       	ldi	r24, 0x40	; 64
     dca:	9c e9       	ldi	r25, 0x9C	; 156
     dcc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     dd0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     dd4:	8f ef       	ldi	r24, 0xFF	; 255
     dd6:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <Channel>
__vector_11():
     dda:	e5 cf       	rjmp	.-54     	; 0xda6 <__vector_11+0x140>

00000ddc <Servo::Servo()>:
_ZN5ServoC2Ev():
     ddc:	fc 01       	movw	r30, r24
     dde:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <ServoCount>
     de2:	9c 30       	cpi	r25, 0x0C	; 12
     de4:	98 f4       	brcc	.+38     	; 0xe0c <Servo::Servo()+0x30>
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	89 0f       	add	r24, r25
     dea:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <ServoCount>
     dee:	90 83       	st	Z, r25
     df0:	89 2f       	mov	r24, r25
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	fc 01       	movw	r30, r24
     df6:	ee 0f       	add	r30, r30
     df8:	ff 1f       	adc	r31, r31
     dfa:	e8 0f       	add	r30, r24
     dfc:	f9 1f       	adc	r31, r25
     dfe:	e9 57       	subi	r30, 0x79	; 121
     e00:	fd 4f       	sbci	r31, 0xFD	; 253
     e02:	88 eb       	ldi	r24, 0xB8	; 184
     e04:	9b e0       	ldi	r25, 0x0B	; 11
     e06:	92 83       	std	Z+2, r25	; 0x02
     e08:	81 83       	std	Z+1, r24	; 0x01
     e0a:	08 95       	ret
     e0c:	8f ef       	ldi	r24, 0xFF	; 255
     e0e:	80 83       	st	Z, r24
     e10:	08 95       	ret

00000e12 <Servo::attach(int, int, int)>:
_ZN5Servo6attachEiii():
     e12:	df 92       	push	r13
     e14:	ef 92       	push	r14
     e16:	ff 92       	push	r15
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	ec 01       	movw	r28, r24
     e22:	d6 2e       	mov	r13, r22
     e24:	7a 01       	movw	r14, r20
     e26:	89 01       	movw	r16, r18
     e28:	88 81       	ld	r24, Y
     e2a:	8c 30       	cpi	r24, 0x0C	; 12
     e2c:	08 f0       	brcs	.+2      	; 0xe30 <Servo::attach(int, int, int)+0x1e>
     e2e:	67 c0       	rjmp	.+206    	; 0xefe <Servo::attach(int, int, int)+0xec>
     e30:	61 e0       	ldi	r22, 0x01	; 1
     e32:	8d 2d       	mov	r24, r13
     e34:	0e 94 c5 10 	call	0x218a	; 0x218a <pinMode>
     e38:	88 81       	ld	r24, Y
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	f9 01       	movw	r30, r18
     e40:	ee 0f       	add	r30, r30
     e42:	ff 1f       	adc	r31, r31
     e44:	e2 0f       	add	r30, r18
     e46:	f3 1f       	adc	r31, r19
     e48:	e9 57       	subi	r30, 0x79	; 121
     e4a:	fd 4f       	sbci	r31, 0xFD	; 253
     e4c:	9d 2d       	mov	r25, r13
     e4e:	9f 73       	andi	r25, 0x3F	; 63
     e50:	60 81       	ld	r22, Z
     e52:	60 7c       	andi	r22, 0xC0	; 192
     e54:	69 2b       	or	r22, r25
     e56:	60 83       	st	Z, r22
     e58:	20 e2       	ldi	r18, 0x20	; 32
     e5a:	32 e0       	ldi	r19, 0x02	; 2
     e5c:	2e 19       	sub	r18, r14
     e5e:	3f 09       	sbc	r19, r15
     e60:	37 ff       	sbrs	r19, 7
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <Servo::attach(int, int, int)+0x56>
     e64:	2d 5f       	subi	r18, 0xFD	; 253
     e66:	3f 4f       	sbci	r19, 0xFF	; 255
     e68:	35 95       	asr	r19
     e6a:	27 95       	ror	r18
     e6c:	35 95       	asr	r19
     e6e:	27 95       	ror	r18
     e70:	29 83       	std	Y+1, r18	; 0x01
     e72:	20 e6       	ldi	r18, 0x60	; 96
     e74:	39 e0       	ldi	r19, 0x09	; 9
     e76:	20 1b       	sub	r18, r16
     e78:	31 0b       	sbc	r19, r17
     e7a:	37 ff       	sbrs	r19, 7
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <Servo::attach(int, int, int)+0x70>
     e7e:	2d 5f       	subi	r18, 0xFD	; 253
     e80:	3f 4f       	sbci	r19, 0xFF	; 255
     e82:	35 95       	asr	r19
     e84:	27 95       	ror	r18
     e86:	35 95       	asr	r19
     e88:	27 95       	ror	r18
     e8a:	2a 83       	std	Y+2, r18	; 0x02
     e8c:	2c e0       	ldi	r18, 0x0C	; 12
     e8e:	62 2f       	mov	r22, r18
     e90:	0e 94 cc 19 	call	0x3398	; 0x3398 <__udivmodqi4>
isTimerActive():
     e94:	82 9f       	mul	r24, r18
     e96:	b0 01       	movw	r22, r0
     e98:	11 24       	eor	r1, r1
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	ab 01       	movw	r20, r22
     ea0:	42 0f       	add	r20, r18
     ea2:	53 1f       	adc	r21, r19
     ea4:	fa 01       	movw	r30, r20
     ea6:	ee 0f       	add	r30, r30
     ea8:	ff 1f       	adc	r31, r31
     eaa:	e4 0f       	add	r30, r20
     eac:	f5 1f       	adc	r31, r21
     eae:	e9 57       	subi	r30, 0x79	; 121
     eb0:	fd 4f       	sbci	r31, 0xFD	; 253
     eb2:	90 81       	ld	r25, Z
     eb4:	96 fd       	sbrc	r25, 6
     eb6:	16 c0       	rjmp	.+44     	; 0xee4 <Servo::attach(int, int, int)+0xd2>
     eb8:	2f 5f       	subi	r18, 0xFF	; 255
     eba:	3f 4f       	sbci	r19, 0xFF	; 255
     ebc:	2c 30       	cpi	r18, 0x0C	; 12
     ebe:	31 05       	cpc	r19, r1
     ec0:	71 f7       	brne	.-36     	; 0xe9e <Servo::attach(int, int, int)+0x8c>
initISR():
     ec2:	81 11       	cpse	r24, r1
     ec4:	0f c0       	rjmp	.+30     	; 0xee4 <Servo::attach(int, int, int)+0xd2>
     ec6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     eca:	82 e0       	ldi	r24, 0x02	; 2
     ecc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     ed0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ed4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ed8:	b1 9a       	sbi	0x16, 1	; 22
     eda:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     ede:	82 60       	ori	r24, 0x02	; 2
     ee0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
_ZN5Servo6attachEiii():
     ee4:	e8 81       	ld	r30, Y
     ee6:	8e 2f       	mov	r24, r30
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	fc 01       	movw	r30, r24
     eec:	ee 0f       	add	r30, r30
     eee:	ff 1f       	adc	r31, r31
     ef0:	e8 0f       	add	r30, r24
     ef2:	f9 1f       	adc	r31, r25
     ef4:	e9 57       	subi	r30, 0x79	; 121
     ef6:	fd 4f       	sbci	r31, 0xFD	; 253
     ef8:	80 81       	ld	r24, Z
     efa:	80 64       	ori	r24, 0x40	; 64
     efc:	80 83       	st	Z, r24
     efe:	88 81       	ld	r24, Y
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	ff 90       	pop	r15
     f0a:	ef 90       	pop	r14
     f0c:	df 90       	pop	r13
     f0e:	08 95       	ret

00000f10 <Servo::attach(int)>:
_ZN5Servo6attachEi():
     f10:	20 e6       	ldi	r18, 0x60	; 96
     f12:	39 e0       	ldi	r19, 0x09	; 9
     f14:	40 e2       	ldi	r20, 0x20	; 32
     f16:	52 e0       	ldi	r21, 0x02	; 2
     f18:	0c 94 09 07 	jmp	0xe12	; 0xe12 <Servo::attach(int, int, int)>

00000f1c <Servo::writeMicroseconds(int)>:
_ZN5Servo17writeMicrosecondsEi():
/home/fluxion9/arduino-1.8.19/libraries/Servo/src/avr/Servo.cpp:276
  }
  this->writeMicroseconds(value);
}

void Servo::writeMicroseconds(int value)
{
     f1c:	dc 01       	movw	r26, r24
/home/fluxion9/arduino-1.8.19/libraries/Servo/src/avr/Servo.cpp:278
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
     f1e:	ec 91       	ld	r30, X
/home/fluxion9/arduino-1.8.19/libraries/Servo/src/avr/Servo.cpp:279
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
     f20:	ec 30       	cpi	r30, 0x0C	; 12
     f22:	90 f5       	brcc	.+100    	; 0xf88 <Servo::writeMicroseconds(int)+0x6c>
/home/fluxion9/arduino-1.8.19/libraries/Servo/src/avr/Servo.cpp:281
  {
    if( value < SERVO_MIN() )          // ensure pulse width is valid
     f24:	11 96       	adiw	r26, 0x01	; 1
     f26:	8c 91       	ld	r24, X
     f28:	11 97       	sbiw	r26, 0x01	; 1
     f2a:	28 e8       	ldi	r18, 0x88	; 136
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	28 1b       	sub	r18, r24
     f30:	31 09       	sbc	r19, r1
     f32:	87 fd       	sbrc	r24, 7
     f34:	33 95       	inc	r19
     f36:	22 0f       	add	r18, r18
     f38:	33 1f       	adc	r19, r19
     f3a:	22 0f       	add	r18, r18
     f3c:	33 1f       	adc	r19, r19
     f3e:	62 17       	cp	r22, r18
     f40:	73 07       	cpc	r23, r19
     f42:	84 f0       	brlt	.+32     	; 0xf64 <Servo::writeMicroseconds(int)+0x48>
/home/fluxion9/arduino-1.8.19/libraries/Servo/src/avr/Servo.cpp:283
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
     f44:	12 96       	adiw	r26, 0x02	; 2
     f46:	8c 91       	ld	r24, X
     f48:	28 e5       	ldi	r18, 0x58	; 88
     f4a:	32 e0       	ldi	r19, 0x02	; 2
     f4c:	28 1b       	sub	r18, r24
     f4e:	31 09       	sbc	r19, r1
     f50:	87 fd       	sbrc	r24, 7
     f52:	33 95       	inc	r19
     f54:	22 0f       	add	r18, r18
     f56:	33 1f       	adc	r19, r19
     f58:	22 0f       	add	r18, r18
     f5a:	33 1f       	adc	r19, r19
     f5c:	62 17       	cp	r22, r18
     f5e:	73 07       	cpc	r23, r19
     f60:	0c f4       	brge	.+2      	; 0xf64 <Servo::writeMicroseconds(int)+0x48>
     f62:	9b 01       	movw	r18, r22
/home/fluxion9/arduino-1.8.19/libraries/Servo/src/avr/Servo.cpp:286
      value = SERVO_MAX();

    value = value - TRIM_DURATION;
     f64:	22 50       	subi	r18, 0x02	; 2
     f66:	31 09       	sbc	r19, r1
/home/fluxion9/arduino-1.8.19/libraries/Servo/src/avr/Servo.cpp:287
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
     f68:	22 0f       	add	r18, r18
     f6a:	33 1f       	adc	r19, r19
/home/fluxion9/arduino-1.8.19/libraries/Servo/src/avr/Servo.cpp:289

    uint8_t oldSREG = SREG;
     f6c:	4f b7       	in	r20, 0x3f	; 63
/home/fluxion9/arduino-1.8.19/libraries/Servo/src/avr/Servo.cpp:290
    cli();
     f6e:	f8 94       	cli
/home/fluxion9/arduino-1.8.19/libraries/Servo/src/avr/Servo.cpp:291
    servos[channel].ticks = value;
     f70:	8e 2f       	mov	r24, r30
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	fc 01       	movw	r30, r24
     f76:	ee 0f       	add	r30, r30
     f78:	ff 1f       	adc	r31, r31
     f7a:	e8 0f       	add	r30, r24
     f7c:	f9 1f       	adc	r31, r25
     f7e:	e9 57       	subi	r30, 0x79	; 121
     f80:	fd 4f       	sbci	r31, 0xFD	; 253
     f82:	32 83       	std	Z+2, r19	; 0x02
     f84:	21 83       	std	Z+1, r18	; 0x01
/home/fluxion9/arduino-1.8.19/libraries/Servo/src/avr/Servo.cpp:292
    SREG = oldSREG;
     f86:	4f bf       	out	0x3f, r20	; 63
/home/fluxion9/arduino-1.8.19/libraries/Servo/src/avr/Servo.cpp:294
  }
}
     f88:	08 95       	ret

00000f8a <Servo::write(int)>:
_ZN5Servo5writeEi():
/home/fluxion9/arduino-1.8.19/libraries/Servo/src/avr/Servo.cpp:265
    finISR(timer);
  }
}

void Servo::write(int value)
{
     f8a:	af 92       	push	r10
     f8c:	bf 92       	push	r11
     f8e:	cf 92       	push	r12
     f90:	df 92       	push	r13
     f92:	ef 92       	push	r14
     f94:	ff 92       	push	r15
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	ec 01       	movw	r28, r24
/home/fluxion9/arduino-1.8.19/libraries/Servo/src/avr/Servo.cpp:266
  if(value < MIN_PULSE_WIDTH)
     fa0:	60 32       	cpi	r22, 0x20	; 32
     fa2:	82 e0       	ldi	r24, 0x02	; 2
     fa4:	78 07       	cpc	r23, r24
     fa6:	0c f0       	brlt	.+2      	; 0xfaa <Servo::write(int)+0x20>
     fa8:	3e c0       	rjmp	.+124    	; 0x1026 <Servo::write(int)+0x9c>
     faa:	65 3b       	cpi	r22, 0xB5	; 181
     fac:	71 05       	cpc	r23, r1
     fae:	14 f0       	brlt	.+4      	; 0xfb4 <Servo::write(int)+0x2a>
     fb0:	64 eb       	ldi	r22, 0xB4	; 180
     fb2:	70 e0       	ldi	r23, 0x00	; 0
/home/fluxion9/arduino-1.8.19/libraries/Servo/src/avr/Servo.cpp:270
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	48 e8       	ldi	r20, 0x88	; 136
     fb8:	a4 2e       	mov	r10, r20
     fba:	b1 2c       	mov	r11, r1
     fbc:	a8 1a       	sub	r10, r24
     fbe:	b1 08       	sbc	r11, r1
     fc0:	87 fd       	sbrc	r24, 7
     fc2:	b3 94       	inc	r11
     fc4:	aa 0c       	add	r10, r10
     fc6:	bb 1c       	adc	r11, r11
     fc8:	aa 0c       	add	r10, r10
     fca:	bb 1c       	adc	r11, r11
     fcc:	0b 2c       	mov	r0, r11
     fce:	00 0c       	add	r0, r0
     fd0:	cc 08       	sbc	r12, r12
     fd2:	dd 08       	sbc	r13, r13
     fd4:	77 ff       	sbrs	r23, 7
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <Servo::write(int)+0x52>
     fd8:	70 e0       	ldi	r23, 0x00	; 0
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	07 2e       	mov	r0, r23
     fde:	00 0c       	add	r0, r0
     fe0:	88 0b       	sbc	r24, r24
     fe2:	99 0b       	sbc	r25, r25
     fe4:	2a 81       	ldd	r18, Y+2	; 0x02
     fe6:	08 e5       	ldi	r16, 0x58	; 88
     fe8:	12 e0       	ldi	r17, 0x02	; 2
     fea:	02 1b       	sub	r16, r18
     fec:	11 09       	sbc	r17, r1
     fee:	27 fd       	sbrc	r18, 7
     ff0:	13 95       	inc	r17
     ff2:	00 0f       	add	r16, r16
     ff4:	11 1f       	adc	r17, r17
     ff6:	00 0f       	add	r16, r16
     ff8:	11 1f       	adc	r17, r17
     ffa:	01 2e       	mov	r0, r17
     ffc:	00 0c       	add	r0, r0
     ffe:	22 0b       	sbc	r18, r18
    1000:	33 0b       	sbc	r19, r19
    1002:	3f 93       	push	r19
    1004:	2f 93       	push	r18
    1006:	1f 93       	push	r17
    1008:	0f 93       	push	r16
    100a:	14 eb       	ldi	r17, 0xB4	; 180
    100c:	e1 2e       	mov	r14, r17
    100e:	f1 2c       	mov	r15, r1
    1010:	00 e0       	ldi	r16, 0x00	; 0
    1012:	10 e0       	ldi	r17, 0x00	; 0
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	a9 01       	movw	r20, r18
    101a:	0e 94 71 13 	call	0x26e2	; 0x26e2 <map(long, long, long, long, long)>
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
/home/fluxion9/arduino-1.8.19/libraries/Servo/src/avr/Servo.cpp:272
  }
  this->writeMicroseconds(value);
    1026:	ce 01       	movw	r24, r28
/home/fluxion9/arduino-1.8.19/libraries/Servo/src/avr/Servo.cpp:273
}
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	1f 91       	pop	r17
    102e:	0f 91       	pop	r16
    1030:	ff 90       	pop	r15
    1032:	ef 90       	pop	r14
    1034:	df 90       	pop	r13
    1036:	cf 90       	pop	r12
    1038:	bf 90       	pop	r11
    103a:	af 90       	pop	r10
/home/fluxion9/arduino-1.8.19/libraries/Servo/src/avr/Servo.cpp:272
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
  }
  this->writeMicroseconds(value);
    103c:	0c 94 8e 07 	jmp	0xf1c	; 0xf1c <Servo::writeMicroseconds(int)>

00001040 <Servo::readMicroseconds()>:
_ZN5Servo16readMicrosecondsEv():
/home/fluxion9/arduino-1.8.19/libraries/Servo/src/avr/Servo.cpp:304
}

int Servo::readMicroseconds()
{
  unsigned int pulsewidth;
  if( this->servoIndex != INVALID_SERVO )
    1040:	fc 01       	movw	r30, r24
    1042:	80 81       	ld	r24, Z
    1044:	8f 3f       	cpi	r24, 0xFF	; 255
    1046:	d1 f0       	breq	.+52     	; 0x107c <Servo::readMicroseconds()+0x3c>
/home/fluxion9/arduino-1.8.19/libraries/Servo/src/avr/Servo.cpp:305
    pulsewidth = ticksToUs(servos[this->servoIndex].ticks)  + TRIM_DURATION ;   // 12 aug 2009
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	fc 01       	movw	r30, r24
    104c:	ee 0f       	add	r30, r30
    104e:	ff 1f       	adc	r31, r31
    1050:	e8 0f       	add	r30, r24
    1052:	f9 1f       	adc	r31, r25
    1054:	e9 57       	subi	r30, 0x79	; 121
    1056:	fd 4f       	sbci	r31, 0xFD	; 253
    1058:	81 81       	ldd	r24, Z+1	; 0x01
    105a:	92 81       	ldd	r25, Z+2	; 0x02
    105c:	33 e0       	ldi	r19, 0x03	; 3
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	3a 95       	dec	r19
    1064:	e1 f7       	brne	.-8      	; 0x105e <Servo::readMicroseconds()+0x1e>
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	a0 e0       	ldi	r26, 0x00	; 0
    106a:	44 e0       	ldi	r20, 0x04	; 4
    106c:	b5 95       	asr	r27
    106e:	a7 95       	ror	r26
    1070:	97 95       	ror	r25
    1072:	87 95       	ror	r24
    1074:	4a 95       	dec	r20
    1076:	d1 f7       	brne	.-12     	; 0x106c <Servo::readMicroseconds()+0x2c>
    1078:	02 96       	adiw	r24, 0x02	; 2
    107a:	08 95       	ret
/home/fluxion9/arduino-1.8.19/libraries/Servo/src/avr/Servo.cpp:307
  else
    pulsewidth  = 0;
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	80 e0       	ldi	r24, 0x00	; 0
/home/fluxion9/arduino-1.8.19/libraries/Servo/src/avr/Servo.cpp:310

  return pulsewidth;
}
    1080:	08 95       	ret

00001082 <Servo::read()>:
_ZN5Servo4readEv():
/home/fluxion9/arduino-1.8.19/libraries/Servo/src/avr/Servo.cpp:297
    SREG = oldSREG;
  }
}

int Servo::read() // return the value as degrees
{
    1082:	4f 92       	push	r4
    1084:	5f 92       	push	r5
    1086:	6f 92       	push	r6
    1088:	7f 92       	push	r7
    108a:	af 92       	push	r10
    108c:	bf 92       	push	r11
    108e:	cf 92       	push	r12
    1090:	df 92       	push	r13
    1092:	ef 92       	push	r14
    1094:	ff 92       	push	r15
    1096:	0f 93       	push	r16
    1098:	1f 93       	push	r17
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <Servo::read()+0x1e>
    10a0:	00 d0       	rcall	.+0      	; 0x10a2 <Servo::read()+0x20>
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
/home/fluxion9/arduino-1.8.19/libraries/Servo/src/avr/Servo.cpp:298
  return  map( this->readMicroseconds()+1, SERVO_MIN(), SERVO_MAX(), 0, 180);
    10a6:	fc 01       	movw	r30, r24
    10a8:	42 81       	ldd	r20, Z+2	; 0x02
    10aa:	28 e5       	ldi	r18, 0x58	; 88
    10ac:	32 e0       	ldi	r19, 0x02	; 2
    10ae:	24 1b       	sub	r18, r20
    10b0:	31 09       	sbc	r19, r1
    10b2:	47 fd       	sbrc	r20, 7
    10b4:	33 95       	inc	r19
    10b6:	22 0f       	add	r18, r18
    10b8:	33 1f       	adc	r19, r19
    10ba:	22 0f       	add	r18, r18
    10bc:	33 1f       	adc	r19, r19
    10be:	a9 01       	movw	r20, r18
    10c0:	33 0f       	add	r19, r19
    10c2:	66 0b       	sbc	r22, r22
    10c4:	77 0b       	sbc	r23, r23
    10c6:	49 83       	std	Y+1, r20	; 0x01
    10c8:	5a 83       	std	Y+2, r21	; 0x02
    10ca:	6b 83       	std	Y+3, r22	; 0x03
    10cc:	7c 83       	std	Y+4, r23	; 0x04
    10ce:	21 81       	ldd	r18, Z+1	; 0x01
    10d0:	58 e8       	ldi	r21, 0x88	; 136
    10d2:	45 2e       	mov	r4, r21
    10d4:	51 2c       	mov	r5, r1
    10d6:	42 1a       	sub	r4, r18
    10d8:	51 08       	sbc	r5, r1
    10da:	27 fd       	sbrc	r18, 7
    10dc:	53 94       	inc	r5
    10de:	44 0c       	add	r4, r4
    10e0:	55 1c       	adc	r5, r5
    10e2:	44 0c       	add	r4, r4
    10e4:	55 1c       	adc	r5, r5
    10e6:	05 2c       	mov	r0, r5
    10e8:	00 0c       	add	r0, r0
    10ea:	66 08       	sbc	r6, r6
    10ec:	77 08       	sbc	r7, r7
    10ee:	0e 94 20 08 	call	0x1040	; 0x1040 <Servo::readMicroseconds()>
    10f2:	01 96       	adiw	r24, 0x01	; 1
    10f4:	bc 01       	movw	r22, r24
    10f6:	99 0f       	add	r25, r25
    10f8:	88 0b       	sbc	r24, r24
    10fa:	99 0b       	sbc	r25, r25
    10fc:	1f 92       	push	r1
    10fe:	1f 92       	push	r1
    1100:	1f 92       	push	r1
    1102:	24 eb       	ldi	r18, 0xB4	; 180
    1104:	2f 93       	push	r18
    1106:	a1 2c       	mov	r10, r1
    1108:	b1 2c       	mov	r11, r1
    110a:	65 01       	movw	r12, r10
    110c:	e9 80       	ldd	r14, Y+1	; 0x01
    110e:	fa 80       	ldd	r15, Y+2	; 0x02
    1110:	0b 81       	ldd	r16, Y+3	; 0x03
    1112:	1c 81       	ldd	r17, Y+4	; 0x04
    1114:	a3 01       	movw	r20, r6
    1116:	92 01       	movw	r18, r4
    1118:	0e 94 71 13 	call	0x26e2	; 0x26e2 <map(long, long, long, long, long)>
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
/home/fluxion9/arduino-1.8.19/libraries/Servo/src/avr/Servo.cpp:299
}
    1124:	cb 01       	movw	r24, r22
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	df 91       	pop	r29
    1130:	cf 91       	pop	r28
    1132:	1f 91       	pop	r17
    1134:	0f 91       	pop	r16
    1136:	ff 90       	pop	r15
    1138:	ef 90       	pop	r14
    113a:	df 90       	pop	r13
    113c:	cf 90       	pop	r12
    113e:	bf 90       	pop	r11
    1140:	af 90       	pop	r10
    1142:	7f 90       	pop	r7
    1144:	6f 90       	pop	r6
    1146:	5f 90       	pop	r5
    1148:	4f 90       	pop	r4
    114a:	08 95       	ret

0000114c <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/Wire.cpp:329

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	08 95       	ret

00001152 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
    1152:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <TwoWire::rxBufferLength>
    1156:	90 91 e0 02 	lds	r25, 0x02E0	; 0x8002e0 <TwoWire::rxBufferIndex>
    115a:	89 1b       	sub	r24, r25
    115c:	99 0b       	sbc	r25, r25
    115e:	08 95       	ret

00001160 <TwoWire::read()>:
_ZN7TwoWire4readEv():
    1160:	90 91 e0 02 	lds	r25, 0x02E0	; 0x8002e0 <TwoWire::rxBufferIndex>
    1164:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <TwoWire::rxBufferLength>
    1168:	2f ef       	ldi	r18, 0xFF	; 255
    116a:	3f ef       	ldi	r19, 0xFF	; 255
    116c:	98 17       	cp	r25, r24
    116e:	48 f4       	brcc	.+18     	; 0x1182 <TwoWire::read()+0x22>
    1170:	e9 2f       	mov	r30, r25
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	ef 51       	subi	r30, 0x1F	; 31
    1176:	fd 4f       	sbci	r31, 0xFD	; 253
    1178:	20 81       	ld	r18, Z
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	9f 5f       	subi	r25, 0xFF	; 255
    117e:	90 93 e0 02 	sts	0x02E0, r25	; 0x8002e0 <TwoWire::rxBufferIndex>
    1182:	c9 01       	movw	r24, r18
    1184:	08 95       	ret

00001186 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
    1186:	e0 91 e0 02 	lds	r30, 0x02E0	; 0x8002e0 <TwoWire::rxBufferIndex>
    118a:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <TwoWire::rxBufferLength>
    118e:	e8 17       	cp	r30, r24
    1190:	30 f4       	brcc	.+12     	; 0x119e <TwoWire::peek()+0x18>
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	ef 51       	subi	r30, 0x1F	; 31
    1196:	fd 4f       	sbci	r31, 0xFD	; 253
    1198:	80 81       	ld	r24, Z
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	08 95       	ret
    119e:	8f ef       	ldi	r24, 0xFF	; 255
    11a0:	9f ef       	ldi	r25, 0xFF	; 255
    11a2:	08 95       	ret

000011a4 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
    11a4:	08 95       	ret

000011a6 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
    11a6:	cf 93       	push	r28
    11a8:	df 93       	push	r29
    11aa:	ec 01       	movw	r28, r24
    11ac:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <TwoWire::user_onReceive>
    11b0:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <TwoWire::user_onReceive+0x1>
    11b4:	30 97       	sbiw	r30, 0x00	; 0
    11b6:	f1 f0       	breq	.+60     	; 0x11f4 <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
    11b8:	90 91 e0 02 	lds	r25, 0x02E0	; 0x8002e0 <TwoWire::rxBufferIndex>
    11bc:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <TwoWire::rxBufferLength>
    11c0:	98 17       	cp	r25, r24
    11c2:	c0 f0       	brcs	.+48     	; 0x11f4 <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	29 2f       	mov	r18, r25
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	26 17       	cp	r18, r22
    11cc:	37 07       	cpc	r19, r23
    11ce:	54 f4       	brge	.+20     	; 0x11e4 <TwoWire::onReceiveService(unsigned char*, int)+0x3e>
    11d0:	de 01       	movw	r26, r28
    11d2:	a2 0f       	add	r26, r18
    11d4:	b3 1f       	adc	r27, r19
    11d6:	4c 91       	ld	r20, X
    11d8:	2f 51       	subi	r18, 0x1F	; 31
    11da:	3d 4f       	sbci	r19, 0xFD	; 253
    11dc:	d9 01       	movw	r26, r18
    11de:	4c 93       	st	X, r20
    11e0:	9f 5f       	subi	r25, 0xFF	; 255
    11e2:	f1 cf       	rjmp	.-30     	; 0x11c6 <TwoWire::onReceiveService(unsigned char*, int)+0x20>
    11e4:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <TwoWire::rxBufferIndex>
    11e8:	60 93 df 02 	sts	0x02DF, r22	; 0x8002df <TwoWire::rxBufferLength>
    11ec:	cb 01       	movw	r24, r22
    11ee:	df 91       	pop	r29
    11f0:	cf 91       	pop	r28
    11f2:	09 94       	ijmp
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	08 95       	ret

000011fa <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
    11fa:	e0 91 b9 02 	lds	r30, 0x02B9	; 0x8002b9 <TwoWire::user_onRequest>
    11fe:	f0 91 ba 02 	lds	r31, 0x02BA	; 0x8002ba <TwoWire::user_onRequest+0x1>
    1202:	30 97       	sbiw	r30, 0x00	; 0
    1204:	29 f0       	breq	.+10     	; 0x1210 <TwoWire::onRequestService()+0x16>
    1206:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <TwoWire::txBufferIndex>
    120a:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <TwoWire::txBufferLength>
    120e:	09 94       	ijmp
    1210:	08 95       	ret

00001212 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
    1212:	cf 93       	push	r28
    1214:	df 93       	push	r29
    1216:	1f 92       	push	r1
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    121c:	69 83       	std	Y+1, r22	; 0x01
    121e:	20 91 bb 02 	lds	r18, 0x02BB	; 0x8002bb <TwoWire::transmitting>
    1222:	22 23       	and	r18, r18
    1224:	f9 f0       	breq	.+62     	; 0x1264 <TwoWire::write(unsigned char)+0x52>
    1226:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <TwoWire::txBufferLength>
    122a:	20 32       	cpi	r18, 0x20	; 32
    122c:	58 f0       	brcs	.+22     	; 0x1244 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
    122e:	21 e0       	ldi	r18, 0x01	; 1
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	fc 01       	movw	r30, r24
    1234:	33 83       	std	Z+3, r19	; 0x03
    1236:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	0f 90       	pop	r0
    123e:	df 91       	pop	r29
    1240:	cf 91       	pop	r28
    1242:	08 95       	ret
    1244:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <TwoWire::txBufferIndex>
    1248:	e8 2f       	mov	r30, r24
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	e2 54       	subi	r30, 0x42	; 66
    124e:	fd 4f       	sbci	r31, 0xFD	; 253
    1250:	99 81       	ldd	r25, Y+1	; 0x01
    1252:	90 83       	st	Z, r25
    1254:	8f 5f       	subi	r24, 0xFF	; 255
    1256:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <TwoWire::txBufferIndex>
    125a:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <TwoWire::txBufferLength>
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	ec cf       	rjmp	.-40     	; 0x123c <TwoWire::write(unsigned char)+0x2a>
    1264:	61 e0       	ldi	r22, 0x01	; 1
    1266:	ce 01       	movw	r24, r28
    1268:	01 96       	adiw	r24, 0x01	; 1
    126a:	0e 94 ce 0a 	call	0x159c	; 0x159c <twi_transmit>
    126e:	f7 cf       	rjmp	.-18     	; 0x125e <TwoWire::write(unsigned char)+0x4c>

00001270 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
    1270:	cf 92       	push	r12
    1272:	df 92       	push	r13
    1274:	ef 92       	push	r14
    1276:	ff 92       	push	r15
    1278:	0f 93       	push	r16
    127a:	1f 93       	push	r17
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	7c 01       	movw	r14, r24
    1282:	cb 01       	movw	r24, r22
    1284:	8a 01       	movw	r16, r20
    1286:	20 91 bb 02 	lds	r18, 0x02BB	; 0x8002bb <TwoWire::transmitting>
    128a:	22 23       	and	r18, r18
    128c:	89 f0       	breq	.+34     	; 0x12b0 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    128e:	eb 01       	movw	r28, r22
    1290:	6b 01       	movw	r12, r22
    1292:	c4 0e       	add	r12, r20
    1294:	d5 1e       	adc	r13, r21
    1296:	cc 15       	cp	r28, r12
    1298:	dd 05       	cpc	r29, r13
    129a:	69 f0       	breq	.+26     	; 0x12b6 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    129c:	69 91       	ld	r22, Y+
    129e:	d7 01       	movw	r26, r14
    12a0:	ed 91       	ld	r30, X+
    12a2:	fc 91       	ld	r31, X
    12a4:	01 90       	ld	r0, Z+
    12a6:	f0 81       	ld	r31, Z
    12a8:	e0 2d       	mov	r30, r0
    12aa:	c7 01       	movw	r24, r14
    12ac:	09 95       	icall
    12ae:	f3 cf       	rjmp	.-26     	; 0x1296 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
    12b0:	64 2f       	mov	r22, r20
    12b2:	0e 94 ce 0a 	call	0x159c	; 0x159c <twi_transmit>
    12b6:	c8 01       	movw	r24, r16
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	1f 91       	pop	r17
    12be:	0f 91       	pop	r16
    12c0:	ff 90       	pop	r15
    12c2:	ef 90       	pop	r14
    12c4:	df 90       	pop	r13
    12c6:	cf 90       	pop	r12
    12c8:	08 95       	ret

000012ca <TwoWire::begin()>:
_ZN7TwoWire5beginEv():
    12ca:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <TwoWire::rxBufferIndex>
    12ce:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <TwoWire::rxBufferLength>
    12d2:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <TwoWire::txBufferIndex>
    12d6:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <TwoWire::txBufferLength>
    12da:	0e 94 11 0a 	call	0x1422	; 0x1422 <twi_init>
    12de:	8d ef       	ldi	r24, 0xFD	; 253
    12e0:	98 e0       	ldi	r25, 0x08	; 8
    12e2:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <twi_attachSlaveTxEvent>
    12e6:	83 ed       	ldi	r24, 0xD3	; 211
    12e8:	98 e0       	ldi	r25, 0x08	; 8
    12ea:	0c 94 f5 0a 	jmp	0x15ea	; 0x15ea <twi_attachSlaveRxEvent>

000012ee <TwoWire::beginTransmission(unsigned char)>:
_ZN7TwoWire17beginTransmissionEh():
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <TwoWire::transmitting>
    12f4:	60 93 de 02 	sts	0x02DE, r22	; 0x8002de <TwoWire::txAddress>
    12f8:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <TwoWire::txBufferIndex>
    12fc:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <TwoWire::txBufferLength>
    1300:	08 95       	ret

00001302 <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
    1302:	0f 93       	push	r16
    1304:	06 2f       	mov	r16, r22
    1306:	21 e0       	ldi	r18, 0x01	; 1
    1308:	40 91 bc 02 	lds	r20, 0x02BC	; 0x8002bc <TwoWire::txBufferLength>
    130c:	6e eb       	ldi	r22, 0xBE	; 190
    130e:	72 e0       	ldi	r23, 0x02	; 2
    1310:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <TwoWire::txAddress>
    1314:	0e 94 77 0a 	call	0x14ee	; 0x14ee <twi_writeTo>
    1318:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <TwoWire::txBufferIndex>
    131c:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <TwoWire::txBufferLength>
    1320:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <TwoWire::transmitting>
    1324:	0f 91       	pop	r16
    1326:	08 95       	ret

00001328 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhmhh():
    1328:	4f 92       	push	r4
    132a:	5f 92       	push	r5
    132c:	6f 92       	push	r6
    132e:	7f 92       	push	r7
    1330:	af 92       	push	r10
    1332:	bf 92       	push	r11
    1334:	cf 92       	push	r12
    1336:	ef 92       	push	r14
    1338:	ff 92       	push	r15
    133a:	0f 93       	push	r16
    133c:	1f 93       	push	r17
    133e:	cf 93       	push	r28
    1340:	df 93       	push	r29
    1342:	5c 01       	movw	r10, r24
    1344:	f6 2e       	mov	r15, r22
    1346:	d4 2f       	mov	r29, r20
    1348:	28 01       	movw	r4, r16
    134a:	39 01       	movw	r6, r18
    134c:	ee 20       	and	r14, r14
    134e:	19 f1       	breq	.+70     	; 0x1396 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x6e>
    1350:	0e 94 77 09 	call	0x12ee	; 0x12ee <TwoWire::beginTransmission(unsigned char)>
    1354:	ce 2d       	mov	r28, r14
    1356:	c4 30       	cpi	r28, 0x04	; 4
    1358:	08 f0       	brcs	.+2      	; 0x135c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    135a:	c3 e0       	ldi	r28, 0x03	; 3
    135c:	c1 50       	subi	r28, 0x01	; 1
    135e:	b8 f0       	brcs	.+46     	; 0x138e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x66>
    1360:	28 e0       	ldi	r18, 0x08	; 8
    1362:	c2 9f       	mul	r28, r18
    1364:	c0 01       	movw	r24, r0
    1366:	11 24       	eor	r1, r1
    1368:	a3 01       	movw	r20, r6
    136a:	92 01       	movw	r18, r4
    136c:	04 c0       	rjmp	.+8      	; 0x1376 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x4e>
    136e:	56 95       	lsr	r21
    1370:	47 95       	ror	r20
    1372:	37 95       	ror	r19
    1374:	27 95       	ror	r18
    1376:	8a 95       	dec	r24
    1378:	d2 f7       	brpl	.-12     	; 0x136e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x46>
    137a:	b9 01       	movw	r22, r18
    137c:	d5 01       	movw	r26, r10
    137e:	ed 91       	ld	r30, X+
    1380:	fc 91       	ld	r31, X
    1382:	01 90       	ld	r0, Z+
    1384:	f0 81       	ld	r31, Z
    1386:	e0 2d       	mov	r30, r0
    1388:	c5 01       	movw	r24, r10
    138a:	09 95       	icall
    138c:	e7 cf       	rjmp	.-50     	; 0x135c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    138e:	60 e0       	ldi	r22, 0x00	; 0
    1390:	c5 01       	movw	r24, r10
    1392:	0e 94 81 09 	call	0x1302	; 0x1302 <TwoWire::endTransmission(unsigned char)>
    1396:	4d 2f       	mov	r20, r29
    1398:	d1 32       	cpi	r29, 0x21	; 33
    139a:	08 f0       	brcs	.+2      	; 0x139e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x76>
    139c:	40 e2       	ldi	r20, 0x20	; 32
    139e:	2c 2d       	mov	r18, r12
    13a0:	61 ee       	ldi	r22, 0xE1	; 225
    13a2:	72 e0       	ldi	r23, 0x02	; 2
    13a4:	8f 2d       	mov	r24, r15
    13a6:	0e 94 2f 0a 	call	0x145e	; 0x145e <twi_readFrom>
    13aa:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <TwoWire::rxBufferIndex>
    13ae:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <TwoWire::rxBufferLength>
    13b2:	df 91       	pop	r29
    13b4:	cf 91       	pop	r28
    13b6:	1f 91       	pop	r17
    13b8:	0f 91       	pop	r16
    13ba:	ff 90       	pop	r15
    13bc:	ef 90       	pop	r14
    13be:	cf 90       	pop	r12
    13c0:	bf 90       	pop	r11
    13c2:	af 90       	pop	r10
    13c4:	7f 90       	pop	r7
    13c6:	6f 90       	pop	r6
    13c8:	5f 90       	pop	r5
    13ca:	4f 90       	pop	r4
    13cc:	08 95       	ret

000013ce <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhh():
    13ce:	cf 92       	push	r12
    13d0:	ef 92       	push	r14
    13d2:	0f 93       	push	r16
    13d4:	1f 93       	push	r17
    13d6:	c2 2e       	mov	r12, r18
    13d8:	e1 2c       	mov	r14, r1
    13da:	00 e0       	ldi	r16, 0x00	; 0
    13dc:	10 e0       	ldi	r17, 0x00	; 0
    13de:	98 01       	movw	r18, r16
    13e0:	0e 94 94 09 	call	0x1328	; 0x1328 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>
    13e4:	1f 91       	pop	r17
    13e6:	0f 91       	pop	r16
    13e8:	ef 90       	pop	r14
    13ea:	cf 90       	pop	r12
    13ec:	08 95       	ret

000013ee <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
    13ee:	21 e0       	ldi	r18, 0x01	; 1
    13f0:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

000013f4 <TwoWire::requestFrom(int, int)>:
_ZN7TwoWire11requestFromEii():
    13f4:	21 e0       	ldi	r18, 0x01	; 1
    13f6:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

000013fa <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
    13fa:	61 e0       	ldi	r22, 0x01	; 1
    13fc:	0c 94 81 09 	jmp	0x1302	; 0x1302 <TwoWire::endTransmission(unsigned char)>

00001400 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
_ZN5PrintC4Ev():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1400:	eb ea       	ldi	r30, 0xAB	; 171
    1402:	f2 e0       	ldi	r31, 0x02	; 2
    1404:	13 82       	std	Z+3, r1	; 0x03
    1406:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1408:	88 ee       	ldi	r24, 0xE8	; 232
    140a:	93 e0       	ldi	r25, 0x03	; 3
    140c:	a0 e0       	ldi	r26, 0x00	; 0
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	84 83       	std	Z+4, r24	; 0x04
    1412:	95 83       	std	Z+5, r25	; 0x05
    1414:	a6 83       	std	Z+6, r26	; 0x06
    1416:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC4Ev():
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/Wire.cpp:52
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    1418:	89 e9       	ldi	r24, 0x99	; 153
    141a:	91 e0       	ldi	r25, 0x01	; 1
    141c:	91 83       	std	Z+1, r25	; 0x01
    141e:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN7TwoWire8rxBufferE():
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/Wire.cpp:333
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1420:	08 95       	ret

00001422 <twi_init>:
twi_init():
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1422:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <twi_state>
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <twi_sendStop>
    142c:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <twi_inRepStart>
    1430:	61 e0       	ldi	r22, 0x01	; 1
    1432:	82 e1       	ldi	r24, 0x12	; 18
    1434:	0e 94 01 11 	call	0x2202	; 0x2202 <digitalWrite>
    1438:	61 e0       	ldi	r22, 0x01	; 1
    143a:	83 e1       	ldi	r24, 0x13	; 19
    143c:	0e 94 01 11 	call	0x2202	; 0x2202 <digitalWrite>
    1440:	e9 eb       	ldi	r30, 0xB9	; 185
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	8e 7f       	andi	r24, 0xFE	; 254
    1448:	80 83       	st	Z, r24
    144a:	80 81       	ld	r24, Z
    144c:	8d 7f       	andi	r24, 0xFD	; 253
    144e:	80 83       	st	Z, r24
    1450:	88 e4       	ldi	r24, 0x48	; 72
    1452:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    1456:	85 e4       	ldi	r24, 0x45	; 69
    1458:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    145c:	08 95       	ret

0000145e <twi_readFrom>:
twi_readFrom():
    145e:	41 32       	cpi	r20, 0x21	; 33
    1460:	08 f0       	brcs	.+2      	; 0x1464 <twi_readFrom+0x6>
    1462:	43 c0       	rjmp	.+134    	; 0x14ea <twi_readFrom+0x8c>
    1464:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <twi_state>
    1468:	91 11       	cpse	r25, r1
    146a:	fc cf       	rjmp	.-8      	; 0x1464 <twi_readFrom+0x6>
    146c:	91 e0       	ldi	r25, 0x01	; 1
    146e:	90 93 6e 03 	sts	0x036E, r25	; 0x80036e <twi_state>
    1472:	20 93 6c 03 	sts	0x036C, r18	; 0x80036c <twi_sendStop>
    1476:	2f ef       	ldi	r18, 0xFF	; 255
    1478:	20 93 01 03 	sts	0x0301, r18	; 0x800301 <twi_error>
    147c:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <twi_masterBufferIndex>
    1480:	24 0f       	add	r18, r20
    1482:	20 93 45 03 	sts	0x0345, r18	; 0x800345 <twi_masterBufferLength>
    1486:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <twi_slarw>
    148a:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <twi_slarw>
    148e:	88 0f       	add	r24, r24
    1490:	89 2b       	or	r24, r25
    1492:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <twi_slarw>
    1496:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <twi_inRepStart>
    149a:	81 30       	cpi	r24, 0x01	; 1
    149c:	09 f5       	brne	.+66     	; 0x14e0 <twi_readFrom+0x82>
    149e:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <twi_inRepStart>
    14a2:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <twi_slarw>
    14a6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    14aa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    14ae:	83 fd       	sbrc	r24, 3
    14b0:	f8 cf       	rjmp	.-16     	; 0x14a2 <twi_readFrom+0x44>
    14b2:	85 ec       	ldi	r24, 0xC5	; 197
    14b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    14b8:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <twi_state>
    14bc:	81 30       	cpi	r24, 0x01	; 1
    14be:	e1 f3       	breq	.-8      	; 0x14b8 <twi_readFrom+0x5a>
    14c0:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <twi_masterBufferIndex>
    14c4:	84 17       	cp	r24, r20
    14c6:	10 f4       	brcc	.+4      	; 0x14cc <twi_readFrom+0x6e>
    14c8:	40 91 46 03 	lds	r20, 0x0346	; 0x800346 <twi_masterBufferIndex>
    14cc:	a7 e4       	ldi	r26, 0x47	; 71
    14ce:	b3 e0       	ldi	r27, 0x03	; 3
    14d0:	96 2f       	mov	r25, r22
    14d2:	fb 01       	movw	r30, r22
    14d4:	8e 2f       	mov	r24, r30
    14d6:	89 1b       	sub	r24, r25
    14d8:	84 17       	cp	r24, r20
    14da:	20 f0       	brcs	.+8      	; 0x14e4 <twi_readFrom+0x86>
    14dc:	84 2f       	mov	r24, r20
    14de:	08 95       	ret
    14e0:	85 ee       	ldi	r24, 0xE5	; 229
    14e2:	e8 cf       	rjmp	.-48     	; 0x14b4 <twi_readFrom+0x56>
    14e4:	8d 91       	ld	r24, X+
    14e6:	81 93       	st	Z+, r24
    14e8:	f5 cf       	rjmp	.-22     	; 0x14d4 <twi_readFrom+0x76>
    14ea:	40 e0       	ldi	r20, 0x00	; 0
    14ec:	f7 cf       	rjmp	.-18     	; 0x14dc <twi_readFrom+0x7e>

000014ee <twi_writeTo>:
twi_writeTo():
    14ee:	0f 93       	push	r16
    14f0:	41 32       	cpi	r20, 0x21	; 33
    14f2:	08 f0       	brcs	.+2      	; 0x14f6 <twi_writeTo+0x8>
    14f4:	4b c0       	rjmp	.+150    	; 0x158c <twi_writeTo+0x9e>
    14f6:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <twi_state>
    14fa:	91 11       	cpse	r25, r1
    14fc:	fc cf       	rjmp	.-8      	; 0x14f6 <twi_writeTo+0x8>
    14fe:	92 e0       	ldi	r25, 0x02	; 2
    1500:	90 93 6e 03 	sts	0x036E, r25	; 0x80036e <twi_state>
    1504:	00 93 6c 03 	sts	0x036C, r16	; 0x80036c <twi_sendStop>
    1508:	9f ef       	ldi	r25, 0xFF	; 255
    150a:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <twi_error>
    150e:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <twi_masterBufferIndex>
    1512:	40 93 45 03 	sts	0x0345, r20	; 0x800345 <twi_masterBufferLength>
    1516:	36 2f       	mov	r19, r22
    1518:	a7 e4       	ldi	r26, 0x47	; 71
    151a:	b3 e0       	ldi	r27, 0x03	; 3
    151c:	fb 01       	movw	r30, r22
    151e:	9e 2f       	mov	r25, r30
    1520:	93 1b       	sub	r25, r19
    1522:	94 17       	cp	r25, r20
    1524:	70 f1       	brcs	.+92     	; 0x1582 <twi_writeTo+0x94>
    1526:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <twi_slarw>
    152a:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <twi_slarw>
    152e:	88 0f       	add	r24, r24
    1530:	89 2b       	or	r24, r25
    1532:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <twi_slarw>
    1536:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <twi_inRepStart>
    153a:	81 30       	cpi	r24, 0x01	; 1
    153c:	29 f5       	brne	.+74     	; 0x1588 <twi_writeTo+0x9a>
    153e:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <twi_inRepStart>
    1542:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <twi_slarw>
    1546:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    154a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    154e:	83 fd       	sbrc	r24, 3
    1550:	f8 cf       	rjmp	.-16     	; 0x1542 <twi_writeTo+0x54>
    1552:	85 ec       	ldi	r24, 0xC5	; 197
    1554:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1558:	22 23       	and	r18, r18
    155a:	21 f0       	breq	.+8      	; 0x1564 <twi_writeTo+0x76>
    155c:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <twi_state>
    1560:	82 30       	cpi	r24, 0x02	; 2
    1562:	d1 f3       	breq	.-12     	; 0x1558 <twi_writeTo+0x6a>
    1564:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <twi_error>
    1568:	8f 3f       	cpi	r24, 0xFF	; 255
    156a:	91 f0       	breq	.+36     	; 0x1590 <twi_writeTo+0xa2>
    156c:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <twi_error>
    1570:	80 32       	cpi	r24, 0x20	; 32
    1572:	81 f0       	breq	.+32     	; 0x1594 <twi_writeTo+0xa6>
    1574:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <twi_error>
    1578:	80 33       	cpi	r24, 0x30	; 48
    157a:	71 f0       	breq	.+28     	; 0x1598 <twi_writeTo+0xaa>
    157c:	84 e0       	ldi	r24, 0x04	; 4
    157e:	0f 91       	pop	r16
    1580:	08 95       	ret
    1582:	91 91       	ld	r25, Z+
    1584:	9d 93       	st	X+, r25
    1586:	cb cf       	rjmp	.-106    	; 0x151e <twi_writeTo+0x30>
    1588:	85 ee       	ldi	r24, 0xE5	; 229
    158a:	e4 cf       	rjmp	.-56     	; 0x1554 <twi_writeTo+0x66>
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	f7 cf       	rjmp	.-18     	; 0x157e <twi_writeTo+0x90>
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	f5 cf       	rjmp	.-22     	; 0x157e <twi_writeTo+0x90>
    1594:	82 e0       	ldi	r24, 0x02	; 2
    1596:	f3 cf       	rjmp	.-26     	; 0x157e <twi_writeTo+0x90>
    1598:	83 e0       	ldi	r24, 0x03	; 3
    159a:	f1 cf       	rjmp	.-30     	; 0x157e <twi_writeTo+0x90>

0000159c <twi_transmit>:
twi_transmit():
    159c:	20 91 23 03 	lds	r18, 0x0323	; 0x800323 <twi_txBufferLength>
    15a0:	26 0f       	add	r18, r22
    15a2:	33 27       	eor	r19, r19
    15a4:	33 1f       	adc	r19, r19
    15a6:	21 32       	cpi	r18, 0x21	; 33
    15a8:	31 05       	cpc	r19, r1
    15aa:	ec f4       	brge	.+58     	; 0x15e6 <twi_transmit+0x4a>
    15ac:	20 91 6e 03 	lds	r18, 0x036E	; 0x80036e <twi_state>
    15b0:	fc 01       	movw	r30, r24
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	24 30       	cpi	r18, 0x04	; 4
    15b8:	69 f0       	breq	.+26     	; 0x15d4 <twi_transmit+0x38>
    15ba:	82 e0       	ldi	r24, 0x02	; 2
    15bc:	08 95       	ret
    15be:	a0 91 23 03 	lds	r26, 0x0323	; 0x800323 <twi_txBufferLength>
    15c2:	21 91       	ld	r18, Z+
    15c4:	ac 01       	movw	r20, r24
    15c6:	4b 5d       	subi	r20, 0xDB	; 219
    15c8:	5c 4f       	sbci	r21, 0xFC	; 252
    15ca:	a4 0f       	add	r26, r20
    15cc:	b5 2f       	mov	r27, r21
    15ce:	b1 1d       	adc	r27, r1
    15d0:	2c 93       	st	X, r18
    15d2:	01 96       	adiw	r24, 0x01	; 1
    15d4:	86 17       	cp	r24, r22
    15d6:	98 f3       	brcs	.-26     	; 0x15be <twi_transmit+0x22>
    15d8:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <twi_txBufferLength>
    15dc:	68 0f       	add	r22, r24
    15de:	60 93 23 03 	sts	0x0323, r22	; 0x800323 <twi_txBufferLength>
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	08 95       	ret
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	08 95       	ret

000015ea <twi_attachSlaveRxEvent>:
twi_attachSlaveRxEvent():
    15ea:	90 93 68 03 	sts	0x0368, r25	; 0x800368 <twi_onSlaveReceive+0x1>
    15ee:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <twi_onSlaveReceive>
    15f2:	08 95       	ret

000015f4 <twi_attachSlaveTxEvent>:
twi_attachSlaveTxEvent():
    15f4:	90 93 6a 03 	sts	0x036A, r25	; 0x80036a <twi_onSlaveTransmit+0x1>
    15f8:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <twi_onSlaveTransmit>
    15fc:	08 95       	ret

000015fe <twi_stop>:
twi_stop():
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    15fe:	85 ed       	ldi	r24, 0xD5	; 213
    1600:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:376

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1604:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1608:	84 fd       	sbrc	r24, 4
    160a:	fc cf       	rjmp	.-8      	; 0x1604 <twi_stop+0x6>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    160c:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <twi_state>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:382
}
    1610:	08 95       	ret

00001612 <twi_releaseBus>:
twi_releaseBus():
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1612:	85 ec       	ldi	r24, 0xC5	; 197
    1614:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
    1618:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <twi_state>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:397
}
    161c:	08 95       	ret

0000161e <__vector_24>:
__vector_24():
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:400

ISR(TWI_vect)
{
    161e:	1f 92       	push	r1
    1620:	0f 92       	push	r0
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	0f 92       	push	r0
    1626:	11 24       	eor	r1, r1
    1628:	2f 93       	push	r18
    162a:	3f 93       	push	r19
    162c:	4f 93       	push	r20
    162e:	5f 93       	push	r21
    1630:	6f 93       	push	r22
    1632:	7f 93       	push	r23
    1634:	8f 93       	push	r24
    1636:	9f 93       	push	r25
    1638:	af 93       	push	r26
    163a:	bf 93       	push	r27
    163c:	ef 93       	push	r30
    163e:	ff 93       	push	r31
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:401
  switch(TW_STATUS){
    1640:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    1644:	88 7f       	andi	r24, 0xF8	; 248
    1646:	80 36       	cpi	r24, 0x60	; 96
    1648:	09 f4       	brne	.+2      	; 0x164c <__vector_24+0x2e>
    164a:	4c c0       	rjmp	.+152    	; 0x16e4 <__vector_24+0xc6>
    164c:	08 f0       	brcs	.+2      	; 0x1650 <__vector_24+0x32>
    164e:	3f c0       	rjmp	.+126    	; 0x16ce <__vector_24+0xb0>
    1650:	88 32       	cpi	r24, 0x28	; 40
    1652:	09 f4       	brne	.+2      	; 0x1656 <__vector_24+0x38>
    1654:	a8 c0       	rjmp	.+336    	; 0x17a6 <__vector_24+0x188>
    1656:	18 f5       	brcc	.+70     	; 0x169e <__vector_24+0x80>
    1658:	80 31       	cpi	r24, 0x10	; 16
    165a:	09 f4       	brne	.+2      	; 0x165e <__vector_24+0x40>
    165c:	9c c0       	rjmp	.+312    	; 0x1796 <__vector_24+0x178>
    165e:	b8 f4       	brcc	.+46     	; 0x168e <__vector_24+0x70>
    1660:	88 23       	and	r24, r24
    1662:	09 f4       	brne	.+2      	; 0x1666 <__vector_24+0x48>
    1664:	f9 c0       	rjmp	.+498    	; 0x1858 <__vector_24+0x23a>
    1666:	88 30       	cpi	r24, 0x08	; 8
    1668:	09 f4       	brne	.+2      	; 0x166c <__vector_24+0x4e>
    166a:	95 c0       	rjmp	.+298    	; 0x1796 <__vector_24+0x178>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    166c:	ff 91       	pop	r31
    166e:	ef 91       	pop	r30
    1670:	bf 91       	pop	r27
    1672:	af 91       	pop	r26
    1674:	9f 91       	pop	r25
    1676:	8f 91       	pop	r24
    1678:	7f 91       	pop	r23
    167a:	6f 91       	pop	r22
    167c:	5f 91       	pop	r21
    167e:	4f 91       	pop	r20
    1680:	3f 91       	pop	r19
    1682:	2f 91       	pop	r18
    1684:	0f 90       	pop	r0
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	0f 90       	pop	r0
    168a:	1f 90       	pop	r1
    168c:	18 95       	reti
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    168e:	88 31       	cpi	r24, 0x18	; 24
    1690:	09 f4       	brne	.+2      	; 0x1694 <__vector_24+0x76>
    1692:	89 c0       	rjmp	.+274    	; 0x17a6 <__vector_24+0x188>
    1694:	80 32       	cpi	r24, 0x20	; 32
    1696:	51 f7       	brne	.-44     	; 0x166c <__vector_24+0x4e>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1698:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <twi_error>
    169c:	15 c0       	rjmp	.+42     	; 0x16c8 <__vector_24+0xaa>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    169e:	80 34       	cpi	r24, 0x40	; 64
    16a0:	09 f4       	brne	.+2      	; 0x16a4 <__vector_24+0x86>
    16a2:	9e c0       	rjmp	.+316    	; 0x17e0 <__vector_24+0x1c2>
    16a4:	48 f4       	brcc	.+18     	; 0x16b8 <__vector_24+0x9a>
    16a6:	80 33       	cpi	r24, 0x30	; 48
    16a8:	b9 f3       	breq	.-18     	; 0x1698 <__vector_24+0x7a>
    16aa:	88 33       	cpi	r24, 0x38	; 56
    16ac:	f9 f6       	brne	.-66     	; 0x166c <__vector_24+0x4e>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    16ae:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <twi_error>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:441
      twi_releaseBus();
    16b2:	0e 94 09 0b 	call	0x1612	; 0x1612 <twi_releaseBus>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:442
      break;
    16b6:	da cf       	rjmp	.-76     	; 0x166c <__vector_24+0x4e>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    16b8:	80 35       	cpi	r24, 0x50	; 80
    16ba:	09 f4       	brne	.+2      	; 0x16be <__vector_24+0xa0>
    16bc:	85 c0       	rjmp	.+266    	; 0x17c8 <__vector_24+0x1aa>
    16be:	88 35       	cpi	r24, 0x58	; 88
    16c0:	09 f4       	brne	.+2      	; 0x16c4 <__vector_24+0xa6>
    16c2:	96 c0       	rjmp	.+300    	; 0x17f0 <__vector_24+0x1d2>
    16c4:	88 34       	cpi	r24, 0x48	; 72
    16c6:	91 f6       	brne	.-92     	; 0x166c <__vector_24+0x4e>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    16c8:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <twi_stop>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:562
      break;
  }
}
    16cc:	cf cf       	rjmp	.-98     	; 0x166c <__vector_24+0x4e>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    16ce:	88 39       	cpi	r24, 0x98	; 152
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <__vector_24+0xb6>
    16d2:	8c c0       	rjmp	.+280    	; 0x17ec <__vector_24+0x1ce>
    16d4:	38 f5       	brcc	.+78     	; 0x1724 <__vector_24+0x106>
    16d6:	88 37       	cpi	r24, 0x78	; 120
    16d8:	29 f0       	breq	.+10     	; 0x16e4 <__vector_24+0xc6>
    16da:	50 f4       	brcc	.+20     	; 0x16f0 <__vector_24+0xd2>
    16dc:	88 36       	cpi	r24, 0x68	; 104
    16de:	11 f0       	breq	.+4      	; 0x16e4 <__vector_24+0xc6>
    16e0:	80 37       	cpi	r24, 0x70	; 112
    16e2:	21 f6       	brne	.-120    	; 0x166c <__vector_24+0x4e>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    16e4:	83 e0       	ldi	r24, 0x03	; 3
    16e6:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <twi_state>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    16ea:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <twi_rxBufferIndex>
    16ee:	57 c0       	rjmp	.+174    	; 0x179e <__vector_24+0x180>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    16f0:	88 38       	cpi	r24, 0x88	; 136
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <__vector_24+0xd8>
    16f4:	7b c0       	rjmp	.+246    	; 0x17ec <__vector_24+0x1ce>
    16f6:	80 39       	cpi	r24, 0x90	; 144
    16f8:	19 f0       	breq	.+6      	; 0x1700 <__vector_24+0xe2>
    16fa:	80 38       	cpi	r24, 0x80	; 128
    16fc:	09 f0       	breq	.+2      	; 0x1700 <__vector_24+0xe2>
    16fe:	b6 cf       	rjmp	.-148    	; 0x166c <__vector_24+0x4e>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    1700:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <twi_rxBufferIndex>
    1704:	80 32       	cpi	r24, 0x20	; 32
    1706:	08 f0       	brcs	.+2      	; 0x170a <__vector_24+0xec>
    1708:	71 c0       	rjmp	.+226    	; 0x17ec <__vector_24+0x1ce>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    170a:	e0 91 02 03 	lds	r30, 0x0302	; 0x800302 <twi_rxBufferIndex>
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	8e 0f       	add	r24, r30
    1712:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <twi_rxBufferIndex>
    1716:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	ed 5f       	subi	r30, 0xFD	; 253
    171e:	fc 4f       	sbci	r31, 0xFC	; 252
    1720:	80 83       	st	Z, r24
    1722:	3d c0       	rjmp	.+122    	; 0x179e <__vector_24+0x180>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1724:	80 3b       	cpi	r24, 0xB0	; 176
    1726:	39 f0       	breq	.+14     	; 0x1736 <__vector_24+0x118>
    1728:	e0 f4       	brcc	.+56     	; 0x1762 <__vector_24+0x144>
    172a:	80 3a       	cpi	r24, 0xA0	; 160
    172c:	09 f4       	brne	.+2      	; 0x1730 <__vector_24+0x112>
    172e:	79 c0       	rjmp	.+242    	; 0x1822 <__vector_24+0x204>
    1730:	88 3a       	cpi	r24, 0xA8	; 168
    1732:	09 f0       	breq	.+2      	; 0x1736 <__vector_24+0x118>
    1734:	9b cf       	rjmp	.-202    	; 0x166c <__vector_24+0x4e>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:521
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1736:	84 e0       	ldi	r24, 0x04	; 4
    1738:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <twi_state>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    173c:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <twi_txBufferIndex>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1740:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <twi_txBufferLength>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1744:	e0 91 69 03 	lds	r30, 0x0369	; 0x800369 <twi_onSlaveTransmit>
    1748:	f0 91 6a 03 	lds	r31, 0x036A	; 0x80036a <twi_onSlaveTransmit+0x1>
    174c:	09 95       	icall
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    174e:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <twi_txBufferLength>
    1752:	81 11       	cpse	r24, r1
    1754:	0f c0       	rjmp	.+30     	; 0x1774 <__vector_24+0x156>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:531
        twi_txBufferLength = 1;
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <twi_txBufferLength>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:532
        twi_txBuffer[0] = 0x00;
    175c:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <twi_txBuffer>
    1760:	09 c0       	rjmp	.+18     	; 0x1774 <__vector_24+0x156>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1762:	80 3c       	cpi	r24, 0xC0	; 192
    1764:	09 f4       	brne	.+2      	; 0x1768 <__vector_24+0x14a>
    1766:	76 c0       	rjmp	.+236    	; 0x1854 <__vector_24+0x236>
    1768:	88 3c       	cpi	r24, 0xC8	; 200
    176a:	09 f4       	brne	.+2      	; 0x176e <__vector_24+0x150>
    176c:	73 c0       	rjmp	.+230    	; 0x1854 <__vector_24+0x236>
    176e:	88 3b       	cpi	r24, 0xB8	; 184
    1770:	09 f0       	breq	.+2      	; 0x1774 <__vector_24+0x156>
    1772:	7c cf       	rjmp	.-264    	; 0x166c <__vector_24+0x4e>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1774:	e0 91 24 03 	lds	r30, 0x0324	; 0x800324 <twi_txBufferIndex>
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	8e 0f       	add	r24, r30
    177c:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <twi_txBufferIndex>
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	eb 5d       	subi	r30, 0xDB	; 219
    1784:	fc 4f       	sbci	r31, 0xFC	; 252
    1786:	80 81       	ld	r24, Z
    1788:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    178c:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <twi_txBufferIndex>
    1790:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <twi_txBufferLength>
    1794:	29 c0       	rjmp	.+82     	; 0x17e8 <__vector_24+0x1ca>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1796:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <twi_slarw>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    179a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
twi_reply():
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    179e:	85 ec       	ldi	r24, 0xC5	; 197
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    17a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    17a4:	63 cf       	rjmp	.-314    	; 0x166c <__vector_24+0x4e>
__vector_24():
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    17a6:	90 91 46 03 	lds	r25, 0x0346	; 0x800346 <twi_masterBufferIndex>
    17aa:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <twi_masterBufferLength>
    17ae:	98 17       	cp	r25, r24
    17b0:	58 f5       	brcc	.+86     	; 0x1808 <__vector_24+0x1ea>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    17b2:	e0 91 46 03 	lds	r30, 0x0346	; 0x800346 <twi_masterBufferIndex>
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	8e 0f       	add	r24, r30
    17ba:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <twi_masterBufferIndex>
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	e9 5b       	subi	r30, 0xB9	; 185
    17c2:	fc 4f       	sbci	r31, 0xFC	; 252
    17c4:	80 81       	ld	r24, Z
    17c6:	e9 cf       	rjmp	.-46     	; 0x179a <__vector_24+0x17c>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    17c8:	e0 91 46 03 	lds	r30, 0x0346	; 0x800346 <twi_masterBufferIndex>
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	8e 0f       	add	r24, r30
    17d0:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <twi_masterBufferIndex>
    17d4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	e9 5b       	subi	r30, 0xB9	; 185
    17dc:	fc 4f       	sbci	r31, 0xFC	; 252
    17de:	80 83       	st	Z, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    17e0:	90 91 46 03 	lds	r25, 0x0346	; 0x800346 <twi_masterBufferIndex>
    17e4:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <twi_masterBufferLength>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    17e8:	98 17       	cp	r25, r24
    17ea:	c8 f2       	brcs	.-78     	; 0x179e <__vector_24+0x180>
twi_reply():
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    17ec:	85 e8       	ldi	r24, 0x85	; 133
    17ee:	d8 cf       	rjmp	.-80     	; 0x17a0 <__vector_24+0x182>
__vector_24():
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    17f0:	e0 91 46 03 	lds	r30, 0x0346	; 0x800346 <twi_masterBufferIndex>
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	8e 0f       	add	r24, r30
    17f8:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <twi_masterBufferIndex>
    17fc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	e9 5b       	subi	r30, 0xB9	; 185
    1804:	fc 4f       	sbci	r31, 0xFC	; 252
    1806:	80 83       	st	Z, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:460
  if (twi_sendStop)
    1808:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <twi_sendStop>
    180c:	81 11       	cpse	r24, r1
    180e:	5c cf       	rjmp	.-328    	; 0x16c8 <__vector_24+0xaa>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're gonna send the START
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <twi_inRepStart>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we 
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1816:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1818:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
__vector_24():
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    181c:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <twi_state>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:552
      break;
    1820:	25 cf       	rjmp	.-438    	; 0x166c <__vector_24+0x4e>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:501
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1822:	0e 94 09 0b 	call	0x1612	; 0x1612 <twi_releaseBus>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:503
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    1826:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <twi_rxBufferIndex>
    182a:	80 32       	cpi	r24, 0x20	; 32
    182c:	30 f4       	brcc	.+12     	; 0x183a <__vector_24+0x21c>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    182e:	e0 91 02 03 	lds	r30, 0x0302	; 0x800302 <twi_rxBufferIndex>
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	ed 5f       	subi	r30, 0xFD	; 253
    1836:	fc 4f       	sbci	r31, 0xFC	; 252
    1838:	10 82       	st	Z, r1
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    183a:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <twi_rxBufferIndex>
    183e:	70 e0       	ldi	r23, 0x00	; 0
    1840:	e0 91 67 03 	lds	r30, 0x0367	; 0x800367 <twi_onSlaveReceive>
    1844:	f0 91 68 03 	lds	r31, 0x0368	; 0x800368 <twi_onSlaveReceive+0x1>
    1848:	83 e0       	ldi	r24, 0x03	; 3
    184a:	93 e0       	ldi	r25, 0x03	; 3
    184c:	09 95       	icall
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    184e:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <twi_rxBufferIndex>
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:510
      break;
    1852:	0c cf       	rjmp	.-488    	; 0x166c <__vector_24+0x4e>
twi_reply():
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1854:	85 ec       	ldi	r24, 0xC5	; 197
    1856:	e0 cf       	rjmp	.-64     	; 0x1818 <__vector_24+0x1fa>
__vector_24():
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1858:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <twi_error>
    185c:	35 cf       	rjmp	.-406    	; 0x16c8 <__vector_24+0xaa>

0000185e <QMC5883LCompass::QMC5883LCompass()>:
_ZN15QMC5883LCompassC2Ev():
/home/fluxion9/Arduino/libraries/QMC5883LCompass-master/src/QMC5883LCompass.cpp:125
	
	@since v0.1;
**/
// Reset the chip
void QMC5883LCompass::setReset(){
	_writeReg(0x0A,0x80);
    185e:	dc 01       	movw	r26, r24
    1860:	1c 92       	st	X, r1
    1862:	85 e0       	ldi	r24, 0x05	; 5
    1864:	11 96       	adiw	r26, 0x01	; 1
    1866:	8c 93       	st	X, r24
    1868:	11 97       	sbiw	r26, 0x01	; 1
    186a:	12 96       	adiw	r26, 0x02	; 2
    186c:	1c 92       	st	X, r1
    186e:	12 97       	sbiw	r26, 0x02	; 2
    1870:	8d e0       	ldi	r24, 0x0D	; 13
    1872:	13 96       	adiw	r26, 0x03	; 3
    1874:	8c 93       	st	X, r24
    1876:	13 97       	sbiw	r26, 0x03	; 3
    1878:	15 96       	adiw	r26, 0x05	; 5
    187a:	1c 92       	st	X, r1
    187c:	1e 92       	st	-X, r1
    187e:	14 97       	sbiw	r26, 0x04	; 4
    1880:	17 96       	adiw	r26, 0x07	; 7
    1882:	1c 92       	st	X, r1
    1884:	1e 92       	st	-X, r1
    1886:	16 97       	sbiw	r26, 0x06	; 6
    1888:	19 96       	adiw	r26, 0x09	; 9
    188a:	1c 92       	st	X, r1
    188c:	1e 92       	st	-X, r1
    188e:	18 97       	sbiw	r26, 0x08	; 8
    1890:	fd 01       	movw	r30, r26
    1892:	ea 5b       	subi	r30, 0xBA	; 186
    1894:	ff 4f       	sbci	r31, 0xFF	; 255
    1896:	11 82       	std	Z+1, r1	; 0x01
    1898:	10 82       	st	Z, r1
    189a:	32 96       	adiw	r30, 0x02	; 2
    189c:	10 82       	st	Z, r1
    189e:	11 82       	std	Z+1, r1	; 0x01
    18a0:	12 82       	std	Z+2, r1	; 0x02
    18a2:	13 82       	std	Z+3, r1	; 0x03
    18a4:	34 96       	adiw	r30, 0x04	; 4
    18a6:	10 82       	st	Z, r1
    18a8:	11 82       	std	Z+1, r1	; 0x01
    18aa:	12 82       	std	Z+2, r1	; 0x02
    18ac:	13 82       	std	Z+3, r1	; 0x03
    18ae:	34 96       	adiw	r30, 0x04	; 4
    18b0:	10 82       	st	Z, r1
    18b2:	11 82       	std	Z+1, r1	; 0x01
    18b4:	12 82       	std	Z+2, r1	; 0x02
    18b6:	13 82       	std	Z+3, r1	; 0x03
    18b8:	34 96       	adiw	r30, 0x04	; 4
    18ba:	11 82       	std	Z+1, r1	; 0x01
    18bc:	10 82       	st	Z, r1
    18be:	32 96       	adiw	r30, 0x02	; 2
    18c0:	11 82       	std	Z+1, r1	; 0x01
    18c2:	10 82       	st	Z, r1
    18c4:	32 96       	adiw	r30, 0x02	; 2
    18c6:	11 82       	std	Z+1, r1	; 0x01
    18c8:	10 82       	st	Z, r1
    18ca:	32 96       	adiw	r30, 0x02	; 2
    18cc:	10 82       	st	Z, r1
    18ce:	a3 59       	subi	r26, 0x93	; 147
    18d0:	bf 4f       	sbci	r27, 0xFF	; 255
    18d2:	80 e3       	ldi	r24, 0x30	; 48
    18d4:	e6 e0       	ldi	r30, 0x06	; 6
    18d6:	f1 e0       	ldi	r31, 0x01	; 1
    18d8:	01 90       	ld	r0, Z+
    18da:	0d 92       	st	X+, r0
    18dc:	8a 95       	dec	r24
    18de:	e1 f7       	brne	.-8      	; 0x18d8 <QMC5883LCompass::QMC5883LCompass()+0x7a>
    18e0:	08 95       	ret

000018e2 <QMC5883LCompass::_applyCalibration()>:
_ZN15QMC5883LCompass17_applyCalibrationEv():
    18e2:	2f 92       	push	r2
    18e4:	3f 92       	push	r3
    18e6:	4f 92       	push	r4
    18e8:	5f 92       	push	r5
    18ea:	6f 92       	push	r6
    18ec:	7f 92       	push	r7
    18ee:	8f 92       	push	r8
    18f0:	9f 92       	push	r9
    18f2:	af 92       	push	r10
    18f4:	bf 92       	push	r11
    18f6:	cf 92       	push	r12
    18f8:	df 92       	push	r13
    18fa:	ef 92       	push	r14
    18fc:	ff 92       	push	r15
    18fe:	0f 93       	push	r16
    1900:	1f 93       	push	r17
    1902:	cf 93       	push	r28
    1904:	df 93       	push	r29
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	2c 97       	sbiw	r28, 0x0c	; 12
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	f8 94       	cli
    1910:	de bf       	out	0x3e, r29	; 62
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	cd bf       	out	0x3d, r28	; 61
    1916:	9c 87       	std	Y+12, r25	; 0x0c
    1918:	8b 87       	std	Y+11, r24	; 0x0b
    191a:	fc 01       	movw	r30, r24
    191c:	e5 5a       	subi	r30, 0xA5	; 165
    191e:	ff 4f       	sbci	r31, 0xFF	; 255
    1920:	c0 80       	ld	r12, Z
    1922:	d1 80       	ldd	r13, Z+1	; 0x01
    1924:	32 96       	adiw	r30, 0x02	; 2
    1926:	a0 80       	ld	r10, Z
    1928:	b1 80       	ldd	r11, Z+1	; 0x01
    192a:	32 96       	adiw	r30, 0x02	; 2
    192c:	00 81       	ld	r16, Z
    192e:	11 81       	ldd	r17, Z+1	; 0x01
    1930:	32 96       	adiw	r30, 0x02	; 2
    1932:	20 80       	ld	r2, Z
    1934:	31 80       	ldd	r3, Z+1	; 0x01
    1936:	32 96       	adiw	r30, 0x02	; 2
    1938:	20 81       	ld	r18, Z
    193a:	31 81       	ldd	r19, Z+1	; 0x01
    193c:	3a 83       	std	Y+2, r19	; 0x02
    193e:	29 83       	std	Y+1, r18	; 0x01
    1940:	32 96       	adiw	r30, 0x02	; 2
    1942:	80 81       	ld	r24, Z
    1944:	91 81       	ldd	r25, Z+1	; 0x01
    1946:	9c 83       	std	Y+4, r25	; 0x04
    1948:	8b 83       	std	Y+3, r24	; 0x03
    194a:	75 01       	movw	r14, r10
    194c:	ec 18       	sub	r14, r12
    194e:	fd 08       	sbc	r15, r13
    1950:	f7 fe       	sbrs	r15, 7
    1952:	03 c0       	rjmp	.+6      	; 0x195a <QMC5883LCompass::_applyCalibration()+0x78>
    1954:	9f ef       	ldi	r25, 0xFF	; 255
    1956:	e9 1a       	sub	r14, r25
    1958:	f9 0a       	sbc	r15, r25
    195a:	f5 94       	asr	r15
    195c:	e7 94       	ror	r14
    195e:	b1 01       	movw	r22, r2
    1960:	60 1b       	sub	r22, r16
    1962:	71 0b       	sbc	r23, r17
    1964:	77 ff       	sbrs	r23, 7
    1966:	02 c0       	rjmp	.+4      	; 0x196c <QMC5883LCompass::_applyCalibration()+0x8a>
    1968:	6f 5f       	subi	r22, 0xFF	; 255
    196a:	7f 4f       	sbci	r23, 0xFF	; 255
    196c:	fb 01       	movw	r30, r22
    196e:	f5 95       	asr	r31
    1970:	e7 95       	ror	r30
    1972:	fe 83       	std	Y+6, r31	; 0x06
    1974:	ed 83       	std	Y+5, r30	; 0x05
    1976:	6b 81       	ldd	r22, Y+3	; 0x03
    1978:	7c 81       	ldd	r23, Y+4	; 0x04
    197a:	29 81       	ldd	r18, Y+1	; 0x01
    197c:	3a 81       	ldd	r19, Y+2	; 0x02
    197e:	62 1b       	sub	r22, r18
    1980:	73 0b       	sbc	r23, r19
    1982:	77 ff       	sbrs	r23, 7
    1984:	02 c0       	rjmp	.+4      	; 0x198a <QMC5883LCompass::_applyCalibration()+0xa8>
    1986:	6f 5f       	subi	r22, 0xFF	; 255
    1988:	7f 4f       	sbci	r23, 0xFF	; 255
    198a:	cb 01       	movw	r24, r22
    198c:	95 95       	asr	r25
    198e:	87 95       	ror	r24
    1990:	98 87       	std	Y+8, r25	; 0x08
    1992:	8f 83       	std	Y+7, r24	; 0x07
    1994:	8d 81       	ldd	r24, Y+5	; 0x05
    1996:	9e 81       	ldd	r25, Y+6	; 0x06
    1998:	8e 0d       	add	r24, r14
    199a:	9f 1d       	adc	r25, r15
    199c:	ef 81       	ldd	r30, Y+7	; 0x07
    199e:	f8 85       	ldd	r31, Y+8	; 0x08
    19a0:	8e 0f       	add	r24, r30
    19a2:	9f 1f       	adc	r25, r31
    19a4:	63 e0       	ldi	r22, 0x03	; 3
    19a6:	70 e0       	ldi	r23, 0x00	; 0
    19a8:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <__divmodhi4>
    19ac:	07 2e       	mov	r0, r23
    19ae:	00 0c       	add	r0, r0
    19b0:	88 0b       	sbc	r24, r24
    19b2:	99 0b       	sbc	r25, r25
    19b4:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__floatsisf>
    19b8:	2b 01       	movw	r4, r22
    19ba:	3c 01       	movw	r6, r24
    19bc:	2b 85       	ldd	r18, Y+11	; 0x0b
    19be:	3c 85       	ldd	r19, Y+12	; 0x0c
    19c0:	29 59       	subi	r18, 0x99	; 153
    19c2:	3f 4f       	sbci	r19, 0xFF	; 255
    19c4:	3a 87       	std	Y+10, r19	; 0x0a
    19c6:	29 87       	std	Y+9, r18	; 0x09
    19c8:	ca 0c       	add	r12, r10
    19ca:	db 1c       	adc	r13, r11
    19cc:	d7 fe       	sbrs	r13, 7
    19ce:	03 c0       	rjmp	.+6      	; 0x19d6 <QMC5883LCompass::_applyCalibration()+0xf4>
    19d0:	3f ef       	ldi	r19, 0xFF	; 255
    19d2:	c3 1a       	sub	r12, r19
    19d4:	d3 0a       	sbc	r13, r19
    19d6:	d5 94       	asr	r13
    19d8:	c7 94       	ror	r12
    19da:	eb 85       	ldd	r30, Y+11	; 0x0b
    19dc:	fc 85       	ldd	r31, Y+12	; 0x0c
    19de:	64 81       	ldd	r22, Z+4	; 0x04
    19e0:	75 81       	ldd	r23, Z+5	; 0x05
    19e2:	6c 19       	sub	r22, r12
    19e4:	7d 09       	sbc	r23, r13
    19e6:	07 2e       	mov	r0, r23
    19e8:	00 0c       	add	r0, r0
    19ea:	88 0b       	sbc	r24, r24
    19ec:	99 0b       	sbc	r25, r25
    19ee:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__floatsisf>
    19f2:	4b 01       	movw	r8, r22
    19f4:	5c 01       	movw	r10, r24
    19f6:	b7 01       	movw	r22, r14
    19f8:	ff 0c       	add	r15, r15
    19fa:	88 0b       	sbc	r24, r24
    19fc:	99 0b       	sbc	r25, r25
    19fe:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__floatsisf>
    1a02:	9b 01       	movw	r18, r22
    1a04:	ac 01       	movw	r20, r24
    1a06:	c3 01       	movw	r24, r6
    1a08:	b2 01       	movw	r22, r4
    1a0a:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <__divsf3>
    1a0e:	9b 01       	movw	r18, r22
    1a10:	ac 01       	movw	r20, r24
    1a12:	c5 01       	movw	r24, r10
    1a14:	b4 01       	movw	r22, r8
    1a16:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1a1a:	0e 94 34 18 	call	0x3068	; 0x3068 <__fixsfsi>
    1a1e:	e9 85       	ldd	r30, Y+9	; 0x09
    1a20:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a22:	71 83       	std	Z+1, r23	; 0x01
    1a24:	60 83       	st	Z, r22
    1a26:	eb 84       	ldd	r14, Y+11	; 0x0b
    1a28:	fc 84       	ldd	r15, Y+12	; 0x0c
    1a2a:	f9 e6       	ldi	r31, 0x69	; 105
    1a2c:	ef 0e       	add	r14, r31
    1a2e:	f1 1c       	adc	r15, r1
    1a30:	02 0d       	add	r16, r2
    1a32:	13 1d       	adc	r17, r3
    1a34:	17 ff       	sbrs	r17, 7
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <QMC5883LCompass::_applyCalibration()+0x15a>
    1a38:	0f 5f       	subi	r16, 0xFF	; 255
    1a3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3c:	15 95       	asr	r17
    1a3e:	07 95       	ror	r16
    1a40:	eb 85       	ldd	r30, Y+11	; 0x0b
    1a42:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a44:	66 81       	ldd	r22, Z+6	; 0x06
    1a46:	77 81       	ldd	r23, Z+7	; 0x07
    1a48:	60 1b       	sub	r22, r16
    1a4a:	71 0b       	sbc	r23, r17
    1a4c:	07 2e       	mov	r0, r23
    1a4e:	00 0c       	add	r0, r0
    1a50:	88 0b       	sbc	r24, r24
    1a52:	99 0b       	sbc	r25, r25
    1a54:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__floatsisf>
    1a58:	4b 01       	movw	r8, r22
    1a5a:	5c 01       	movw	r10, r24
    1a5c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a5e:	3e 81       	ldd	r19, Y+6	; 0x06
    1a60:	b9 01       	movw	r22, r18
    1a62:	33 0f       	add	r19, r19
    1a64:	88 0b       	sbc	r24, r24
    1a66:	99 0b       	sbc	r25, r25
    1a68:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__floatsisf>
    1a6c:	9b 01       	movw	r18, r22
    1a6e:	ac 01       	movw	r20, r24
    1a70:	c3 01       	movw	r24, r6
    1a72:	b2 01       	movw	r22, r4
    1a74:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <__divsf3>
    1a78:	9b 01       	movw	r18, r22
    1a7a:	ac 01       	movw	r20, r24
    1a7c:	c5 01       	movw	r24, r10
    1a7e:	b4 01       	movw	r22, r8
    1a80:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1a84:	0e 94 34 18 	call	0x3068	; 0x3068 <__fixsfsi>
    1a88:	f7 01       	movw	r30, r14
    1a8a:	71 83       	std	Z+1, r23	; 0x01
    1a8c:	60 83       	st	Z, r22
    1a8e:	0b 85       	ldd	r16, Y+11	; 0x0b
    1a90:	1c 85       	ldd	r17, Y+12	; 0x0c
    1a92:	05 59       	subi	r16, 0x95	; 149
    1a94:	1f 4f       	sbci	r17, 0xFF	; 255
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a9e:	82 0f       	add	r24, r18
    1aa0:	93 1f       	adc	r25, r19
    1aa2:	97 fd       	sbrc	r25, 7
    1aa4:	01 96       	adiw	r24, 0x01	; 1
    1aa6:	95 95       	asr	r25
    1aa8:	87 95       	ror	r24
    1aaa:	eb 85       	ldd	r30, Y+11	; 0x0b
    1aac:	fc 85       	ldd	r31, Y+12	; 0x0c
    1aae:	60 85       	ldd	r22, Z+8	; 0x08
    1ab0:	71 85       	ldd	r23, Z+9	; 0x09
    1ab2:	68 1b       	sub	r22, r24
    1ab4:	79 0b       	sbc	r23, r25
    1ab6:	07 2e       	mov	r0, r23
    1ab8:	00 0c       	add	r0, r0
    1aba:	88 0b       	sbc	r24, r24
    1abc:	99 0b       	sbc	r25, r25
    1abe:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__floatsisf>
    1ac2:	6b 01       	movw	r12, r22
    1ac4:	7c 01       	movw	r14, r24
    1ac6:	2f 81       	ldd	r18, Y+7	; 0x07
    1ac8:	38 85       	ldd	r19, Y+8	; 0x08
    1aca:	b9 01       	movw	r22, r18
    1acc:	33 0f       	add	r19, r19
    1ace:	88 0b       	sbc	r24, r24
    1ad0:	99 0b       	sbc	r25, r25
    1ad2:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__floatsisf>
    1ad6:	9b 01       	movw	r18, r22
    1ad8:	ac 01       	movw	r20, r24
    1ada:	c3 01       	movw	r24, r6
    1adc:	b2 01       	movw	r22, r4
    1ade:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <__divsf3>
    1ae2:	9b 01       	movw	r18, r22
    1ae4:	ac 01       	movw	r20, r24
    1ae6:	c7 01       	movw	r24, r14
    1ae8:	b6 01       	movw	r22, r12
    1aea:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1aee:	0e 94 34 18 	call	0x3068	; 0x3068 <__fixsfsi>
    1af2:	f8 01       	movw	r30, r16
    1af4:	71 83       	std	Z+1, r23	; 0x01
    1af6:	60 83       	st	Z, r22
    1af8:	2c 96       	adiw	r28, 0x0c	; 12
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	f8 94       	cli
    1afe:	de bf       	out	0x3e, r29	; 62
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	cd bf       	out	0x3d, r28	; 61
    1b04:	df 91       	pop	r29
    1b06:	cf 91       	pop	r28
    1b08:	1f 91       	pop	r17
    1b0a:	0f 91       	pop	r16
    1b0c:	ff 90       	pop	r15
    1b0e:	ef 90       	pop	r14
    1b10:	df 90       	pop	r13
    1b12:	cf 90       	pop	r12
    1b14:	bf 90       	pop	r11
    1b16:	af 90       	pop	r10
    1b18:	9f 90       	pop	r9
    1b1a:	8f 90       	pop	r8
    1b1c:	7f 90       	pop	r7
    1b1e:	6f 90       	pop	r6
    1b20:	5f 90       	pop	r5
    1b22:	4f 90       	pop	r4
    1b24:	3f 90       	pop	r3
    1b26:	2f 90       	pop	r2
    1b28:	08 95       	ret

00001b2a <QMC5883LCompass::_smoothing()>:
_ZN15QMC5883LCompass10_smoothingEv():
    1b2a:	2f 92       	push	r2
    1b2c:	3f 92       	push	r3
    1b2e:	4f 92       	push	r4
    1b30:	5f 92       	push	r5
    1b32:	6f 92       	push	r6
    1b34:	7f 92       	push	r7
    1b36:	8f 92       	push	r8
    1b38:	9f 92       	push	r9
    1b3a:	af 92       	push	r10
    1b3c:	bf 92       	push	r11
    1b3e:	cf 92       	push	r12
    1b40:	df 92       	push	r13
    1b42:	ef 92       	push	r14
    1b44:	ff 92       	push	r15
    1b46:	0f 93       	push	r16
    1b48:	1f 93       	push	r17
    1b4a:	cf 93       	push	r28
    1b4c:	df 93       	push	r29
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
    1b52:	2d 97       	sbiw	r28, 0x0d	; 13
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	cd bf       	out	0x3d, r28	; 61
    1b5e:	9d 87       	std	Y+13, r25	; 0x0d
    1b60:	8c 87       	std	Y+12, r24	; 0x0c
    1b62:	fc 01       	movw	r30, r24
    1b64:	81 80       	ldd	r8, Z+1	; 0x01
    1b66:	c8 2c       	mov	r12, r8
    1b68:	d1 2c       	mov	r13, r1
    1b6a:	ea 5b       	subi	r30, 0xBA	; 186
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	80 81       	ld	r24, Z
    1b70:	91 81       	ldd	r25, Z+1	; 0x01
    1b72:	8c 15       	cp	r24, r12
    1b74:	9d 05       	cpc	r25, r13
    1b76:	14 f0       	brlt	.+4      	; 0x1b7c <QMC5883LCompass::_smoothing()+0x52>
    1b78:	11 82       	std	Z+1, r1	; 0x01
    1b7a:	10 82       	st	Z, r1
    1b7c:	ac 85       	ldd	r26, Y+12	; 0x0c
    1b7e:	bd 85       	ldd	r27, Y+13	; 0x0d
    1b80:	a6 5a       	subi	r26, 0xA6	; 166
    1b82:	bf 4f       	sbci	r27, 0xFF	; 255
    1b84:	2c 91       	ld	r18, X
    1b86:	2a 87       	std	Y+10, r18	; 0x0a
    1b88:	40 81       	ld	r20, Z
    1b8a:	51 81       	ldd	r21, Z+1	; 0x01
    1b8c:	5d 83       	std	Y+5, r21	; 0x05
    1b8e:	4c 83       	std	Y+4, r20	; 0x04
    1b90:	ec 85       	ldd	r30, Y+12	; 0x0c
    1b92:	fd 85       	ldd	r31, Y+13	; 0x0d
    1b94:	f2 81       	ldd	r31, Z+2	; 0x02
    1b96:	fb 87       	std	Y+11, r31	; 0x0b
    1b98:	2c 84       	ldd	r2, Y+12	; 0x0c
    1b9a:	3d 84       	ldd	r3, Y+13	; 0x0d
    1b9c:	28 e4       	ldi	r18, 0x48	; 72
    1b9e:	22 0e       	add	r2, r18
    1ba0:	31 1c       	adc	r3, r1
    1ba2:	6c 84       	ldd	r6, Y+12	; 0x0c
    1ba4:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ba6:	26 e0       	ldi	r18, 0x06	; 6
    1ba8:	24 9f       	mul	r18, r20
    1baa:	c0 01       	movw	r24, r0
    1bac:	25 9f       	mul	r18, r21
    1bae:	90 0d       	add	r25, r0
    1bb0:	11 24       	eor	r1, r1
    1bb2:	0a 96       	adiw	r24, 0x0a	; 10
    1bb4:	a3 01       	movw	r20, r6
    1bb6:	48 0f       	add	r20, r24
    1bb8:	59 1f       	adc	r21, r25
    1bba:	5b 83       	std	Y+3, r21	; 0x03
    1bbc:	4a 83       	std	Y+2, r20	; 0x02
    1bbe:	51 2c       	mov	r5, r1
    1bc0:	41 2c       	mov	r4, r1
    1bc2:	91 2c       	mov	r9, r1
    1bc4:	b1 2c       	mov	r11, r1
    1bc6:	a1 2c       	mov	r10, r1
    1bc8:	c6 01       	movw	r24, r12
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	99 87       	std	Y+9, r25	; 0x09
    1bce:	88 87       	std	Y+8, r24	; 0x08
    1bd0:	92 e0       	ldi	r25, 0x02	; 2
    1bd2:	c9 1a       	sub	r12, r25
    1bd4:	d1 08       	sbc	r13, r1
    1bd6:	0d 2c       	mov	r0, r13
    1bd8:	00 0c       	add	r0, r0
    1bda:	ee 08       	sbc	r14, r14
    1bdc:	ff 08       	sbc	r15, r15
    1bde:	f1 01       	movw	r30, r2
    1be0:	40 81       	ld	r20, Z
    1be2:	51 81       	ldd	r21, Z+1	; 0x01
    1be4:	62 81       	ldd	r22, Z+2	; 0x02
    1be6:	73 81       	ldd	r23, Z+3	; 0x03
    1be8:	41 15       	cp	r20, r1
    1bea:	51 05       	cpc	r21, r1
    1bec:	61 05       	cpc	r22, r1
    1bee:	71 05       	cpc	r23, r1
    1bf0:	89 f0       	breq	.+34     	; 0x1c14 <QMC5883LCompass::_smoothing()+0xea>
    1bf2:	ea 81       	ldd	r30, Y+2	; 0x02
    1bf4:	fb 81       	ldd	r31, Y+3	; 0x03
    1bf6:	80 81       	ld	r24, Z
    1bf8:	91 81       	ldd	r25, Z+1	; 0x01
    1bfa:	09 2e       	mov	r0, r25
    1bfc:	00 0c       	add	r0, r0
    1bfe:	aa 0b       	sbc	r26, r26
    1c00:	bb 0b       	sbc	r27, r27
    1c02:	48 1b       	sub	r20, r24
    1c04:	59 0b       	sbc	r21, r25
    1c06:	6a 0b       	sbc	r22, r26
    1c08:	7b 0b       	sbc	r23, r27
    1c0a:	f1 01       	movw	r30, r2
    1c0c:	40 83       	st	Z, r20
    1c0e:	51 83       	std	Z+1, r21	; 0x01
    1c10:	62 83       	std	Z+2, r22	; 0x02
    1c12:	73 83       	std	Z+3, r23	; 0x03
    1c14:	fa 85       	ldd	r31, Y+10	; 0x0a
    1c16:	ff 23       	and	r31, r31
    1c18:	09 f4       	brne	.+2      	; 0x1c1c <QMC5883LCompass::_smoothing()+0xf2>
    1c1a:	4c c0       	rjmp	.+152    	; 0x1cb4 <QMC5883LCompass::_smoothing()+0x18a>
    1c1c:	f3 01       	movw	r30, r6
    1c1e:	e9 59       	subi	r30, 0x99	; 153
    1c20:	ff 4f       	sbci	r31, 0xFF	; 255
    1c22:	60 81       	ld	r22, Z
    1c24:	71 81       	ldd	r23, Z+1	; 0x01
    1c26:	ea 81       	ldd	r30, Y+2	; 0x02
    1c28:	fb 81       	ldd	r31, Y+3	; 0x03
    1c2a:	61 93       	st	Z+, r22
    1c2c:	71 93       	st	Z+, r23
    1c2e:	fb 83       	std	Y+3, r31	; 0x03
    1c30:	ea 83       	std	Y+2, r30	; 0x02
    1c32:	07 2e       	mov	r0, r23
    1c34:	00 0c       	add	r0, r0
    1c36:	88 0b       	sbc	r24, r24
    1c38:	99 0b       	sbc	r25, r25
    1c3a:	f1 01       	movw	r30, r2
    1c3c:	00 81       	ld	r16, Z
    1c3e:	11 81       	ldd	r17, Z+1	; 0x01
    1c40:	22 81       	ldd	r18, Z+2	; 0x02
    1c42:	33 81       	ldd	r19, Z+3	; 0x03
    1c44:	60 0f       	add	r22, r16
    1c46:	71 1f       	adc	r23, r17
    1c48:	82 1f       	adc	r24, r18
    1c4a:	93 1f       	adc	r25, r19
    1c4c:	60 83       	st	Z, r22
    1c4e:	71 83       	std	Z+1, r23	; 0x01
    1c50:	82 83       	std	Z+2, r24	; 0x02
    1c52:	93 83       	std	Z+3, r25	; 0x03
    1c54:	fb 85       	ldd	r31, Y+11	; 0x0b
    1c56:	a5 01       	movw	r20, r10
    1c58:	94 01       	movw	r18, r8
    1c5a:	ff 23       	and	r31, r31
    1c5c:	09 f4       	brne	.+2      	; 0x1c60 <QMC5883LCompass::_smoothing()+0x136>
    1c5e:	64 c0       	rjmp	.+200    	; 0x1d28 <QMC5883LCompass::_smoothing()+0x1fe>
    1c60:	83 01       	movw	r16, r6
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	a0 e0       	ldi	r26, 0x00	; 0
    1c66:	40 e0       	ldi	r20, 0x00	; 0
    1c68:	24 2f       	mov	r18, r20
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	f9 01       	movw	r30, r18
    1c6e:	ee 0f       	add	r30, r30
    1c70:	ff 1f       	adc	r31, r31
    1c72:	e2 0f       	add	r30, r18
    1c74:	f3 1f       	adc	r31, r19
    1c76:	e4 0d       	add	r30, r4
    1c78:	f5 1d       	adc	r31, r5
    1c7a:	35 96       	adiw	r30, 0x05	; 5
    1c7c:	ee 0f       	add	r30, r30
    1c7e:	ff 1f       	adc	r31, r31
    1c80:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c82:	3d 85       	ldd	r19, Y+13	; 0x0d
    1c84:	e2 0f       	add	r30, r18
    1c86:	f3 1f       	adc	r31, r19
    1c88:	20 81       	ld	r18, Z
    1c8a:	31 81       	ldd	r19, Z+1	; 0x01
    1c8c:	3f 83       	std	Y+7, r19	; 0x07
    1c8e:	2e 83       	std	Y+6, r18	; 0x06
    1c90:	e8 85       	ldd	r30, Y+8	; 0x08
    1c92:	f9 85       	ldd	r31, Y+9	; 0x09
    1c94:	ae 17       	cp	r26, r30
    1c96:	bf 07       	cpc	r27, r31
    1c98:	8c f4       	brge	.+34     	; 0x1cbc <QMC5883LCompass::_smoothing()+0x192>
    1c9a:	f8 01       	movw	r30, r16
    1c9c:	22 85       	ldd	r18, Z+10	; 0x0a
    1c9e:	33 85       	ldd	r19, Z+11	; 0x0b
    1ca0:	ee 81       	ldd	r30, Y+6	; 0x06
    1ca2:	ff 81       	ldd	r31, Y+7	; 0x07
    1ca4:	e2 17       	cp	r30, r18
    1ca6:	f3 07       	cpc	r31, r19
    1ca8:	0c f4       	brge	.+2      	; 0x1cac <QMC5883LCompass::_smoothing()+0x182>
    1caa:	4a 2f       	mov	r20, r26
    1cac:	11 96       	adiw	r26, 0x01	; 1
    1cae:	0a 5f       	subi	r16, 0xFA	; 250
    1cb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb2:	da cf       	rjmp	.-76     	; 0x1c68 <QMC5883LCompass::_smoothing()+0x13e>
    1cb4:	f3 01       	movw	r30, r6
    1cb6:	64 81       	ldd	r22, Z+4	; 0x04
    1cb8:	75 81       	ldd	r23, Z+5	; 0x05
    1cba:	b5 cf       	rjmp	.-150    	; 0x1c26 <QMC5883LCompass::_smoothing()+0xfc>
    1cbc:	d3 01       	movw	r26, r6
    1cbe:	10 e0       	ldi	r17, 0x00	; 0
    1cc0:	00 e0       	ldi	r16, 0x00	; 0
    1cc2:	19 82       	std	Y+1, r1	; 0x01
    1cc4:	f9 81       	ldd	r31, Y+1	; 0x01
    1cc6:	2f 2f       	mov	r18, r31
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	f9 01       	movw	r30, r18
    1ccc:	ee 0f       	add	r30, r30
    1cce:	ff 1f       	adc	r31, r31
    1cd0:	e2 0f       	add	r30, r18
    1cd2:	f3 1f       	adc	r31, r19
    1cd4:	e4 0d       	add	r30, r4
    1cd6:	f5 1d       	adc	r31, r5
    1cd8:	35 96       	adiw	r30, 0x05	; 5
    1cda:	ee 0f       	add	r30, r30
    1cdc:	ff 1f       	adc	r31, r31
    1cde:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ce0:	3d 85       	ldd	r19, Y+13	; 0x0d
    1ce2:	e2 0f       	add	r30, r18
    1ce4:	f3 1f       	adc	r31, r19
    1ce6:	20 81       	ld	r18, Z
    1ce8:	31 81       	ldd	r19, Z+1	; 0x01
    1cea:	48 85       	ldd	r20, Y+8	; 0x08
    1cec:	59 85       	ldd	r21, Y+9	; 0x09
    1cee:	04 17       	cp	r16, r20
    1cf0:	15 07       	cpc	r17, r21
    1cf2:	64 f4       	brge	.+24     	; 0x1d0c <QMC5883LCompass::_smoothing()+0x1e2>
    1cf4:	1a 96       	adiw	r26, 0x0a	; 10
    1cf6:	4d 91       	ld	r20, X+
    1cf8:	5c 91       	ld	r21, X
    1cfa:	1b 97       	sbiw	r26, 0x0b	; 11
    1cfc:	42 17       	cp	r20, r18
    1cfe:	53 07       	cpc	r21, r19
    1d00:	0c f4       	brge	.+2      	; 0x1d04 <QMC5883LCompass::_smoothing()+0x1da>
    1d02:	09 83       	std	Y+1, r16	; 0x01
    1d04:	0f 5f       	subi	r16, 0xFF	; 255
    1d06:	1f 4f       	sbci	r17, 0xFF	; 255
    1d08:	16 96       	adiw	r26, 0x06	; 6
    1d0a:	dc cf       	rjmp	.-72     	; 0x1cc4 <QMC5883LCompass::_smoothing()+0x19a>
    1d0c:	ee 81       	ldd	r30, Y+6	; 0x06
    1d0e:	ff 81       	ldd	r31, Y+7	; 0x07
    1d10:	2e 0f       	add	r18, r30
    1d12:	3f 1f       	adc	r19, r31
    1d14:	03 2e       	mov	r0, r19
    1d16:	00 0c       	add	r0, r0
    1d18:	44 0b       	sbc	r20, r20
    1d1a:	55 0b       	sbc	r21, r21
    1d1c:	62 1b       	sub	r22, r18
    1d1e:	73 0b       	sbc	r23, r19
    1d20:	84 0b       	sbc	r24, r20
    1d22:	95 0b       	sbc	r25, r21
    1d24:	a7 01       	movw	r20, r14
    1d26:	96 01       	movw	r18, r12
    1d28:	0e 94 0e 1a 	call	0x341c	; 0x341c <__divmodsi4>
    1d2c:	f3 01       	movw	r30, r6
    1d2e:	ec 5a       	subi	r30, 0xAC	; 172
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	31 83       	std	Z+1, r19	; 0x01
    1d34:	20 83       	st	Z, r18
    1d36:	ff ef       	ldi	r31, 0xFF	; 255
    1d38:	4f 1a       	sub	r4, r31
    1d3a:	5f 0a       	sbc	r5, r31
    1d3c:	24 e0       	ldi	r18, 0x04	; 4
    1d3e:	22 0e       	add	r2, r18
    1d40:	31 1c       	adc	r3, r1
    1d42:	32 e0       	ldi	r19, 0x02	; 2
    1d44:	63 0e       	add	r6, r19
    1d46:	71 1c       	adc	r7, r1
    1d48:	43 e0       	ldi	r20, 0x03	; 3
    1d4a:	44 16       	cp	r4, r20
    1d4c:	51 04       	cpc	r5, r1
    1d4e:	09 f0       	breq	.+2      	; 0x1d52 <QMC5883LCompass::_smoothing()+0x228>
    1d50:	46 cf       	rjmp	.-372    	; 0x1bde <QMC5883LCompass::_smoothing()+0xb4>
    1d52:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d54:	9d 85       	ldd	r25, Y+13	; 0x0d
    1d56:	8a 5b       	subi	r24, 0xBA	; 186
    1d58:	9f 4f       	sbci	r25, 0xFF	; 255
    1d5a:	9b 83       	std	Y+3, r25	; 0x03
    1d5c:	8a 83       	std	Y+2, r24	; 0x02
    1d5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d60:	9d 81       	ldd	r25, Y+5	; 0x05
    1d62:	01 96       	adiw	r24, 0x01	; 1
    1d64:	ea 81       	ldd	r30, Y+2	; 0x02
    1d66:	fb 81       	ldd	r31, Y+3	; 0x03
    1d68:	91 83       	std	Z+1, r25	; 0x01
    1d6a:	80 83       	st	Z, r24
    1d6c:	2d 96       	adiw	r28, 0x0d	; 13
    1d6e:	0f b6       	in	r0, 0x3f	; 63
    1d70:	f8 94       	cli
    1d72:	de bf       	out	0x3e, r29	; 62
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	cd bf       	out	0x3d, r28	; 61
    1d78:	df 91       	pop	r29
    1d7a:	cf 91       	pop	r28
    1d7c:	1f 91       	pop	r17
    1d7e:	0f 91       	pop	r16
    1d80:	ff 90       	pop	r15
    1d82:	ef 90       	pop	r14
    1d84:	df 90       	pop	r13
    1d86:	cf 90       	pop	r12
    1d88:	bf 90       	pop	r11
    1d8a:	af 90       	pop	r10
    1d8c:	9f 90       	pop	r9
    1d8e:	8f 90       	pop	r8
    1d90:	7f 90       	pop	r7
    1d92:	6f 90       	pop	r6
    1d94:	5f 90       	pop	r5
    1d96:	4f 90       	pop	r4
    1d98:	3f 90       	pop	r3
    1d9a:	2f 90       	pop	r2
    1d9c:	08 95       	ret

00001d9e <QMC5883LCompass::_get(int)>:
_ZN15QMC5883LCompass4_getEi():
    1d9e:	fc 01       	movw	r30, r24
    1da0:	20 81       	ld	r18, Z
    1da2:	22 23       	and	r18, r18
    1da4:	41 f0       	breq	.+16     	; 0x1db6 <QMC5883LCompass::_get(int)+0x18>
    1da6:	66 5d       	subi	r22, 0xD6	; 214
    1da8:	7f 4f       	sbci	r23, 0xFF	; 255
    1daa:	66 0f       	add	r22, r22
    1dac:	77 1f       	adc	r23, r23
    1dae:	86 0f       	add	r24, r22
    1db0:	97 1f       	adc	r25, r23
    1db2:	fc 01       	movw	r30, r24
    1db4:	0c c0       	rjmp	.+24     	; 0x1dce <QMC5883LCompass::_get(int)+0x30>
    1db6:	e6 5a       	subi	r30, 0xA6	; 166
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	20 81       	ld	r18, Z
    1dbc:	22 23       	and	r18, r18
    1dbe:	51 f0       	breq	.+20     	; 0x1dd4 <QMC5883LCompass::_get(int)+0x36>
    1dc0:	66 0f       	add	r22, r22
    1dc2:	77 1f       	adc	r23, r23
    1dc4:	86 0f       	add	r24, r22
    1dc6:	97 1f       	adc	r25, r23
    1dc8:	fc 01       	movw	r30, r24
    1dca:	e9 59       	subi	r30, 0x99	; 153
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	80 81       	ld	r24, Z
    1dd0:	91 81       	ldd	r25, Z+1	; 0x01
    1dd2:	08 95       	ret
    1dd4:	6e 5f       	subi	r22, 0xFE	; 254
    1dd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd8:	e8 cf       	rjmp	.-48     	; 0x1daa <QMC5883LCompass::_get(int)+0xc>

00001dda <QMC5883LCompass::getX()>:
_ZN15QMC5883LCompass4getXEv():
    1dda:	70 e0       	ldi	r23, 0x00	; 0
    1ddc:	60 e0       	ldi	r22, 0x00	; 0
    1dde:	0c 94 cf 0e 	jmp	0x1d9e	; 0x1d9e <QMC5883LCompass::_get(int)>

00001de2 <QMC5883LCompass::getY()>:
_ZN15QMC5883LCompass4getYEv():
    1de2:	61 e0       	ldi	r22, 0x01	; 1
    1de4:	70 e0       	ldi	r23, 0x00	; 0
    1de6:	0c 94 cf 0e 	jmp	0x1d9e	; 0x1d9e <QMC5883LCompass::_get(int)>

00001dea <QMC5883LCompass::getAzimuth()>:
_ZN15QMC5883LCompass10getAzimuthEv():
    1dea:	cf 92       	push	r12
    1dec:	df 92       	push	r13
    1dee:	ef 92       	push	r14
    1df0:	ff 92       	push	r15
    1df2:	0f 93       	push	r16
    1df4:	1f 93       	push	r17
    1df6:	cf 93       	push	r28
    1df8:	df 93       	push	r29
    1dfa:	ec 01       	movw	r28, r24
    1dfc:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <QMC5883LCompass::getX()>
    1e00:	8c 01       	movw	r16, r24
    1e02:	ce 01       	movw	r24, r28
    1e04:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <QMC5883LCompass::getY()>
    1e08:	ec 01       	movw	r28, r24
    1e0a:	b8 01       	movw	r22, r16
    1e0c:	11 0f       	add	r17, r17
    1e0e:	88 0b       	sbc	r24, r24
    1e10:	99 0b       	sbc	r25, r25
    1e12:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__floatsisf>
    1e16:	6b 01       	movw	r12, r22
    1e18:	7c 01       	movw	r14, r24
    1e1a:	be 01       	movw	r22, r28
    1e1c:	dd 0f       	add	r29, r29
    1e1e:	88 0b       	sbc	r24, r24
    1e20:	99 0b       	sbc	r25, r25
    1e22:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__floatsisf>
    1e26:	a7 01       	movw	r20, r14
    1e28:	96 01       	movw	r18, r12
    1e2a:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <atan2>
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	44 e3       	ldi	r20, 0x34	; 52
    1e34:	53 e4       	ldi	r21, 0x43	; 67
    1e36:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1e3a:	2b ed       	ldi	r18, 0xDB	; 219
    1e3c:	3f e0       	ldi	r19, 0x0F	; 15
    1e3e:	49 e4       	ldi	r20, 0x49	; 73
    1e40:	50 e4       	ldi	r21, 0x40	; 64
    1e42:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <__divsf3>
    1e46:	0e 94 34 18 	call	0x3068	; 0x3068 <__fixsfsi>
    1e4a:	9b 01       	movw	r18, r22
    1e4c:	77 ff       	sbrs	r23, 7
    1e4e:	02 c0       	rjmp	.+4      	; 0x1e54 <QMC5883LCompass::getAzimuth()+0x6a>
    1e50:	28 59       	subi	r18, 0x98	; 152
    1e52:	3e 4f       	sbci	r19, 0xFE	; 254
    1e54:	c9 01       	movw	r24, r18
    1e56:	df 91       	pop	r29
    1e58:	cf 91       	pop	r28
    1e5a:	1f 91       	pop	r17
    1e5c:	0f 91       	pop	r16
    1e5e:	ff 90       	pop	r15
    1e60:	ef 90       	pop	r14
    1e62:	df 90       	pop	r13
    1e64:	cf 90       	pop	r12
    1e66:	08 95       	ret

00001e68 <QMC5883LCompass::_writeReg(unsigned char, unsigned char)>:
_ZN15QMC5883LCompass9_writeRegEhh():
    1e68:	cf 93       	push	r28
    1e6a:	df 93       	push	r29
    1e6c:	d6 2f       	mov	r29, r22
    1e6e:	c4 2f       	mov	r28, r20
    1e70:	fc 01       	movw	r30, r24
    1e72:	63 81       	ldd	r22, Z+3	; 0x03
    1e74:	8b ea       	ldi	r24, 0xAB	; 171
    1e76:	92 e0       	ldi	r25, 0x02	; 2
    1e78:	0e 94 77 09 	call	0x12ee	; 0x12ee <TwoWire::beginTransmission(unsigned char)>
    1e7c:	6d 2f       	mov	r22, r29
    1e7e:	8b ea       	ldi	r24, 0xAB	; 171
    1e80:	92 e0       	ldi	r25, 0x02	; 2
    1e82:	0e 94 09 09 	call	0x1212	; 0x1212 <TwoWire::write(unsigned char)>
    1e86:	6c 2f       	mov	r22, r28
    1e88:	8b ea       	ldi	r24, 0xAB	; 171
    1e8a:	92 e0       	ldi	r25, 0x02	; 2
    1e8c:	0e 94 09 09 	call	0x1212	; 0x1212 <TwoWire::write(unsigned char)>
    1e90:	8b ea       	ldi	r24, 0xAB	; 171
    1e92:	92 e0       	ldi	r25, 0x02	; 2
    1e94:	df 91       	pop	r29
    1e96:	cf 91       	pop	r28
    1e98:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <TwoWire::endTransmission()>

00001e9c <QMC5883LCompass::init()>:
_ZN15QMC5883LCompass4initEv():
    1e9c:	cf 93       	push	r28
    1e9e:	df 93       	push	r29
    1ea0:	ec 01       	movw	r28, r24
    1ea2:	8b ea       	ldi	r24, 0xAB	; 171
    1ea4:	92 e0       	ldi	r25, 0x02	; 2
    1ea6:	0e 94 65 09 	call	0x12ca	; 0x12ca <TwoWire::begin()>
    1eaa:	41 e0       	ldi	r20, 0x01	; 1
    1eac:	6b e0       	ldi	r22, 0x0B	; 11
    1eae:	ce 01       	movw	r24, r28
    1eb0:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <QMC5883LCompass::_writeReg(unsigned char, unsigned char)>
_ZN15QMC5883LCompass7setModeEhhhh():
    1eb4:	4d e1       	ldi	r20, 0x1D	; 29
    1eb6:	69 e0       	ldi	r22, 0x09	; 9
    1eb8:	ce 01       	movw	r24, r28
_ZN15QMC5883LCompass4initEv():
    1eba:	df 91       	pop	r29
    1ebc:	cf 91       	pop	r28
_ZN15QMC5883LCompass7setModeEhhhh():
    1ebe:	0c 94 34 0f 	jmp	0x1e68	; 0x1e68 <QMC5883LCompass::_writeReg(unsigned char, unsigned char)>

00001ec2 <QMC5883LCompass::read()>:
_ZN15QMC5883LCompass4readEv():
/home/fluxion9/Arduino/libraries/QMC5883LCompass-master/src/QMC5883LCompass.cpp:162
	READ
	Read the XYZ axis and save the values in an array.
	
	@since v0.1;
**/
void QMC5883LCompass::read(){
    1ec2:	0f 93       	push	r16
    1ec4:	1f 93       	push	r17
    1ec6:	cf 93       	push	r28
    1ec8:	df 93       	push	r29
    1eca:	ec 01       	movw	r28, r24
/home/fluxion9/Arduino/libraries/QMC5883LCompass-master/src/QMC5883LCompass.cpp:163
	Wire.beginTransmission(_ADDR);
    1ecc:	6b 81       	ldd	r22, Y+3	; 0x03
    1ece:	8b ea       	ldi	r24, 0xAB	; 171
    1ed0:	92 e0       	ldi	r25, 0x02	; 2
    1ed2:	0e 94 77 09 	call	0x12ee	; 0x12ee <TwoWire::beginTransmission(unsigned char)>
_ZN7TwoWire5writeEi():
/home/fluxion9/Arduino/hardware/MiniCore/avr/libraries/Wire/src/Wire.h:81
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    1ed6:	60 e0       	ldi	r22, 0x00	; 0
    1ed8:	8b ea       	ldi	r24, 0xAB	; 171
    1eda:	92 e0       	ldi	r25, 0x02	; 2
    1edc:	0e 94 09 09 	call	0x1212	; 0x1212 <TwoWire::write(unsigned char)>
_ZN15QMC5883LCompass4readEv():
/home/fluxion9/Arduino/libraries/QMC5883LCompass-master/src/QMC5883LCompass.cpp:165
	Wire.write(0x00);
	int err = Wire.endTransmission();
    1ee0:	8b ea       	ldi	r24, 0xAB	; 171
    1ee2:	92 e0       	ldi	r25, 0x02	; 2
    1ee4:	0e 94 fd 09 	call	0x13fa	; 0x13fa <TwoWire::endTransmission()>
/home/fluxion9/Arduino/libraries/QMC5883LCompass-master/src/QMC5883LCompass.cpp:166
	if (!err) {
    1ee8:	81 11       	cpse	r24, r1
    1eea:	46 c0       	rjmp	.+140    	; 0x1f78 <QMC5883LCompass::read()+0xb6>
/home/fluxion9/Arduino/libraries/QMC5883LCompass-master/src/QMC5883LCompass.cpp:167
		Wire.requestFrom(_ADDR, (byte)6);
    1eec:	46 e0       	ldi	r20, 0x06	; 6
    1eee:	6b 81       	ldd	r22, Y+3	; 0x03
    1ef0:	8b ea       	ldi	r24, 0xAB	; 171
    1ef2:	92 e0       	ldi	r25, 0x02	; 2
    1ef4:	0e 94 f7 09 	call	0x13ee	; 0x13ee <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/fluxion9/Arduino/libraries/QMC5883LCompass-master/src/QMC5883LCompass.cpp:168
		_vRaw[0] = (int)(int16_t)(Wire.read() | Wire.read() << 8);
    1ef8:	8b ea       	ldi	r24, 0xAB	; 171
    1efa:	92 e0       	ldi	r25, 0x02	; 2
    1efc:	0e 94 b0 08 	call	0x1160	; 0x1160 <TwoWire::read()>
    1f00:	8c 01       	movw	r16, r24
    1f02:	8b ea       	ldi	r24, 0xAB	; 171
    1f04:	92 e0       	ldi	r25, 0x02	; 2
    1f06:	0e 94 b0 08 	call	0x1160	; 0x1160 <TwoWire::read()>
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	38 2f       	mov	r19, r24
    1f0e:	20 2b       	or	r18, r16
    1f10:	31 2b       	or	r19, r17
    1f12:	3d 83       	std	Y+5, r19	; 0x05
    1f14:	2c 83       	std	Y+4, r18	; 0x04
/home/fluxion9/Arduino/libraries/QMC5883LCompass-master/src/QMC5883LCompass.cpp:169
		_vRaw[1] = (int)(int16_t)(Wire.read() | Wire.read() << 8);
    1f16:	8b ea       	ldi	r24, 0xAB	; 171
    1f18:	92 e0       	ldi	r25, 0x02	; 2
    1f1a:	0e 94 b0 08 	call	0x1160	; 0x1160 <TwoWire::read()>
    1f1e:	8c 01       	movw	r16, r24
    1f20:	8b ea       	ldi	r24, 0xAB	; 171
    1f22:	92 e0       	ldi	r25, 0x02	; 2
    1f24:	0e 94 b0 08 	call	0x1160	; 0x1160 <TwoWire::read()>
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	38 2f       	mov	r19, r24
    1f2c:	20 2b       	or	r18, r16
    1f2e:	31 2b       	or	r19, r17
    1f30:	3f 83       	std	Y+7, r19	; 0x07
    1f32:	2e 83       	std	Y+6, r18	; 0x06
/home/fluxion9/Arduino/libraries/QMC5883LCompass-master/src/QMC5883LCompass.cpp:170
		_vRaw[2] = (int)(int16_t)(Wire.read() | Wire.read() << 8);
    1f34:	8b ea       	ldi	r24, 0xAB	; 171
    1f36:	92 e0       	ldi	r25, 0x02	; 2
    1f38:	0e 94 b0 08 	call	0x1160	; 0x1160 <TwoWire::read()>
    1f3c:	8c 01       	movw	r16, r24
    1f3e:	8b ea       	ldi	r24, 0xAB	; 171
    1f40:	92 e0       	ldi	r25, 0x02	; 2
    1f42:	0e 94 b0 08 	call	0x1160	; 0x1160 <TwoWire::read()>
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	38 2f       	mov	r19, r24
    1f4a:	20 2b       	or	r18, r16
    1f4c:	31 2b       	or	r19, r17
    1f4e:	39 87       	std	Y+9, r19	; 0x09
    1f50:	28 87       	std	Y+8, r18	; 0x08
/home/fluxion9/Arduino/libraries/QMC5883LCompass-master/src/QMC5883LCompass.cpp:172

		if ( _calibrationUse ) {
    1f52:	fe 01       	movw	r30, r28
    1f54:	e6 5a       	subi	r30, 0xA6	; 166
    1f56:	ff 4f       	sbci	r31, 0xFF	; 255
    1f58:	80 81       	ld	r24, Z
    1f5a:	88 23       	and	r24, r24
    1f5c:	19 f0       	breq	.+6      	; 0x1f64 <QMC5883LCompass::read()+0xa2>
/home/fluxion9/Arduino/libraries/QMC5883LCompass-master/src/QMC5883LCompass.cpp:173
			_applyCalibration();
    1f5e:	ce 01       	movw	r24, r28
    1f60:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <QMC5883LCompass::_applyCalibration()>
/home/fluxion9/Arduino/libraries/QMC5883LCompass-master/src/QMC5883LCompass.cpp:176
		}
		
		if ( _smoothUse ) {
    1f64:	88 81       	ld	r24, Y
    1f66:	88 23       	and	r24, r24
    1f68:	39 f0       	breq	.+14     	; 0x1f78 <QMC5883LCompass::read()+0xb6>
/home/fluxion9/Arduino/libraries/QMC5883LCompass-master/src/QMC5883LCompass.cpp:177
			_smoothing();
    1f6a:	ce 01       	movw	r24, r28
/home/fluxion9/Arduino/libraries/QMC5883LCompass-master/src/QMC5883LCompass.cpp:183
		}
		
		//byte overflow = Wire.read() & 0x02;
		//return overflow << 2;
	}
}
    1f6c:	df 91       	pop	r29
    1f6e:	cf 91       	pop	r28
    1f70:	1f 91       	pop	r17
    1f72:	0f 91       	pop	r16
/home/fluxion9/Arduino/libraries/QMC5883LCompass-master/src/QMC5883LCompass.cpp:177
		if ( _calibrationUse ) {
			_applyCalibration();
		}
		
		if ( _smoothUse ) {
			_smoothing();
    1f74:	0c 94 95 0d 	jmp	0x1b2a	; 0x1b2a <QMC5883LCompass::_smoothing()>
/home/fluxion9/Arduino/libraries/QMC5883LCompass-master/src/QMC5883LCompass.cpp:183
		}
		
		//byte overflow = Wire.read() & 0x02;
		//return overflow << 2;
	}
}
    1f78:	df 91       	pop	r29
    1f7a:	cf 91       	pop	r28
    1f7c:	1f 91       	pop	r17
    1f7e:	0f 91       	pop	r16
    1f80:	08 95       	ret

00001f82 <__vector_16>:
__vector_16():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:227
  cli();
  m = timer0_millis;
  SREG = oldSREG;

  return m;
}
    1f82:	1f 92       	push	r1
    1f84:	0f 92       	push	r0
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	0f 92       	push	r0
    1f8a:	11 24       	eor	r1, r1
    1f8c:	2f 93       	push	r18
    1f8e:	3f 93       	push	r19
    1f90:	8f 93       	push	r24
    1f92:	9f 93       	push	r25
    1f94:	af 93       	push	r26
    1f96:	bf 93       	push	r27
    1f98:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <timer0_millis>
    1f9c:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <timer0_millis+0x1>
    1fa0:	a0 91 76 03 	lds	r26, 0x0376	; 0x800376 <timer0_millis+0x2>
    1fa4:	b0 91 77 03 	lds	r27, 0x0377	; 0x800377 <timer0_millis+0x3>
    1fa8:	30 91 73 03 	lds	r19, 0x0373	; 0x800373 <timer0_fract>
    1fac:	23 e0       	ldi	r18, 0x03	; 3
    1fae:	23 0f       	add	r18, r19
    1fb0:	2d 37       	cpi	r18, 0x7D	; 125
    1fb2:	68 f1       	brcs	.+90     	; 0x200e <__vector_16+0x8c>
    1fb4:	26 e8       	ldi	r18, 0x86	; 134
    1fb6:	23 0f       	add	r18, r19
    1fb8:	02 96       	adiw	r24, 0x02	; 2
    1fba:	a1 1d       	adc	r26, r1
    1fbc:	b1 1d       	adc	r27, r1
    1fbe:	20 93 73 03 	sts	0x0373, r18	; 0x800373 <timer0_fract>
    1fc2:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <timer0_millis>
    1fc6:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <timer0_millis+0x1>
    1fca:	a0 93 76 03 	sts	0x0376, r26	; 0x800376 <timer0_millis+0x2>
    1fce:	b0 93 77 03 	sts	0x0377, r27	; 0x800377 <timer0_millis+0x3>
    1fd2:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <timer0_overflow_count>
    1fd6:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <timer0_overflow_count+0x1>
    1fda:	a0 91 71 03 	lds	r26, 0x0371	; 0x800371 <timer0_overflow_count+0x2>
    1fde:	b0 91 72 03 	lds	r27, 0x0372	; 0x800372 <timer0_overflow_count+0x3>
    1fe2:	01 96       	adiw	r24, 0x01	; 1
    1fe4:	a1 1d       	adc	r26, r1
    1fe6:	b1 1d       	adc	r27, r1
    1fe8:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <timer0_overflow_count>
    1fec:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <timer0_overflow_count+0x1>
    1ff0:	a0 93 71 03 	sts	0x0371, r26	; 0x800371 <timer0_overflow_count+0x2>
    1ff4:	b0 93 72 03 	sts	0x0372, r27	; 0x800372 <timer0_overflow_count+0x3>
    1ff8:	bf 91       	pop	r27
    1ffa:	af 91       	pop	r26
    1ffc:	9f 91       	pop	r25
    1ffe:	8f 91       	pop	r24
    2000:	3f 91       	pop	r19
    2002:	2f 91       	pop	r18
    2004:	0f 90       	pop	r0
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	0f 90       	pop	r0
    200a:	1f 90       	pop	r1
    200c:	18 95       	reti
    200e:	01 96       	adiw	r24, 0x01	; 1
    2010:	a1 1d       	adc	r26, r1
    2012:	b1 1d       	adc	r27, r1
    2014:	d4 cf       	rjmp	.-88     	; 0x1fbe <__vector_16+0x3c>

00002016 <micros>:
micros():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    2016:	3f b7       	in	r19, 0x3f	; 63
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    2018:	f8 94       	cli
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    201a:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <timer0_overflow_count>
    201e:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <timer0_overflow_count+0x1>
    2022:	a0 91 71 03 	lds	r26, 0x0371	; 0x800371 <timer0_overflow_count+0x2>
    2026:	b0 91 72 03 	lds	r27, 0x0372	; 0x800372 <timer0_overflow_count+0x3>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    202a:	26 b5       	in	r18, 0x26	; 38
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    202c:	a8 9b       	sbis	0x15, 0	; 21
    202e:	05 c0       	rjmp	.+10     	; 0x203a <micros+0x24>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:261 (discriminator 1)
    2030:	2f 3f       	cpi	r18, 0xFF	; 255
    2032:	19 f0       	breq	.+6      	; 0x203a <micros+0x24>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    2034:	01 96       	adiw	r24, 0x01	; 1
    2036:	a1 1d       	adc	r26, r1
    2038:	b1 1d       	adc	r27, r1
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    203a:	3f bf       	out	0x3f, r19	; 63
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    203c:	ba 2f       	mov	r27, r26
    203e:	a9 2f       	mov	r26, r25
    2040:	98 2f       	mov	r25, r24
    2042:	88 27       	eor	r24, r24
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	62 0f       	add	r22, r18
    204a:	71 1d       	adc	r23, r1
    204c:	81 1d       	adc	r24, r1
    204e:	91 1d       	adc	r25, r1
    2050:	42 e0       	ldi	r20, 0x02	; 2
    2052:	66 0f       	add	r22, r22
    2054:	77 1f       	adc	r23, r23
    2056:	88 1f       	adc	r24, r24
    2058:	99 1f       	adc	r25, r25
    205a:	4a 95       	dec	r20
    205c:	d1 f7       	brne	.-12     	; 0x2052 <micros+0x3c>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    205e:	08 95       	ret

00002060 <delay>:
delay():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    2060:	8f 92       	push	r8
    2062:	9f 92       	push	r9
    2064:	af 92       	push	r10
    2066:	bf 92       	push	r11
    2068:	cf 92       	push	r12
    206a:	df 92       	push	r13
    206c:	ef 92       	push	r14
    206e:	ff 92       	push	r15
    2070:	6b 01       	movw	r12, r22
    2072:	7c 01       	movw	r14, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    2074:	0e 94 0b 10 	call	0x2016	; 0x2016 <micros>
    2078:	4b 01       	movw	r8, r22
    207a:	5c 01       	movw	r10, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
    207c:	c1 14       	cp	r12, r1
    207e:	d1 04       	cpc	r13, r1
    2080:	e1 04       	cpc	r14, r1
    2082:	f1 04       	cpc	r15, r1
    2084:	e9 f0       	breq	.+58     	; 0x20c0 <delay+0x60>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:400
    yield();
    2086:	0e 94 dd 16 	call	0x2dba	; 0x2dba <yield>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    208a:	0e 94 0b 10 	call	0x2016	; 0x2016 <micros>
    208e:	68 19       	sub	r22, r8
    2090:	79 09       	sbc	r23, r9
    2092:	8a 09       	sbc	r24, r10
    2094:	9b 09       	sbc	r25, r11
    2096:	68 3e       	cpi	r22, 0xE8	; 232
    2098:	73 40       	sbci	r23, 0x03	; 3
    209a:	81 05       	cpc	r24, r1
    209c:	91 05       	cpc	r25, r1
    209e:	70 f3       	brcs	.-36     	; 0x207c <delay+0x1c>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:402
      ms--;
    20a0:	21 e0       	ldi	r18, 0x01	; 1
    20a2:	c2 1a       	sub	r12, r18
    20a4:	d1 08       	sbc	r13, r1
    20a6:	e1 08       	sbc	r14, r1
    20a8:	f1 08       	sbc	r15, r1
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    20aa:	88 ee       	ldi	r24, 0xE8	; 232
    20ac:	88 0e       	add	r8, r24
    20ae:	83 e0       	ldi	r24, 0x03	; 3
    20b0:	98 1e       	adc	r9, r24
    20b2:	a1 1c       	adc	r10, r1
    20b4:	b1 1c       	adc	r11, r1
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    20b6:	c1 14       	cp	r12, r1
    20b8:	d1 04       	cpc	r13, r1
    20ba:	e1 04       	cpc	r14, r1
    20bc:	f1 04       	cpc	r15, r1
    20be:	29 f7       	brne	.-54     	; 0x208a <delay+0x2a>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    20c0:	ff 90       	pop	r15
    20c2:	ef 90       	pop	r14
    20c4:	df 90       	pop	r13
    20c6:	cf 90       	pop	r12
    20c8:	bf 90       	pop	r11
    20ca:	af 90       	pop	r10
    20cc:	9f 90       	pop	r9
    20ce:	8f 90       	pop	r8
    20d0:	08 95       	ret

000020d2 <delayMicroseconds>:
delayMicroseconds():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
    20d2:	82 30       	cpi	r24, 0x02	; 2
    20d4:	91 05       	cpc	r25, r1
    20d6:	38 f0       	brcs	.+14     	; 0x20e6 <delayMicroseconds+0x14>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
    20d8:	88 0f       	add	r24, r24
    20da:	99 1f       	adc	r25, r25
    20dc:	88 0f       	add	r24, r24
    20de:	99 1f       	adc	r25, r25
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
    20e0:	05 97       	sbiw	r24, 0x05	; 5
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	f1 f7       	brne	.-4      	; 0x20e2 <delayMicroseconds+0x10>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    20e6:	08 95       	ret

000020e8 <init>:
init():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    20e8:	78 94       	sei
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    20ea:	84 b5       	in	r24, 0x24	; 36
    20ec:	83 60       	ori	r24, 0x03	; 3
    20ee:	84 bd       	out	0x24, r24	; 36
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    20f0:	85 b5       	in	r24, 0x25	; 37
    20f2:	83 60       	ori	r24, 0x03	; 3
    20f4:	85 bd       	out	0x25, r24	; 37
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    20f6:	ee e6       	ldi	r30, 0x6E	; 110
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	81 60       	ori	r24, 0x01	; 1
    20fe:	80 83       	st	Z, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    2100:	e1 e8       	ldi	r30, 0x81	; 129
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	82 e0       	ldi	r24, 0x02	; 2
    2106:	80 83       	st	Z, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    2108:	80 81       	ld	r24, Z
    210a:	81 60       	ori	r24, 0x01	; 1
    210c:	80 83       	st	Z, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    210e:	e0 e8       	ldi	r30, 0x80	; 128
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	81 60       	ori	r24, 0x01	; 1
    2116:	80 83       	st	Z, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    2118:	e1 eb       	ldi	r30, 0xB1	; 177
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	80 81       	ld	r24, Z
    211e:	84 60       	ori	r24, 0x04	; 4
    2120:	80 83       	st	Z, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    2122:	e0 eb       	ldi	r30, 0xB0	; 176
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	80 81       	ld	r24, Z
    2128:	81 60       	ori	r24, 0x01	; 1
    212a:	80 83       	st	Z, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    212c:	87 e8       	ldi	r24, 0x87	; 135
    212e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    2132:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring.c:1072
#endif
}
    2136:	08 95       	ret

00002138 <turnOffPWM>:
turnOffPWM():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    2138:	84 30       	cpi	r24, 0x04	; 4
    213a:	81 f0       	breq	.+32     	; 0x215c <turnOffPWM+0x24>
    213c:	28 f4       	brcc	.+10     	; 0x2148 <turnOffPWM+0x10>
    213e:	82 30       	cpi	r24, 0x02	; 2
    2140:	e9 f0       	breq	.+58     	; 0x217c <turnOffPWM+0x44>
    2142:	83 30       	cpi	r24, 0x03	; 3
    2144:	f9 f0       	breq	.+62     	; 0x2184 <turnOffPWM+0x4c>
    2146:	08 95       	ret
    2148:	88 30       	cpi	r24, 0x08	; 8
    214a:	71 f0       	breq	.+28     	; 0x2168 <turnOffPWM+0x30>
    214c:	89 30       	cpi	r24, 0x09	; 9
    214e:	91 f0       	breq	.+36     	; 0x2174 <turnOffPWM+0x3c>
    2150:	85 30       	cpi	r24, 0x05	; 5
    2152:	b9 f4       	brne	.+46     	; 0x2182 <turnOffPWM+0x4a>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    2154:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    2158:	8f 7d       	andi	r24, 0xDF	; 223
    215a:	03 c0       	rjmp	.+6      	; 0x2162 <turnOffPWM+0x2a>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    215c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    2160:	8f 77       	andi	r24, 0x7F	; 127
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    2162:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:88
        break;
    2166:	08 95       	ret
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    2168:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    216c:	8f 77       	andi	r24, 0x7F	; 127
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    216e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:110
        break;
    2172:	08 95       	ret
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    2174:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    2178:	8f 7d       	andi	r24, 0xDF	; 223
    217a:	f9 cf       	rjmp	.-14     	; 0x216e <turnOffPWM+0x36>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    217c:	84 b5       	in	r24, 0x24	; 36
    217e:	8f 77       	andi	r24, 0x7F	; 127
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    2180:	84 bd       	out	0x24, r24	; 36
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    2182:	08 95       	ret
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    2184:	84 b5       	in	r24, 0x24	; 36
    2186:	8f 7d       	andi	r24, 0xDF	; 223
    2188:	fb cf       	rjmp	.-10     	; 0x2180 <turnOffPWM+0x48>

0000218a <pinMode>:
pinMode():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    218a:	cf 93       	push	r28
    218c:	df 93       	push	r29
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	fc 01       	movw	r30, r24
    2192:	ee 51       	subi	r30, 0x1E	; 30
    2194:	fe 4f       	sbci	r31, 0xFE	; 254
    2196:	24 91       	lpm	r18, Z
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    2198:	87 50       	subi	r24, 0x07	; 7
    219a:	9e 4f       	sbci	r25, 0xFE	; 254
    219c:	fc 01       	movw	r30, r24
    219e:	84 91       	lpm	r24, Z
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    21a0:	88 23       	and	r24, r24
    21a2:	c9 f0       	breq	.+50     	; 0x21d6 <pinMode+0x4c>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	88 0f       	add	r24, r24
    21a8:	99 1f       	adc	r25, r25
    21aa:	fc 01       	movw	r30, r24
    21ac:	ec 5d       	subi	r30, 0xDC	; 220
    21ae:	fd 4f       	sbci	r31, 0xFD	; 253
    21b0:	a5 91       	lpm	r26, Z+
    21b2:	b4 91       	lpm	r27, Z
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    21b4:	fc 01       	movw	r30, r24
    21b6:	e6 5e       	subi	r30, 0xE6	; 230
    21b8:	fd 4f       	sbci	r31, 0xFD	; 253
    21ba:	c5 91       	lpm	r28, Z+
    21bc:	d4 91       	lpm	r29, Z
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    21be:	61 11       	cpse	r22, r1
    21c0:	0d c0       	rjmp	.+26     	; 0x21dc <pinMode+0x52>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    21c2:	9f b7       	in	r25, 0x3f	; 63
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
    21c4:	f8 94       	cli
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    21c6:	8c 91       	ld	r24, X
    21c8:	20 95       	com	r18
    21ca:	82 23       	and	r24, r18
    21cc:	8c 93       	st	X, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    21ce:	88 81       	ld	r24, Y
    21d0:	28 23       	and	r18, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    21d2:	28 83       	st	Y, r18
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    21d4:	9f bf       	out	0x3f, r25	; 63
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    21d6:	df 91       	pop	r29
    21d8:	cf 91       	pop	r28
    21da:	08 95       	ret
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    21dc:	62 30       	cpi	r22, 0x02	; 2
    21de:	51 f4       	brne	.+20     	; 0x21f4 <pinMode+0x6a>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    21e0:	9f b7       	in	r25, 0x3f	; 63
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
    21e2:	f8 94       	cli
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    21e4:	3c 91       	ld	r19, X
    21e6:	82 2f       	mov	r24, r18
    21e8:	80 95       	com	r24
    21ea:	83 23       	and	r24, r19
    21ec:	8c 93       	st	X, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    21ee:	e8 81       	ld	r30, Y
    21f0:	2e 2b       	or	r18, r30
    21f2:	ef cf       	rjmp	.-34     	; 0x21d2 <pinMode+0x48>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    21f4:	8f b7       	in	r24, 0x3f	; 63
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
    21f6:	f8 94       	cli
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    21f8:	ec 91       	ld	r30, X
    21fa:	2e 2b       	or	r18, r30
    21fc:	2c 93       	st	X, r18
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    21fe:	8f bf       	out	0x3f, r24	; 63
    2200:	ea cf       	rjmp	.-44     	; 0x21d6 <pinMode+0x4c>

00002202 <digitalWrite>:
digitalWrite():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2202:	1f 93       	push	r17
    2204:	cf 93       	push	r28
    2206:	df 93       	push	r29
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    2208:	28 2f       	mov	r18, r24
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	f9 01       	movw	r30, r18
    220e:	e5 53       	subi	r30, 0x35	; 53
    2210:	fe 4f       	sbci	r31, 0xFE	; 254
    2212:	84 91       	lpm	r24, Z
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    2214:	f9 01       	movw	r30, r18
    2216:	ee 51       	subi	r30, 0x1E	; 30
    2218:	fe 4f       	sbci	r31, 0xFE	; 254
    221a:	d4 91       	lpm	r29, Z
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    221c:	f9 01       	movw	r30, r18
    221e:	e7 50       	subi	r30, 0x07	; 7
    2220:	fe 4f       	sbci	r31, 0xFE	; 254
    2222:	c4 91       	lpm	r28, Z
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    2224:	cc 23       	and	r28, r28
    2226:	a9 f0       	breq	.+42     	; 0x2252 <digitalWrite+0x50>
    2228:	16 2f       	mov	r17, r22
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    222a:	81 11       	cpse	r24, r1
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    222c:	0e 94 9c 10 	call	0x2138	; 0x2138 <turnOffPWM>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    2230:	ec 2f       	mov	r30, r28
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	ee 0f       	add	r30, r30
    2236:	ff 1f       	adc	r31, r31
    2238:	e6 5e       	subi	r30, 0xE6	; 230
    223a:	fd 4f       	sbci	r31, 0xFD	; 253
    223c:	a5 91       	lpm	r26, Z+
    223e:	b4 91       	lpm	r27, Z
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    2240:	8f b7       	in	r24, 0x3f	; 63
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
    2242:	f8 94       	cli
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    2244:	ec 91       	ld	r30, X
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    2246:	11 11       	cpse	r17, r1
    2248:	08 c0       	rjmp	.+16     	; 0x225a <digitalWrite+0x58>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    224a:	d0 95       	com	r29
    224c:	de 23       	and	r29, r30
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    224e:	dc 93       	st	X, r29
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    2250:	8f bf       	out	0x3f, r24	; 63
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:212
}
    2252:	df 91       	pop	r29
    2254:	cf 91       	pop	r28
    2256:	1f 91       	pop	r17
    2258:	08 95       	ret
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    225a:	de 2b       	or	r29, r30
    225c:	f8 cf       	rjmp	.-16     	; 0x224e <digitalWrite+0x4c>

0000225e <pulseIn>:
pulseIn():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.c:34
 * before the start of the pulse.
 *
 * This function performs better with short pulses in noInterrupt() context
 */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
    225e:	0f 93       	push	r16
    2260:	1f 93       	push	r17
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.c:38
  // cache the port and bit of the pin in order to speed up the
  // pulse width measuring loop and achieve finer resolution.  calling
  // digitalRead() instead yields much coarser resolution.
  uint8_t bit = digitalPinToBitMask(pin);
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	fc 01       	movw	r30, r24
    2266:	ee 51       	subi	r30, 0x1E	; 30
    2268:	fe 4f       	sbci	r31, 0xFE	; 254
    226a:	74 91       	lpm	r23, Z
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.c:39
  uint8_t port = digitalPinToPort(pin);
    226c:	fc 01       	movw	r30, r24
    226e:	e7 50       	subi	r30, 0x07	; 7
    2270:	fe 4f       	sbci	r31, 0xFE	; 254
    2272:	e4 91       	lpm	r30, Z
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.c:40
  uint8_t stateMask = (state ? bit : 0);
    2274:	61 11       	cpse	r22, r1
    2276:	67 2f       	mov	r22, r23
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.c:46 (discriminator 4)

  // convert the timeout from microseconds to a number of times through
  // the initial loop; it takes approximately 16 clock cycles per iteration
  unsigned long maxloops = microsecondsToClockCycles(timeout)/16;

  unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	ee 0f       	add	r30, r30
    227c:	ff 1f       	adc	r31, r31
    227e:	e0 5f       	subi	r30, 0xF0	; 240
    2280:	fd 4f       	sbci	r31, 0xFD	; 253
    2282:	85 91       	lpm	r24, Z+
    2284:	94 91       	lpm	r25, Z
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.c:44 (discriminator 4)
  uint8_t port = digitalPinToPort(pin);
  uint8_t stateMask = (state ? bit : 0);

  // convert the timeout from microseconds to a number of times through
  // the initial loop; it takes approximately 16 clock cycles per iteration
  unsigned long maxloops = microsecondsToClockCycles(timeout)/16;
    2286:	89 01       	movw	r16, r18
    2288:	9a 01       	movw	r18, r20
    228a:	3f 70       	andi	r19, 0x0F	; 15
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.c:46 (discriminator 4)

  unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
    228c:	46 2f       	mov	r20, r22
    228e:	67 2f       	mov	r22, r23
    2290:	0e 94 45 01 	call	0x28a	; 0x28a <countPulseASM>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.c:49 (discriminator 4)

  // prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
  if (width)
    2294:	61 15       	cp	r22, r1
    2296:	71 05       	cpc	r23, r1
    2298:	81 05       	cpc	r24, r1
    229a:	91 05       	cpc	r25, r1
    229c:	29 f0       	breq	.+10     	; 0x22a8 <pulseIn+0x4a>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.c:50
    return clockCyclesToMicroseconds(width * 16 + 16);
    229e:	6f 5f       	subi	r22, 0xFF	; 255
    22a0:	7f 4f       	sbci	r23, 0xFF	; 255
    22a2:	8f 4f       	sbci	r24, 0xFF	; 255
    22a4:	9f 4f       	sbci	r25, 0xFF	; 255
    22a6:	9f 70       	andi	r25, 0x0F	; 15
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/wiring_pulse.c:53
  else
    return 0;
}
    22a8:	1f 91       	pop	r17
    22aa:	0f 91       	pop	r16
    22ac:	08 95       	ret

000022ae <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    22ae:	fc 01       	movw	r30, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    22b0:	91 8d       	ldd	r25, Z+25	; 0x19
    22b2:	22 8d       	ldd	r18, Z+26	; 0x1a
    22b4:	89 2f       	mov	r24, r25
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	80 5c       	subi	r24, 0xC0	; 192
    22ba:	9f 4f       	sbci	r25, 0xFF	; 255
    22bc:	82 1b       	sub	r24, r18
    22be:	91 09       	sbc	r25, r1
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:152
}
    22c0:	8f 73       	andi	r24, 0x3F	; 63
    22c2:	99 27       	eor	r25, r25
    22c4:	08 95       	ret

000022c6 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
    22c6:	fc 01       	movw	r30, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    22c8:	91 8d       	ldd	r25, Z+25	; 0x19
    22ca:	82 8d       	ldd	r24, Z+26	; 0x1a
    22cc:	98 17       	cp	r25, r24
    22ce:	31 f0       	breq	.+12     	; 0x22dc <HardwareSerial::peek()+0x16>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    22d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    22d2:	e8 0f       	add	r30, r24
    22d4:	f1 1d       	adc	r31, r1
    22d6:	85 8d       	ldd	r24, Z+29	; 0x1d
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	08 95       	ret
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    22dc:	8f ef       	ldi	r24, 0xFF	; 255
    22de:	9f ef       	ldi	r25, 0xFF	; 255
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    22e0:	08 95       	ret

000022e2 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
    22e2:	fc 01       	movw	r30, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    22e4:	91 8d       	ldd	r25, Z+25	; 0x19
    22e6:	82 8d       	ldd	r24, Z+26	; 0x1a
    22e8:	98 17       	cp	r25, r24
    22ea:	61 f0       	breq	.+24     	; 0x2304 <HardwareSerial::read()+0x22>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    22ec:	a2 8d       	ldd	r26, Z+26	; 0x1a
    22ee:	ae 0f       	add	r26, r30
    22f0:	bf 2f       	mov	r27, r31
    22f2:	b1 1d       	adc	r27, r1
    22f4:	5d 96       	adiw	r26, 0x1d	; 29
    22f6:	8c 91       	ld	r24, X
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    22f8:	92 8d       	ldd	r25, Z+26	; 0x1a
    22fa:	9f 5f       	subi	r25, 0xFF	; 255
    22fc:	9f 73       	andi	r25, 0x3F	; 63
    22fe:	92 8f       	std	Z+26, r25	; 0x1a
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	08 95       	ret
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2304:	8f ef       	ldi	r24, 0xFF	; 255
    2306:	9f ef       	ldi	r25, 0xFF	; 255
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2308:	08 95       	ret

0000230a <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    230a:	fc 01       	movw	r30, r24
    230c:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    230e:	44 8d       	ldd	r20, Z+28	; 0x1c
    2310:	25 2f       	mov	r18, r21
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	84 2f       	mov	r24, r20
    2316:	90 e0       	ldi	r25, 0x00	; 0
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    2318:	82 1b       	sub	r24, r18
    231a:	93 0b       	sbc	r25, r19
    231c:	54 17       	cp	r21, r20
    231e:	10 f0       	brcs	.+4      	; 0x2324 <HardwareSerial::availableForWrite()+0x1a>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
    2320:	cf 96       	adiw	r24, 0x3f	; 63
    2322:	08 95       	ret
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    2324:	01 97       	sbiw	r24, 0x01	; 1
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:188
}
    2326:	08 95       	ret

00002328 <serialEventRun()>:
_Z14serialEventRunv():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2328:	8a ed       	ldi	r24, 0xDA	; 218
    232a:	92 e1       	ldi	r25, 0x12	; 18
    232c:	89 2b       	or	r24, r25
    232e:	49 f0       	breq	.+18     	; 0x2342 <serialEventRun()+0x1a>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	89 2b       	or	r24, r25
    2336:	29 f0       	breq	.+10     	; 0x2342 <serialEventRun()+0x1a>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
    2338:	0e 94 da 12 	call	0x25b4	; 0x25b4 <Serial0_available()>
    233c:	81 11       	cpse	r24, r1
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:66
    233e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    2342:	08 95       	ret

00002344 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2344:	fc 01       	movw	r30, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2346:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2348:	a8 0f       	add	r26, r24
    234a:	b9 2f       	mov	r27, r25
    234c:	b1 1d       	adc	r27, r1
    234e:	a3 5a       	subi	r26, 0xA3	; 163
    2350:	bf 4f       	sbci	r27, 0xFF	; 255
    2352:	2c 91       	ld	r18, X
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2354:	84 8d       	ldd	r24, Z+28	; 0x1c
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	01 96       	adiw	r24, 0x01	; 1
    235a:	8f 73       	andi	r24, 0x3F	; 63
    235c:	99 27       	eor	r25, r25
    235e:	84 8f       	std	Z+28, r24	; 0x1c
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    2360:	a6 89       	ldd	r26, Z+22	; 0x16
    2362:	b7 89       	ldd	r27, Z+23	; 0x17
    2364:	2c 93       	st	X, r18
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    2366:	a0 89       	ldd	r26, Z+16	; 0x10
    2368:	b1 89       	ldd	r27, Z+17	; 0x11
    236a:	8c 91       	ld	r24, X
    236c:	80 64       	ori	r24, 0x40	; 64
    236e:	8c 93       	st	X, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    2370:	93 8d       	ldd	r25, Z+27	; 0x1b
    2372:	84 8d       	ldd	r24, Z+28	; 0x1c
    2374:	98 13       	cpse	r25, r24
    2376:	06 c0       	rjmp	.+12     	; 0x2384 <HardwareSerial::_tx_udr_empty_irq()+0x40>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    2378:	02 88       	ldd	r0, Z+18	; 0x12
    237a:	f3 89       	ldd	r31, Z+19	; 0x13
    237c:	e0 2d       	mov	r30, r0
    237e:	80 81       	ld	r24, Z
    2380:	8f 7d       	andi	r24, 0xDF	; 223
    2382:	80 83       	st	Z, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    2384:	08 95       	ret

00002386 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2386:	cf 93       	push	r28
    2388:	df 93       	push	r29
    238a:	ec 01       	movw	r28, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    238c:	88 8d       	ldd	r24, Y+24	; 0x18
    238e:	88 23       	and	r24, r24
    2390:	b9 f0       	breq	.+46     	; 0x23c0 <HardwareSerial::flush()+0x3a>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2392:	aa 89       	ldd	r26, Y+18	; 0x12
    2394:	bb 89       	ldd	r27, Y+19	; 0x13
    2396:	e8 89       	ldd	r30, Y+16	; 0x10
    2398:	f9 89       	ldd	r31, Y+17	; 0x11
    239a:	8c 91       	ld	r24, X
    239c:	85 fd       	sbrc	r24, 5
    239e:	03 c0       	rjmp	.+6      	; 0x23a6 <HardwareSerial::flush()+0x20>
    23a0:	80 81       	ld	r24, Z
    23a2:	86 fd       	sbrc	r24, 6
    23a4:	0d c0       	rjmp	.+26     	; 0x23c0 <HardwareSerial::flush()+0x3a>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    23a6:	0f b6       	in	r0, 0x3f	; 63
    23a8:	07 fc       	sbrc	r0, 7
    23aa:	f7 cf       	rjmp	.-18     	; 0x239a <HardwareSerial::flush()+0x14>
    23ac:	8c 91       	ld	r24, X
    23ae:	85 ff       	sbrs	r24, 5
    23b0:	f2 cf       	rjmp	.-28     	; 0x2396 <HardwareSerial::flush()+0x10>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    23b2:	80 81       	ld	r24, Z
    23b4:	85 ff       	sbrs	r24, 5
    23b6:	ed cf       	rjmp	.-38     	; 0x2392 <HardwareSerial::flush()+0xc>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    23b8:	ce 01       	movw	r24, r28
    23ba:	0e 94 a2 11 	call	0x2344	; 0x2344 <HardwareSerial::_tx_udr_empty_irq()>
    23be:	e9 cf       	rjmp	.-46     	; 0x2392 <HardwareSerial::flush()+0xc>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    23c0:	df 91       	pop	r29
    23c2:	cf 91       	pop	r28
    23c4:	08 95       	ret

000023c6 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
    23c6:	ef 92       	push	r14
    23c8:	ff 92       	push	r15
    23ca:	0f 93       	push	r16
    23cc:	1f 93       	push	r17
    23ce:	cf 93       	push	r28
    23d0:	df 93       	push	r29
    23d2:	ec 01       	movw	r28, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	88 8f       	std	Y+24, r24	; 0x18
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    23d8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    23da:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23dc:	98 13       	cpse	r25, r24
    23de:	16 c0       	rjmp	.+44     	; 0x240c <HardwareSerial::write(unsigned char)+0x46>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
    23e0:	e8 89       	ldd	r30, Y+16	; 0x10
    23e2:	f9 89       	ldd	r31, Y+17	; 0x11
    23e4:	80 81       	ld	r24, Z
    23e6:	85 ff       	sbrs	r24, 5
    23e8:	11 c0       	rjmp	.+34     	; 0x240c <HardwareSerial::write(unsigned char)+0x46>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    23ea:	ee 89       	ldd	r30, Y+22	; 0x16
    23ec:	ff 89       	ldd	r31, Y+23	; 0x17
    23ee:	60 83       	st	Z, r22
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    23f0:	e8 89       	ldd	r30, Y+16	; 0x10
    23f2:	f9 89       	ldd	r31, Y+17	; 0x11
    23f4:	80 81       	ld	r24, Z
    23f6:	80 64       	ori	r24, 0x40	; 64
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    23f8:	80 83       	st	Z, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	df 91       	pop	r29
    2400:	cf 91       	pop	r28
    2402:	1f 91       	pop	r17
    2404:	0f 91       	pop	r16
    2406:	ff 90       	pop	r15
    2408:	ef 90       	pop	r14
    240a:	08 95       	ret
    240c:	f6 2e       	mov	r15, r22
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    240e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2410:	10 e0       	ldi	r17, 0x00	; 0
    2412:	0f 5f       	subi	r16, 0xFF	; 255
    2414:	1f 4f       	sbci	r17, 0xFF	; 255
    2416:	0f 73       	andi	r16, 0x3F	; 63
    2418:	11 27       	eor	r17, r17
    241a:	e0 2e       	mov	r14, r16
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    241c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    241e:	8e 11       	cpse	r24, r14
    2420:	0c c0       	rjmp	.+24     	; 0x243a <HardwareSerial::write(unsigned char)+0x74>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    2422:	0f b6       	in	r0, 0x3f	; 63
    2424:	07 fc       	sbrc	r0, 7
    2426:	fa cf       	rjmp	.-12     	; 0x241c <HardwareSerial::write(unsigned char)+0x56>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2428:	e8 89       	ldd	r30, Y+16	; 0x10
    242a:	f9 89       	ldd	r31, Y+17	; 0x11
    242c:	80 81       	ld	r24, Z
    242e:	85 ff       	sbrs	r24, 5
    2430:	f5 cf       	rjmp	.-22     	; 0x241c <HardwareSerial::write(unsigned char)+0x56>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    2432:	ce 01       	movw	r24, r28
    2434:	0e 94 a2 11 	call	0x2344	; 0x2344 <HardwareSerial::_tx_udr_empty_irq()>
    2438:	f1 cf       	rjmp	.-30     	; 0x241c <HardwareSerial::write(unsigned char)+0x56>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    243a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    243c:	ec 0f       	add	r30, r28
    243e:	fd 2f       	mov	r31, r29
    2440:	f1 1d       	adc	r31, r1
    2442:	e3 5a       	subi	r30, 0xA3	; 163
    2444:	ff 4f       	sbci	r31, 0xFF	; 255
    2446:	f0 82       	st	Z, r15
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    2448:	0b 8f       	std	Y+27, r16	; 0x1b
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    244a:	ea 89       	ldd	r30, Y+18	; 0x12
    244c:	fb 89       	ldd	r31, Y+19	; 0x13
    244e:	80 81       	ld	r24, Z
    2450:	80 62       	ori	r24, 0x20	; 32
    2452:	d2 cf       	rjmp	.-92     	; 0x23f8 <HardwareSerial::write(unsigned char)+0x32>

00002454 <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:104
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    2454:	cf 92       	push	r12
    2456:	df 92       	push	r13
    2458:	ef 92       	push	r14
    245a:	ff 92       	push	r15
    245c:	1f 93       	push	r17
    245e:	cf 93       	push	r28
    2460:	df 93       	push	r29
    2462:	ec 01       	movw	r28, r24
    2464:	6a 01       	movw	r12, r20
    2466:	7b 01       	movw	r14, r22
    2468:	12 2f       	mov	r17, r18
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:107
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    246a:	e8 89       	ldd	r30, Y+16	; 0x10
    246c:	f9 89       	ldd	r31, Y+17	; 0x11
    246e:	82 e0       	ldi	r24, 0x02	; 2
    2470:	80 83       	st	Z, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:114
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2472:	c1 14       	cp	r12, r1
    2474:	81 ee       	ldi	r24, 0xE1	; 225
    2476:	d8 06       	cpc	r13, r24
    2478:	e1 04       	cpc	r14, r1
    247a:	f1 04       	cpc	r15, r1
    247c:	a1 f0       	breq	.+40     	; 0x24a6 <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:106 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    247e:	60 e0       	ldi	r22, 0x00	; 0
    2480:	79 e0       	ldi	r23, 0x09	; 9
    2482:	8d e3       	ldi	r24, 0x3D	; 61
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	a7 01       	movw	r20, r14
    2488:	96 01       	movw	r18, r12
    248a:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <__udivmodsi4>
    248e:	21 50       	subi	r18, 0x01	; 1
    2490:	31 09       	sbc	r19, r1
    2492:	41 09       	sbc	r20, r1
    2494:	51 09       	sbc	r21, r1
    2496:	56 95       	lsr	r21
    2498:	47 95       	ror	r20
    249a:	37 95       	ror	r19
    249c:	27 95       	ror	r18
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:114 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    249e:	21 15       	cp	r18, r1
    24a0:	80 e1       	ldi	r24, 0x10	; 16
    24a2:	38 07       	cpc	r19, r24
    24a4:	98 f0       	brcs	.+38     	; 0x24cc <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:116
  {
    *_ucsra = 0;
    24a6:	e8 89       	ldd	r30, Y+16	; 0x10
    24a8:	f9 89       	ldd	r31, Y+17	; 0x11
    24aa:	10 82       	st	Z, r1
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    24ac:	60 e8       	ldi	r22, 0x80	; 128
    24ae:	74 e8       	ldi	r23, 0x84	; 132
    24b0:	8e e1       	ldi	r24, 0x1E	; 30
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	a7 01       	movw	r20, r14
    24b6:	96 01       	movw	r18, r12
    24b8:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <__udivmodsi4>
    24bc:	21 50       	subi	r18, 0x01	; 1
    24be:	31 09       	sbc	r19, r1
    24c0:	41 09       	sbc	r20, r1
    24c2:	51 09       	sbc	r21, r1
    24c4:	56 95       	lsr	r21
    24c6:	47 95       	ror	r20
    24c8:	37 95       	ror	r19
    24ca:	27 95       	ror	r18
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:121
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    24cc:	ec 85       	ldd	r30, Y+12	; 0x0c
    24ce:	fd 85       	ldd	r31, Y+13	; 0x0d
    24d0:	30 83       	st	Z, r19
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    24d2:	ee 85       	ldd	r30, Y+14	; 0x0e
    24d4:	ff 85       	ldd	r31, Y+15	; 0x0f
    24d6:	20 83       	st	Z, r18
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:124

  _written = false;
    24d8:	18 8e       	std	Y+24, r1	; 0x18
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:132
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    24da:	ec 89       	ldd	r30, Y+20	; 0x14
    24dc:	fd 89       	ldd	r31, Y+21	; 0x15
    24de:	10 83       	st	Z, r17
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:134
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    24e0:	ea 89       	ldd	r30, Y+18	; 0x12
    24e2:	fb 89       	ldd	r31, Y+19	; 0x13
    24e4:	80 81       	ld	r24, Z
    24e6:	88 69       	ori	r24, 0x98	; 152
    24e8:	80 83       	st	Z, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:135
  *_ucsrb &= ~_BV(UDRIE0);
    24ea:	ea 89       	ldd	r30, Y+18	; 0x12
    24ec:	fb 89       	ldd	r31, Y+19	; 0x13
    24ee:	80 81       	ld	r24, Z
    24f0:	8f 7d       	andi	r24, 0xDF	; 223
    24f2:	80 83       	st	Z, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial.cpp:136
}
    24f4:	df 91       	pop	r29
    24f6:	cf 91       	pop	r28
    24f8:	1f 91       	pop	r17
    24fa:	ff 90       	pop	r15
    24fc:	ef 90       	pop	r14
    24fe:	df 90       	pop	r13
    2500:	cf 90       	pop	r12
    2502:	08 95       	ret

00002504 <__vector_18>:
__vector_18():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2504:	1f 92       	push	r1
    2506:	0f 92       	push	r0
    2508:	0f b6       	in	r0, 0x3f	; 63
    250a:	0f 92       	push	r0
    250c:	11 24       	eor	r1, r1
    250e:	2f 93       	push	r18
    2510:	8f 93       	push	r24
    2512:	9f 93       	push	r25
    2514:	ef 93       	push	r30
    2516:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2518:	e0 91 88 03 	lds	r30, 0x0388	; 0x800388 <Serial+0x10>
    251c:	f0 91 89 03 	lds	r31, 0x0389	; 0x800389 <Serial+0x11>
    2520:	80 81       	ld	r24, Z
    2522:	e0 91 8e 03 	lds	r30, 0x038E	; 0x80038e <Serial+0x16>
    2526:	f0 91 8f 03 	lds	r31, 0x038F	; 0x80038f <Serial+0x17>
    252a:	82 fd       	sbrc	r24, 2
    252c:	1b c0       	rjmp	.+54     	; 0x2564 <__vector_18+0x60>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    252e:	90 81       	ld	r25, Z
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2530:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <Serial+0x19>
    2534:	8f 5f       	subi	r24, 0xFF	; 255
    2536:	8f 73       	andi	r24, 0x3F	; 63
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2538:	20 91 92 03 	lds	r18, 0x0392	; 0x800392 <Serial+0x1a>
    253c:	82 17       	cp	r24, r18
    253e:	41 f0       	breq	.+16     	; 0x2550 <__vector_18+0x4c>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    2540:	e0 91 91 03 	lds	r30, 0x0391	; 0x800391 <Serial+0x19>
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	e8 58       	subi	r30, 0x88	; 136
    2548:	fc 4f       	sbci	r31, 0xFC	; 252
    254a:	95 8f       	std	Z+29, r25	; 0x1d
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    254c:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <Serial+0x19>
__vector_18():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    2550:	ff 91       	pop	r31
    2552:	ef 91       	pop	r30
    2554:	9f 91       	pop	r25
    2556:	8f 91       	pop	r24
    2558:	2f 91       	pop	r18
    255a:	0f 90       	pop	r0
    255c:	0f be       	out	0x3f, r0	; 63
    255e:	0f 90       	pop	r0
    2560:	1f 90       	pop	r1
    2562:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2564:	80 81       	ld	r24, Z
__vector_18():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    2566:	f4 cf       	rjmp	.-24     	; 0x2550 <__vector_18+0x4c>

00002568 <__vector_19>:
__vector_19():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2568:	1f 92       	push	r1
    256a:	0f 92       	push	r0
    256c:	0f b6       	in	r0, 0x3f	; 63
    256e:	0f 92       	push	r0
    2570:	11 24       	eor	r1, r1
    2572:	2f 93       	push	r18
    2574:	3f 93       	push	r19
    2576:	4f 93       	push	r20
    2578:	5f 93       	push	r21
    257a:	6f 93       	push	r22
    257c:	7f 93       	push	r23
    257e:	8f 93       	push	r24
    2580:	9f 93       	push	r25
    2582:	af 93       	push	r26
    2584:	bf 93       	push	r27
    2586:	ef 93       	push	r30
    2588:	ff 93       	push	r31
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    258a:	88 e7       	ldi	r24, 0x78	; 120
    258c:	93 e0       	ldi	r25, 0x03	; 3
    258e:	0e 94 a2 11 	call	0x2344	; 0x2344 <HardwareSerial::_tx_udr_empty_irq()>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
    2592:	ff 91       	pop	r31
    2594:	ef 91       	pop	r30
    2596:	bf 91       	pop	r27
    2598:	af 91       	pop	r26
    259a:	9f 91       	pop	r25
    259c:	8f 91       	pop	r24
    259e:	7f 91       	pop	r23
    25a0:	6f 91       	pop	r22
    25a2:	5f 91       	pop	r21
    25a4:	4f 91       	pop	r20
    25a6:	3f 91       	pop	r19
    25a8:	2f 91       	pop	r18
    25aa:	0f 90       	pop	r0
    25ac:	0f be       	out	0x3f, r0	; 63
    25ae:	0f 90       	pop	r0
    25b0:	1f 90       	pop	r1
    25b2:	18 95       	reti

000025b4 <Serial0_available()>:
_Z17Serial0_availablev():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    25b4:	88 e7       	ldi	r24, 0x78	; 120
    25b6:	93 e0       	ldi	r25, 0x03	; 3
    25b8:	0e 94 57 11 	call	0x22ae	; 0x22ae <HardwareSerial::available()>
    25bc:	21 e0       	ldi	r18, 0x01	; 1
    25be:	89 2b       	or	r24, r25
    25c0:	09 f4       	brne	.+2      	; 0x25c4 <Serial0_available()+0x10>
    25c2:	20 e0       	ldi	r18, 0x00	; 0
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
    25c4:	82 2f       	mov	r24, r18
    25c6:	08 95       	ret

000025c8 <_GLOBAL__sub_I___vector_18>:
_ZN5PrintC4Ev():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/Print.h:46
    25c8:	e8 e7       	ldi	r30, 0x78	; 120
    25ca:	f3 e0       	ldi	r31, 0x03	; 3
    25cc:	13 82       	std	Z+3, r1	; 0x03
    25ce:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/Stream.h:63
    25d0:	88 ee       	ldi	r24, 0xE8	; 232
    25d2:	93 e0       	ldi	r25, 0x03	; 3
    25d4:	a0 e0       	ldi	r26, 0x00	; 0
    25d6:	b0 e0       	ldi	r27, 0x00	; 0
    25d8:	84 83       	std	Z+4, r24	; 0x04
    25da:	95 83       	std	Z+5, r25	; 0x05
    25dc:	a6 83       	std	Z+6, r26	; 0x06
    25de:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    25e0:	8b ea       	ldi	r24, 0xAB	; 171
    25e2:	91 e0       	ldi	r25, 0x01	; 1
    25e4:	91 83       	std	Z+1, r25	; 0x01
    25e6:	80 83       	st	Z, r24
    25e8:	85 ec       	ldi	r24, 0xC5	; 197
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	95 87       	std	Z+13, r25	; 0x0d
    25ee:	84 87       	std	Z+12, r24	; 0x0c
    25f0:	84 ec       	ldi	r24, 0xC4	; 196
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	97 87       	std	Z+15, r25	; 0x0f
    25f6:	86 87       	std	Z+14, r24	; 0x0e
    25f8:	80 ec       	ldi	r24, 0xC0	; 192
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	91 8b       	std	Z+17, r25	; 0x11
    25fe:	80 8b       	std	Z+16, r24	; 0x10
    2600:	81 ec       	ldi	r24, 0xC1	; 193
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	93 8b       	std	Z+19, r25	; 0x13
    2606:	82 8b       	std	Z+18, r24	; 0x12
    2608:	82 ec       	ldi	r24, 0xC2	; 194
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	95 8b       	std	Z+21, r25	; 0x15
    260e:	84 8b       	std	Z+20, r24	; 0x14
    2610:	86 ec       	ldi	r24, 0xC6	; 198
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	97 8b       	std	Z+23, r25	; 0x17
    2616:	86 8b       	std	Z+22, r24	; 0x16
    2618:	11 8e       	std	Z+25, r1	; 0x19
    261a:	12 8e       	std	Z+26, r1	; 0x1a
    261c:	13 8e       	std	Z+27, r1	; 0x1b
    261e:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_18():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
    2620:	08 95       	ret

00002622 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/Print.cpp:119
size_t Print::println(const __FlashStringHelper *ifsh)
{
  size_t n = print(ifsh);
  n += println();
  return n;
}
    2622:	af 92       	push	r10
    2624:	bf 92       	push	r11
    2626:	cf 92       	push	r12
    2628:	df 92       	push	r13
    262a:	ef 92       	push	r14
    262c:	ff 92       	push	r15
    262e:	0f 93       	push	r16
    2630:	1f 93       	push	r17
    2632:	cf 93       	push	r28
    2634:	df 93       	push	r29
    2636:	6c 01       	movw	r12, r24
    2638:	7b 01       	movw	r14, r22
    263a:	8b 01       	movw	r16, r22
    263c:	04 0f       	add	r16, r20
    263e:	15 1f       	adc	r17, r21
    2640:	eb 01       	movw	r28, r22
    2642:	5e 01       	movw	r10, r28
    2644:	ae 18       	sub	r10, r14
    2646:	bf 08       	sbc	r11, r15
    2648:	c0 17       	cp	r28, r16
    264a:	d1 07       	cpc	r29, r17
    264c:	59 f0       	breq	.+22     	; 0x2664 <Print::write(unsigned char const*, unsigned int)+0x42>
    264e:	69 91       	ld	r22, Y+
    2650:	d6 01       	movw	r26, r12
    2652:	ed 91       	ld	r30, X+
    2654:	fc 91       	ld	r31, X
    2656:	01 90       	ld	r0, Z+
    2658:	f0 81       	ld	r31, Z
    265a:	e0 2d       	mov	r30, r0
    265c:	c6 01       	movw	r24, r12
    265e:	09 95       	icall
    2660:	89 2b       	or	r24, r25
    2662:	79 f7       	brne	.-34     	; 0x2642 <Print::write(unsigned char const*, unsigned int)+0x20>
    2664:	c5 01       	movw	r24, r10
    2666:	df 91       	pop	r29
    2668:	cf 91       	pop	r28
    266a:	1f 91       	pop	r17
    266c:	0f 91       	pop	r16
    266e:	ff 90       	pop	r15
    2670:	ef 90       	pop	r14
    2672:	df 90       	pop	r13
    2674:	cf 90       	pop	r12
    2676:	bf 90       	pop	r11
    2678:	af 90       	pop	r10
    267a:	08 95       	ret

0000267c <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    267c:	fb 01       	movw	r30, r22
    267e:	01 90       	ld	r0, Z+
    2680:	00 20       	and	r0, r0
    2682:	e9 f7       	brne	.-6      	; 0x267e <Print::write(char const*) [clone .part.2]+0x2>
    2684:	31 97       	sbiw	r30, 0x01	; 1
    2686:	af 01       	movw	r20, r30
    2688:	46 1b       	sub	r20, r22
    268a:	57 0b       	sbc	r21, r23
    268c:	dc 01       	movw	r26, r24
    268e:	ed 91       	ld	r30, X+
    2690:	fc 91       	ld	r31, X
    2692:	02 80       	ldd	r0, Z+2	; 0x02
    2694:	f3 81       	ldd	r31, Z+3	; 0x03
    2696:	e0 2d       	mov	r30, r0
    2698:	09 94       	ijmp

0000269a <Print::print(String const&)>:
_ZN5Print5writeEPKcj():
    269a:	db 01       	movw	r26, r22
    269c:	14 96       	adiw	r26, 0x04	; 4
    269e:	4d 91       	ld	r20, X+
    26a0:	5c 91       	ld	r21, X
    26a2:	15 97       	sbiw	r26, 0x05	; 5
    26a4:	6d 91       	ld	r22, X+
    26a6:	7c 91       	ld	r23, X
    26a8:	dc 01       	movw	r26, r24
    26aa:	ed 91       	ld	r30, X+
    26ac:	fc 91       	ld	r31, X
    26ae:	02 80       	ldd	r0, Z+2	; 0x02
    26b0:	f3 81       	ldd	r31, Z+3	; 0x03
    26b2:	e0 2d       	mov	r30, r0
    26b4:	09 94       	ijmp

000026b6 <Print::println()>:
_ZN5Print5writeEPKc():
    26b6:	69 eb       	ldi	r22, 0xB9	; 185
    26b8:	71 e0       	ldi	r23, 0x01	; 1
    26ba:	0c 94 3e 13 	jmp	0x267c	; 0x267c <Print::write(char const*) [clone .part.2]>

000026be <Print::println(String const&)>:
_ZN5Print7printlnERK6String():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/Print.cpp:132
{
  return write("\r\n");
}

size_t Print::println(const String &s)
{
    26be:	0f 93       	push	r16
    26c0:	1f 93       	push	r17
    26c2:	cf 93       	push	r28
    26c4:	df 93       	push	r29
    26c6:	ec 01       	movw	r28, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/Print.cpp:133
  size_t n = print(s);
    26c8:	0e 94 4d 13 	call	0x269a	; 0x269a <Print::print(String const&)>
    26cc:	8c 01       	movw	r16, r24
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/Print.cpp:134
  n += println();
    26ce:	ce 01       	movw	r24, r28
    26d0:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <Print::println()>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/Print.cpp:136
  return n;
}
    26d4:	80 0f       	add	r24, r16
    26d6:	91 1f       	adc	r25, r17
    26d8:	df 91       	pop	r29
    26da:	cf 91       	pop	r28
    26dc:	1f 91       	pop	r17
    26de:	0f 91       	pop	r16
    26e0:	08 95       	ret

000026e2 <map(long, long, long, long, long)>:
_Z3maplllll():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WMath.cpp:53
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    26e2:	4f 92       	push	r4
    26e4:	5f 92       	push	r5
    26e6:	6f 92       	push	r6
    26e8:	7f 92       	push	r7
    26ea:	af 92       	push	r10
    26ec:	bf 92       	push	r11
    26ee:	cf 92       	push	r12
    26f0:	df 92       	push	r13
    26f2:	ef 92       	push	r14
    26f4:	ff 92       	push	r15
    26f6:	0f 93       	push	r16
    26f8:	1f 93       	push	r17
    26fa:	cf 93       	push	r28
    26fc:	df 93       	push	r29
    26fe:	cd b7       	in	r28, 0x3d	; 61
    2700:	de b7       	in	r29, 0x3e	; 62
    2702:	29 01       	movw	r4, r18
    2704:	3a 01       	movw	r6, r20
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WMath.cpp:54
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    2706:	9b 01       	movw	r18, r22
    2708:	ac 01       	movw	r20, r24
    270a:	24 19       	sub	r18, r4
    270c:	35 09       	sbc	r19, r5
    270e:	46 09       	sbc	r20, r6
    2710:	57 09       	sbc	r21, r7
    2712:	89 89       	ldd	r24, Y+17	; 0x11
    2714:	9a 89       	ldd	r25, Y+18	; 0x12
    2716:	ab 89       	ldd	r26, Y+19	; 0x13
    2718:	bc 89       	ldd	r27, Y+20	; 0x14
    271a:	bc 01       	movw	r22, r24
    271c:	cd 01       	movw	r24, r26
    271e:	6a 19       	sub	r22, r10
    2720:	7b 09       	sbc	r23, r11
    2722:	8c 09       	sbc	r24, r12
    2724:	9d 09       	sbc	r25, r13
    2726:	0e 94 bc 19 	call	0x3378	; 0x3378 <__mulsi3>
    272a:	a8 01       	movw	r20, r16
    272c:	97 01       	movw	r18, r14
    272e:	24 19       	sub	r18, r4
    2730:	35 09       	sbc	r19, r5
    2732:	46 09       	sbc	r20, r6
    2734:	57 09       	sbc	r21, r7
    2736:	0e 94 0e 1a 	call	0x341c	; 0x341c <__divmodsi4>
    273a:	ca 01       	movw	r24, r20
    273c:	b9 01       	movw	r22, r18
    273e:	6a 0d       	add	r22, r10
    2740:	7b 1d       	adc	r23, r11
    2742:	8c 1d       	adc	r24, r12
    2744:	9d 1d       	adc	r25, r13
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WMath.cpp:55
}
    2746:	df 91       	pop	r29
    2748:	cf 91       	pop	r28
    274a:	1f 91       	pop	r17
    274c:	0f 91       	pop	r16
    274e:	ff 90       	pop	r15
    2750:	ef 90       	pop	r14
    2752:	df 90       	pop	r13
    2754:	cf 90       	pop	r12
    2756:	bf 90       	pop	r11
    2758:	af 90       	pop	r10
    275a:	7f 90       	pop	r7
    275c:	6f 90       	pop	r6
    275e:	5f 90       	pop	r5
    2760:	4f 90       	pop	r4
    2762:	08 95       	ret

00002764 <String::StringIfHelper() const>:
_ZNK6String14StringIfHelperEv():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.cpp:717
{
  if (!buffer) return;
  for (char *p = buffer; *p; p++) {
    *p = toupper(*p);
  }
}
    2764:	08 95       	ret

00002766 <String::~String()>:
_ZN6StringD2Ev():
    2766:	fc 01       	movw	r30, r24
    2768:	80 81       	ld	r24, Z
    276a:	91 81       	ldd	r25, Z+1	; 0x01
    276c:	0c 94 1b 1b 	jmp	0x3636	; 0x3636 <free>

00002770 <String::invalidate()>:
_ZN6String10invalidateEv():
    2770:	cf 93       	push	r28
    2772:	df 93       	push	r29
    2774:	ec 01       	movw	r28, r24
    2776:	88 81       	ld	r24, Y
    2778:	99 81       	ldd	r25, Y+1	; 0x01
    277a:	00 97       	sbiw	r24, 0x00	; 0
    277c:	11 f0       	breq	.+4      	; 0x2782 <String::invalidate()+0x12>
    277e:	0e 94 1b 1b 	call	0x3636	; 0x3636 <free>
    2782:	19 82       	std	Y+1, r1	; 0x01
    2784:	18 82       	st	Y, r1
    2786:	1d 82       	std	Y+5, r1	; 0x05
    2788:	1c 82       	std	Y+4, r1	; 0x04
    278a:	1b 82       	std	Y+3, r1	; 0x03
    278c:	1a 82       	std	Y+2, r1	; 0x02
    278e:	df 91       	pop	r29
    2790:	cf 91       	pop	r28
    2792:	08 95       	ret

00002794 <String::changeBuffer(unsigned int)>:
_ZN6String12changeBufferEj():
    2794:	0f 93       	push	r16
    2796:	1f 93       	push	r17
    2798:	cf 93       	push	r28
    279a:	df 93       	push	r29
    279c:	ec 01       	movw	r28, r24
    279e:	8b 01       	movw	r16, r22
    27a0:	6f 5f       	subi	r22, 0xFF	; 255
    27a2:	7f 4f       	sbci	r23, 0xFF	; 255
    27a4:	88 81       	ld	r24, Y
    27a6:	99 81       	ldd	r25, Y+1	; 0x01
    27a8:	0e 94 a4 1b 	call	0x3748	; 0x3748 <realloc>
    27ac:	00 97       	sbiw	r24, 0x00	; 0
    27ae:	51 f0       	breq	.+20     	; 0x27c4 <String::changeBuffer(unsigned int)+0x30>
    27b0:	99 83       	std	Y+1, r25	; 0x01
    27b2:	88 83       	st	Y, r24
    27b4:	1b 83       	std	Y+3, r17	; 0x03
    27b6:	0a 83       	std	Y+2, r16	; 0x02
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	df 91       	pop	r29
    27bc:	cf 91       	pop	r28
    27be:	1f 91       	pop	r17
    27c0:	0f 91       	pop	r16
    27c2:	08 95       	ret
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	f9 cf       	rjmp	.-14     	; 0x27ba <String::changeBuffer(unsigned int)+0x26>

000027c8 <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
    27c8:	cf 93       	push	r28
    27ca:	df 93       	push	r29
    27cc:	ec 01       	movw	r28, r24
    27ce:	88 81       	ld	r24, Y
    27d0:	99 81       	ldd	r25, Y+1	; 0x01
    27d2:	89 2b       	or	r24, r25
    27d4:	49 f0       	breq	.+18     	; 0x27e8 <String::reserve(unsigned int)+0x20>
    27d6:	8a 81       	ldd	r24, Y+2	; 0x02
    27d8:	9b 81       	ldd	r25, Y+3	; 0x03
    27da:	86 17       	cp	r24, r22
    27dc:	97 07       	cpc	r25, r23
    27de:	20 f0       	brcs	.+8      	; 0x27e8 <String::reserve(unsigned int)+0x20>
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	df 91       	pop	r29
    27e4:	cf 91       	pop	r28
    27e6:	08 95       	ret
    27e8:	ce 01       	movw	r24, r28
    27ea:	0e 94 ca 13 	call	0x2794	; 0x2794 <String::changeBuffer(unsigned int)>
    27ee:	88 23       	and	r24, r24
    27f0:	c1 f3       	breq	.-16     	; 0x27e2 <String::reserve(unsigned int)+0x1a>
    27f2:	8c 81       	ldd	r24, Y+4	; 0x04
    27f4:	9d 81       	ldd	r25, Y+5	; 0x05
    27f6:	89 2b       	or	r24, r25
    27f8:	99 f7       	brne	.-26     	; 0x27e0 <String::reserve(unsigned int)+0x18>
    27fa:	e8 81       	ld	r30, Y
    27fc:	f9 81       	ldd	r31, Y+1	; 0x01
    27fe:	10 82       	st	Z, r1
    2800:	ef cf       	rjmp	.-34     	; 0x27e0 <String::reserve(unsigned int)+0x18>

00002802 <String::copy(char const*, unsigned int)>:
_ZN6String4copyEPKcj():
    2802:	ef 92       	push	r14
    2804:	ff 92       	push	r15
    2806:	0f 93       	push	r16
    2808:	1f 93       	push	r17
    280a:	cf 93       	push	r28
    280c:	df 93       	push	r29
    280e:	ec 01       	movw	r28, r24
    2810:	7b 01       	movw	r14, r22
    2812:	8a 01       	movw	r16, r20
    2814:	ba 01       	movw	r22, r20
    2816:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <String::reserve(unsigned int)>
    281a:	81 11       	cpse	r24, r1
    281c:	0b c0       	rjmp	.+22     	; 0x2834 <String::copy(char const*, unsigned int)+0x32>
    281e:	ce 01       	movw	r24, r28
    2820:	0e 94 b8 13 	call	0x2770	; 0x2770 <String::invalidate()>
    2824:	ce 01       	movw	r24, r28
    2826:	df 91       	pop	r29
    2828:	cf 91       	pop	r28
    282a:	1f 91       	pop	r17
    282c:	0f 91       	pop	r16
    282e:	ff 90       	pop	r15
    2830:	ef 90       	pop	r14
    2832:	08 95       	ret
    2834:	1d 83       	std	Y+5, r17	; 0x05
    2836:	0c 83       	std	Y+4, r16	; 0x04
    2838:	b7 01       	movw	r22, r14
    283a:	88 81       	ld	r24, Y
    283c:	99 81       	ldd	r25, Y+1	; 0x01
    283e:	0e 94 b2 1c 	call	0x3964	; 0x3964 <strcpy>
    2842:	f0 cf       	rjmp	.-32     	; 0x2824 <String::copy(char const*, unsigned int)+0x22>

00002844 <String::String(char const*)>:
_ZN6String4initEv():
    2844:	fc 01       	movw	r30, r24
    2846:	11 82       	std	Z+1, r1	; 0x01
    2848:	10 82       	st	Z, r1
    284a:	13 82       	std	Z+3, r1	; 0x03
    284c:	12 82       	std	Z+2, r1	; 0x02
    284e:	15 82       	std	Z+5, r1	; 0x05
    2850:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2EPKc():
    2852:	61 15       	cp	r22, r1
    2854:	71 05       	cpc	r23, r1
    2856:	51 f0       	breq	.+20     	; 0x286c <String::String(char const*)+0x28>
    2858:	fb 01       	movw	r30, r22
    285a:	01 90       	ld	r0, Z+
    285c:	00 20       	and	r0, r0
    285e:	e9 f7       	brne	.-6      	; 0x285a <String::String(char const*)+0x16>
    2860:	31 97       	sbiw	r30, 0x01	; 1
    2862:	af 01       	movw	r20, r30
    2864:	46 1b       	sub	r20, r22
    2866:	57 0b       	sbc	r21, r23
    2868:	0c 94 01 14 	jmp	0x2802	; 0x2802 <String::copy(char const*, unsigned int)>
    286c:	08 95       	ret

0000286e <String::operator=(char const*) [clone .part.3]>:
_ZN6StringaSEPKc():
    286e:	fb 01       	movw	r30, r22
    2870:	01 90       	ld	r0, Z+
    2872:	00 20       	and	r0, r0
    2874:	e9 f7       	brne	.-6      	; 0x2870 <String::operator=(char const*) [clone .part.3]+0x2>
    2876:	31 97       	sbiw	r30, 0x01	; 1
    2878:	af 01       	movw	r20, r30
    287a:	46 1b       	sub	r20, r22
    287c:	57 0b       	sbc	r21, r23
    287e:	0c 94 01 14 	jmp	0x2802	; 0x2802 <String::copy(char const*, unsigned int)>

00002882 <String::move(String&)>:
_ZN6String4moveERS_():
    2882:	0f 93       	push	r16
    2884:	1f 93       	push	r17
    2886:	cf 93       	push	r28
    2888:	df 93       	push	r29
    288a:	8c 01       	movw	r16, r24
    288c:	eb 01       	movw	r28, r22
    288e:	fc 01       	movw	r30, r24
    2890:	80 81       	ld	r24, Z
    2892:	91 81       	ldd	r25, Z+1	; 0x01
    2894:	00 97       	sbiw	r24, 0x00	; 0
    2896:	01 f1       	breq	.+64     	; 0x28d8 <String::move(String&)+0x56>
    2898:	68 81       	ld	r22, Y
    289a:	79 81       	ldd	r23, Y+1	; 0x01
_ZNK6StringcvMS_KFvvEEv():
    289c:	61 15       	cp	r22, r1
    289e:	71 05       	cpc	r23, r1
    28a0:	c9 f0       	breq	.+50     	; 0x28d4 <String::move(String&)+0x52>
_ZN6String4moveERS_():
    28a2:	22 eb       	ldi	r18, 0xB2	; 178
    28a4:	33 e1       	ldi	r19, 0x13	; 19
    28a6:	23 2b       	or	r18, r19
    28a8:	a9 f0       	breq	.+42     	; 0x28d4 <String::move(String&)+0x52>
    28aa:	42 81       	ldd	r20, Z+2	; 0x02
    28ac:	53 81       	ldd	r21, Z+3	; 0x03
    28ae:	2c 81       	ldd	r18, Y+4	; 0x04
    28b0:	3d 81       	ldd	r19, Y+5	; 0x05
    28b2:	42 17       	cp	r20, r18
    28b4:	53 07       	cpc	r21, r19
    28b6:	70 f0       	brcs	.+28     	; 0x28d4 <String::move(String&)+0x52>
    28b8:	0e 94 b2 1c 	call	0x3964	; 0x3964 <strcpy>
    28bc:	8c 81       	ldd	r24, Y+4	; 0x04
    28be:	9d 81       	ldd	r25, Y+5	; 0x05
    28c0:	f8 01       	movw	r30, r16
    28c2:	95 83       	std	Z+5, r25	; 0x05
    28c4:	84 83       	std	Z+4, r24	; 0x04
    28c6:	1d 82       	std	Y+5, r1	; 0x05
    28c8:	1c 82       	std	Y+4, r1	; 0x04
    28ca:	df 91       	pop	r29
    28cc:	cf 91       	pop	r28
    28ce:	1f 91       	pop	r17
    28d0:	0f 91       	pop	r16
    28d2:	08 95       	ret
    28d4:	0e 94 1b 1b 	call	0x3636	; 0x3636 <free>
    28d8:	88 81       	ld	r24, Y
    28da:	99 81       	ldd	r25, Y+1	; 0x01
    28dc:	f8 01       	movw	r30, r16
    28de:	91 83       	std	Z+1, r25	; 0x01
    28e0:	80 83       	st	Z, r24
    28e2:	8a 81       	ldd	r24, Y+2	; 0x02
    28e4:	9b 81       	ldd	r25, Y+3	; 0x03
    28e6:	93 83       	std	Z+3, r25	; 0x03
    28e8:	82 83       	std	Z+2, r24	; 0x02
    28ea:	8c 81       	ldd	r24, Y+4	; 0x04
    28ec:	9d 81       	ldd	r25, Y+5	; 0x05
    28ee:	95 83       	std	Z+5, r25	; 0x05
    28f0:	84 83       	std	Z+4, r24	; 0x04
    28f2:	19 82       	std	Y+1, r1	; 0x01
    28f4:	18 82       	st	Y, r1
    28f6:	1b 82       	std	Y+3, r1	; 0x03
    28f8:	1a 82       	std	Y+2, r1	; 0x02
    28fa:	e5 cf       	rjmp	.-54     	; 0x28c6 <String::move(String&)+0x44>

000028fc <String::operator=(String const&)>:
_ZN6StringaSERKS_():
    28fc:	cf 93       	push	r28
    28fe:	df 93       	push	r29
    2900:	ec 01       	movw	r28, r24
    2902:	fb 01       	movw	r30, r22
    2904:	86 17       	cp	r24, r22
    2906:	97 07       	cpc	r25, r23
    2908:	49 f0       	breq	.+18     	; 0x291c <String::operator=(String const&)+0x20>
    290a:	60 81       	ld	r22, Z
    290c:	71 81       	ldd	r23, Z+1	; 0x01
    290e:	61 15       	cp	r22, r1
    2910:	71 05       	cpc	r23, r1
    2912:	41 f0       	breq	.+16     	; 0x2924 <String::operator=(String const&)+0x28>
    2914:	44 81       	ldd	r20, Z+4	; 0x04
    2916:	55 81       	ldd	r21, Z+5	; 0x05
    2918:	0e 94 01 14 	call	0x2802	; 0x2802 <String::copy(char const*, unsigned int)>
    291c:	ce 01       	movw	r24, r28
    291e:	df 91       	pop	r29
    2920:	cf 91       	pop	r28
    2922:	08 95       	ret
    2924:	0e 94 b8 13 	call	0x2770	; 0x2770 <String::invalidate()>
    2928:	f9 cf       	rjmp	.-14     	; 0x291c <String::operator=(String const&)+0x20>

0000292a <String::String(String const&)>:
_ZN6String4initEv():
    292a:	fc 01       	movw	r30, r24
    292c:	11 82       	std	Z+1, r1	; 0x01
    292e:	10 82       	st	Z, r1
    2930:	13 82       	std	Z+3, r1	; 0x03
    2932:	12 82       	std	Z+2, r1	; 0x02
    2934:	15 82       	std	Z+5, r1	; 0x05
    2936:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2ERKS_():
    2938:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <String::operator=(String const&)>

0000293c <String::operator=(String&&)>:
_ZN6StringaSEOS_():
    293c:	cf 93       	push	r28
    293e:	df 93       	push	r29
    2940:	ec 01       	movw	r28, r24
    2942:	86 17       	cp	r24, r22
    2944:	97 07       	cpc	r25, r23
    2946:	11 f0       	breq	.+4      	; 0x294c <String::operator=(String&&)+0x10>
    2948:	0e 94 41 14 	call	0x2882	; 0x2882 <String::move(String&)>
    294c:	ce 01       	movw	r24, r28
    294e:	df 91       	pop	r29
    2950:	cf 91       	pop	r28
    2952:	08 95       	ret

00002954 <String::operator=(char const*)>:
_ZN6StringaSEPKc():
    2954:	cf 93       	push	r28
    2956:	df 93       	push	r29
    2958:	ec 01       	movw	r28, r24
    295a:	61 15       	cp	r22, r1
    295c:	71 05       	cpc	r23, r1
    295e:	31 f0       	breq	.+12     	; 0x296c <String::operator=(char const*)+0x18>
    2960:	0e 94 37 14 	call	0x286e	; 0x286e <String::operator=(char const*) [clone .part.3]>
    2964:	ce 01       	movw	r24, r28
    2966:	df 91       	pop	r29
    2968:	cf 91       	pop	r28
    296a:	08 95       	ret
    296c:	0e 94 b8 13 	call	0x2770	; 0x2770 <String::invalidate()>
    2970:	f9 cf       	rjmp	.-14     	; 0x2964 <String::operator=(char const*)+0x10>

00002972 <String::concat(char const*, unsigned int)>:
_ZN6String6concatEPKcj():
    2972:	ef 92       	push	r14
    2974:	ff 92       	push	r15
    2976:	0f 93       	push	r16
    2978:	1f 93       	push	r17
    297a:	cf 93       	push	r28
    297c:	df 93       	push	r29
    297e:	61 15       	cp	r22, r1
    2980:	71 05       	cpc	r23, r1
    2982:	41 f4       	brne	.+16     	; 0x2994 <String::concat(char const*, unsigned int)+0x22>
    2984:	80 e0       	ldi	r24, 0x00	; 0
    2986:	df 91       	pop	r29
    2988:	cf 91       	pop	r28
    298a:	1f 91       	pop	r17
    298c:	0f 91       	pop	r16
    298e:	ff 90       	pop	r15
    2990:	ef 90       	pop	r14
    2992:	08 95       	ret
    2994:	41 15       	cp	r20, r1
    2996:	51 05       	cpc	r21, r1
    2998:	b1 f0       	breq	.+44     	; 0x29c6 <String::concat(char const*, unsigned int)+0x54>
    299a:	7b 01       	movw	r14, r22
    299c:	ec 01       	movw	r28, r24
    299e:	0c 81       	ldd	r16, Y+4	; 0x04
    29a0:	1d 81       	ldd	r17, Y+5	; 0x05
    29a2:	04 0f       	add	r16, r20
    29a4:	15 1f       	adc	r17, r21
    29a6:	b8 01       	movw	r22, r16
    29a8:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <String::reserve(unsigned int)>
    29ac:	88 23       	and	r24, r24
    29ae:	51 f3       	breq	.-44     	; 0x2984 <String::concat(char const*, unsigned int)+0x12>
    29b0:	28 81       	ld	r18, Y
    29b2:	39 81       	ldd	r19, Y+1	; 0x01
    29b4:	8c 81       	ldd	r24, Y+4	; 0x04
    29b6:	9d 81       	ldd	r25, Y+5	; 0x05
    29b8:	b7 01       	movw	r22, r14
    29ba:	82 0f       	add	r24, r18
    29bc:	93 1f       	adc	r25, r19
    29be:	0e 94 b2 1c 	call	0x3964	; 0x3964 <strcpy>
    29c2:	1d 83       	std	Y+5, r17	; 0x05
    29c4:	0c 83       	std	Y+4, r16	; 0x04
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	de cf       	rjmp	.-68     	; 0x2986 <String::concat(char const*, unsigned int)+0x14>

000029ca <String::concat(String const&)>:
_ZN6String6concatERKS_():
    29ca:	fb 01       	movw	r30, r22
    29cc:	44 81       	ldd	r20, Z+4	; 0x04
    29ce:	55 81       	ldd	r21, Z+5	; 0x05
    29d0:	60 81       	ld	r22, Z
    29d2:	71 81       	ldd	r23, Z+1	; 0x01
    29d4:	0c 94 b9 14 	jmp	0x2972	; 0x2972 <String::concat(char const*, unsigned int)>

000029d8 <String::concat(char const*)>:
_ZN6String6concatEPKc():
    29d8:	61 15       	cp	r22, r1
    29da:	71 05       	cpc	r23, r1
    29dc:	51 f0       	breq	.+20     	; 0x29f2 <String::concat(char const*)+0x1a>
    29de:	fb 01       	movw	r30, r22
    29e0:	01 90       	ld	r0, Z+
    29e2:	00 20       	and	r0, r0
    29e4:	e9 f7       	brne	.-6      	; 0x29e0 <String::concat(char const*)+0x8>
    29e6:	31 97       	sbiw	r30, 0x01	; 1
    29e8:	af 01       	movw	r20, r30
    29ea:	46 1b       	sub	r20, r22
    29ec:	57 0b       	sbc	r21, r23
    29ee:	0c 94 b9 14 	jmp	0x2972	; 0x2972 <String::concat(char const*, unsigned int)>
    29f2:	80 e0       	ldi	r24, 0x00	; 0
    29f4:	08 95       	ret

000029f6 <String::concat(char)>:
_ZN6String6concatEc():
    29f6:	cf 93       	push	r28
    29f8:	df 93       	push	r29
    29fa:	00 d0       	rcall	.+0      	; 0x29fc <String::concat(char)+0x6>
    29fc:	cd b7       	in	r28, 0x3d	; 61
    29fe:	de b7       	in	r29, 0x3e	; 62
    2a00:	69 83       	std	Y+1, r22	; 0x01
    2a02:	1a 82       	std	Y+2, r1	; 0x02
    2a04:	41 e0       	ldi	r20, 0x01	; 1
    2a06:	50 e0       	ldi	r21, 0x00	; 0
    2a08:	be 01       	movw	r22, r28
    2a0a:	6f 5f       	subi	r22, 0xFF	; 255
    2a0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a0e:	0e 94 b9 14 	call	0x2972	; 0x2972 <String::concat(char const*, unsigned int)>
    2a12:	0f 90       	pop	r0
    2a14:	0f 90       	pop	r0
    2a16:	df 91       	pop	r29
    2a18:	cf 91       	pop	r28
    2a1a:	08 95       	ret

00002a1c <String::concat(int)>:
_ZN6String6concatEi():
    2a1c:	ef 92       	push	r14
    2a1e:	ff 92       	push	r15
    2a20:	0f 93       	push	r16
    2a22:	1f 93       	push	r17
    2a24:	cf 93       	push	r28
    2a26:	df 93       	push	r29
    2a28:	cd b7       	in	r28, 0x3d	; 61
    2a2a:	de b7       	in	r29, 0x3e	; 62
    2a2c:	28 97       	sbiw	r28, 0x08	; 8
    2a2e:	0f b6       	in	r0, 0x3f	; 63
    2a30:	f8 94       	cli
    2a32:	de bf       	out	0x3e, r29	; 62
    2a34:	0f be       	out	0x3f, r0	; 63
    2a36:	cd bf       	out	0x3d, r28	; 61
    2a38:	7c 01       	movw	r14, r24
    2a3a:	cb 01       	movw	r24, r22
itoa():
    2a3c:	4a e0       	ldi	r20, 0x0A	; 10
    2a3e:	8e 01       	movw	r16, r28
    2a40:	0f 5f       	subi	r16, 0xFF	; 255
    2a42:	1f 4f       	sbci	r17, 0xFF	; 255
    2a44:	b8 01       	movw	r22, r16
    2a46:	0e 94 c7 1c 	call	0x398e	; 0x398e <__itoa_ncheck>
_ZN6String6concatEi():
    2a4a:	f8 01       	movw	r30, r16
    2a4c:	01 90       	ld	r0, Z+
    2a4e:	00 20       	and	r0, r0
    2a50:	e9 f7       	brne	.-6      	; 0x2a4c <String::concat(int)+0x30>
    2a52:	31 97       	sbiw	r30, 0x01	; 1
    2a54:	af 01       	movw	r20, r30
    2a56:	40 1b       	sub	r20, r16
    2a58:	51 0b       	sbc	r21, r17
    2a5a:	b8 01       	movw	r22, r16
    2a5c:	c7 01       	movw	r24, r14
    2a5e:	0e 94 b9 14 	call	0x2972	; 0x2972 <String::concat(char const*, unsigned int)>
    2a62:	28 96       	adiw	r28, 0x08	; 8
    2a64:	0f b6       	in	r0, 0x3f	; 63
    2a66:	f8 94       	cli
    2a68:	de bf       	out	0x3e, r29	; 62
    2a6a:	0f be       	out	0x3f, r0	; 63
    2a6c:	cd bf       	out	0x3d, r28	; 61
    2a6e:	df 91       	pop	r29
    2a70:	cf 91       	pop	r28
    2a72:	1f 91       	pop	r17
    2a74:	0f 91       	pop	r16
    2a76:	ff 90       	pop	r15
    2a78:	ef 90       	pop	r14
    2a7a:	08 95       	ret

00002a7c <String::concat(float)>:
_ZN6String6concatEf():
    2a7c:	ef 92       	push	r14
    2a7e:	ff 92       	push	r15
    2a80:	0f 93       	push	r16
    2a82:	1f 93       	push	r17
    2a84:	cf 93       	push	r28
    2a86:	df 93       	push	r29
    2a88:	cd b7       	in	r28, 0x3d	; 61
    2a8a:	de b7       	in	r29, 0x3e	; 62
    2a8c:	64 97       	sbiw	r28, 0x14	; 20
    2a8e:	0f b6       	in	r0, 0x3f	; 63
    2a90:	f8 94       	cli
    2a92:	de bf       	out	0x3e, r29	; 62
    2a94:	0f be       	out	0x3f, r0	; 63
    2a96:	cd bf       	out	0x3d, r28	; 61
    2a98:	7c 01       	movw	r14, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	ba 01       	movw	r22, r20
    2a9e:	8e 01       	movw	r16, r28
    2aa0:	0f 5f       	subi	r16, 0xFF	; 255
    2aa2:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa4:	22 e0       	ldi	r18, 0x02	; 2
    2aa6:	44 e0       	ldi	r20, 0x04	; 4
    2aa8:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <dtostrf>
    2aac:	fc 01       	movw	r30, r24
    2aae:	01 90       	ld	r0, Z+
    2ab0:	00 20       	and	r0, r0
    2ab2:	e9 f7       	brne	.-6      	; 0x2aae <String::concat(float)+0x32>
    2ab4:	31 97       	sbiw	r30, 0x01	; 1
    2ab6:	af 01       	movw	r20, r30
    2ab8:	48 1b       	sub	r20, r24
    2aba:	59 0b       	sbc	r21, r25
    2abc:	bc 01       	movw	r22, r24
    2abe:	c7 01       	movw	r24, r14
    2ac0:	0e 94 b9 14 	call	0x2972	; 0x2972 <String::concat(char const*, unsigned int)>
    2ac4:	64 96       	adiw	r28, 0x14	; 20
    2ac6:	0f b6       	in	r0, 0x3f	; 63
    2ac8:	f8 94       	cli
    2aca:	de bf       	out	0x3e, r29	; 62
    2acc:	0f be       	out	0x3f, r0	; 63
    2ace:	cd bf       	out	0x3d, r28	; 61
    2ad0:	df 91       	pop	r29
    2ad2:	cf 91       	pop	r28
    2ad4:	1f 91       	pop	r17
    2ad6:	0f 91       	pop	r16
    2ad8:	ff 90       	pop	r15
    2ada:	ef 90       	pop	r14
    2adc:	08 95       	ret

00002ade <String::equals(char const*) const>:
_ZNK6String6equalsEPKc():
    2ade:	fc 01       	movw	r30, r24
    2ae0:	24 81       	ldd	r18, Z+4	; 0x04
    2ae2:	35 81       	ldd	r19, Z+5	; 0x05
    2ae4:	23 2b       	or	r18, r19
    2ae6:	31 f4       	brne	.+12     	; 0x2af4 <String::equals(char const*) const+0x16>
    2ae8:	21 e0       	ldi	r18, 0x01	; 1
    2aea:	fb 01       	movw	r30, r22
    2aec:	67 2b       	or	r22, r23
    2aee:	49 f4       	brne	.+18     	; 0x2b02 <String::equals(char const*) const+0x24>
    2af0:	82 2f       	mov	r24, r18
    2af2:	08 95       	ret
    2af4:	80 81       	ld	r24, Z
    2af6:	91 81       	ldd	r25, Z+1	; 0x01
    2af8:	61 15       	cp	r22, r1
    2afa:	71 05       	cpc	r23, r1
    2afc:	39 f4       	brne	.+14     	; 0x2b0c <String::equals(char const*) const+0x2e>
    2afe:	21 e0       	ldi	r18, 0x01	; 1
    2b00:	fc 01       	movw	r30, r24
    2b02:	80 81       	ld	r24, Z
    2b04:	88 23       	and	r24, r24
    2b06:	a1 f3       	breq	.-24     	; 0x2af0 <String::equals(char const*) const+0x12>
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	f2 cf       	rjmp	.-28     	; 0x2af0 <String::equals(char const*) const+0x12>
    2b0c:	0e 94 a9 1c 	call	0x3952	; 0x3952 <strcmp>
    2b10:	21 e0       	ldi	r18, 0x01	; 1
    2b12:	89 2b       	or	r24, r25
    2b14:	69 f3       	breq	.-38     	; 0x2af0 <String::equals(char const*) const+0x12>
    2b16:	f8 cf       	rjmp	.-16     	; 0x2b08 <String::equals(char const*) const+0x2a>

00002b18 <String::startsWith(String const&, unsigned int) const>:
_ZNK6String10startsWithERKS_j():
    2b18:	db 01       	movw	r26, r22
    2b1a:	14 96       	adiw	r26, 0x04	; 4
    2b1c:	ed 91       	ld	r30, X+
    2b1e:	fc 91       	ld	r31, X
    2b20:	dc 01       	movw	r26, r24
    2b22:	14 96       	adiw	r26, 0x04	; 4
    2b24:	2d 91       	ld	r18, X+
    2b26:	3c 91       	ld	r19, X
    2b28:	15 97       	sbiw	r26, 0x05	; 5
    2b2a:	2e 1b       	sub	r18, r30
    2b2c:	3f 0b       	sbc	r19, r31
    2b2e:	24 17       	cp	r18, r20
    2b30:	35 07       	cpc	r19, r21
    2b32:	a0 f0       	brcs	.+40     	; 0x2b5c <String::startsWith(String const&, unsigned int) const+0x44>
    2b34:	2d 91       	ld	r18, X+
    2b36:	3c 91       	ld	r19, X
    2b38:	21 15       	cp	r18, r1
    2b3a:	31 05       	cpc	r19, r1
    2b3c:	79 f0       	breq	.+30     	; 0x2b5c <String::startsWith(String const&, unsigned int) const+0x44>
    2b3e:	db 01       	movw	r26, r22
    2b40:	6d 91       	ld	r22, X+
    2b42:	7c 91       	ld	r23, X
    2b44:	61 15       	cp	r22, r1
    2b46:	71 05       	cpc	r23, r1
    2b48:	49 f0       	breq	.+18     	; 0x2b5c <String::startsWith(String const&, unsigned int) const+0x44>
    2b4a:	ca 01       	movw	r24, r20
    2b4c:	af 01       	movw	r20, r30
    2b4e:	82 0f       	add	r24, r18
    2b50:	93 1f       	adc	r25, r19
    2b52:	0e 94 b9 1c 	call	0x3972	; 0x3972 <strncmp>
    2b56:	21 e0       	ldi	r18, 0x01	; 1
    2b58:	89 2b       	or	r24, r25
    2b5a:	09 f0       	breq	.+2      	; 0x2b5e <String::startsWith(String const&, unsigned int) const+0x46>
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	82 2f       	mov	r24, r18
    2b60:	08 95       	ret

00002b62 <String::startsWith(String const&) const>:
_ZNK6String10startsWithERKS_():
    2b62:	fc 01       	movw	r30, r24
    2b64:	44 81       	ldd	r20, Z+4	; 0x04
    2b66:	55 81       	ldd	r21, Z+5	; 0x05
    2b68:	fb 01       	movw	r30, r22
    2b6a:	24 81       	ldd	r18, Z+4	; 0x04
    2b6c:	35 81       	ldd	r19, Z+5	; 0x05
    2b6e:	42 17       	cp	r20, r18
    2b70:	53 07       	cpc	r21, r19
    2b72:	20 f0       	brcs	.+8      	; 0x2b7c <String::startsWith(String const&) const+0x1a>
    2b74:	50 e0       	ldi	r21, 0x00	; 0
    2b76:	40 e0       	ldi	r20, 0x00	; 0
    2b78:	0c 94 8c 15 	jmp	0x2b18	; 0x2b18 <String::startsWith(String const&, unsigned int) const>
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	08 95       	ret

00002b80 <String::endsWith(String const&) const>:
_ZNK6String8endsWithERKS_():
    2b80:	fc 01       	movw	r30, r24
    2b82:	24 81       	ldd	r18, Z+4	; 0x04
    2b84:	35 81       	ldd	r19, Z+5	; 0x05
    2b86:	fb 01       	movw	r30, r22
    2b88:	44 81       	ldd	r20, Z+4	; 0x04
    2b8a:	55 81       	ldd	r21, Z+5	; 0x05
    2b8c:	24 17       	cp	r18, r20
    2b8e:	35 07       	cpc	r19, r21
    2b90:	a0 f0       	brcs	.+40     	; 0x2bba <String::endsWith(String const&) const+0x3a>
    2b92:	fc 01       	movw	r30, r24
    2b94:	80 81       	ld	r24, Z
    2b96:	91 81       	ldd	r25, Z+1	; 0x01
    2b98:	00 97       	sbiw	r24, 0x00	; 0
    2b9a:	79 f0       	breq	.+30     	; 0x2bba <String::endsWith(String const&) const+0x3a>
    2b9c:	fb 01       	movw	r30, r22
    2b9e:	60 81       	ld	r22, Z
    2ba0:	71 81       	ldd	r23, Z+1	; 0x01
    2ba2:	61 15       	cp	r22, r1
    2ba4:	71 05       	cpc	r23, r1
    2ba6:	49 f0       	breq	.+18     	; 0x2bba <String::endsWith(String const&) const+0x3a>
    2ba8:	24 1b       	sub	r18, r20
    2baa:	35 0b       	sbc	r19, r21
    2bac:	82 0f       	add	r24, r18
    2bae:	93 1f       	adc	r25, r19
    2bb0:	0e 94 a9 1c 	call	0x3952	; 0x3952 <strcmp>
    2bb4:	21 e0       	ldi	r18, 0x01	; 1
    2bb6:	89 2b       	or	r24, r25
    2bb8:	09 f0       	breq	.+2      	; 0x2bbc <String::endsWith(String const&) const+0x3c>
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	82 2f       	mov	r24, r18
    2bbe:	08 95       	ret

00002bc0 <String::operator[](unsigned int)>:
_ZN6StringixEj():
    2bc0:	fc 01       	movw	r30, r24
    2bc2:	24 81       	ldd	r18, Z+4	; 0x04
    2bc4:	35 81       	ldd	r19, Z+5	; 0x05
    2bc6:	62 17       	cp	r22, r18
    2bc8:	73 07       	cpc	r23, r19
    2bca:	20 f4       	brcc	.+8      	; 0x2bd4 <String::operator[](unsigned int)+0x14>
    2bcc:	80 81       	ld	r24, Z
    2bce:	91 81       	ldd	r25, Z+1	; 0x01
    2bd0:	00 97       	sbiw	r24, 0x00	; 0
    2bd2:	29 f4       	brne	.+10     	; 0x2bde <String::operator[](unsigned int)+0x1e>
    2bd4:	10 92 15 04 	sts	0x0415, r1	; 0x800415 <String::operator[](unsigned int)::dummy_writable_char>
    2bd8:	85 e1       	ldi	r24, 0x15	; 21
    2bda:	94 e0       	ldi	r25, 0x04	; 4
    2bdc:	08 95       	ret
    2bde:	86 0f       	add	r24, r22
    2be0:	97 1f       	adc	r25, r23
    2be2:	08 95       	ret

00002be4 <String::indexOf(char, unsigned int) const>:
_ZNK6String7indexOfEcj():
    2be4:	cf 93       	push	r28
    2be6:	df 93       	push	r29
    2be8:	fc 01       	movw	r30, r24
    2bea:	24 81       	ldd	r18, Z+4	; 0x04
    2bec:	35 81       	ldd	r19, Z+5	; 0x05
    2bee:	42 17       	cp	r20, r18
    2bf0:	53 07       	cpc	r21, r19
    2bf2:	88 f4       	brcc	.+34     	; 0x2c16 <String::indexOf(char, unsigned int) const+0x32>
    2bf4:	c0 81       	ld	r28, Z
    2bf6:	d1 81       	ldd	r29, Z+1	; 0x01
    2bf8:	06 2e       	mov	r0, r22
    2bfa:	00 0c       	add	r0, r0
    2bfc:	77 0b       	sbc	r23, r23
    2bfe:	ce 01       	movw	r24, r28
    2c00:	84 0f       	add	r24, r20
    2c02:	95 1f       	adc	r25, r21
    2c04:	0e 94 9e 1c 	call	0x393c	; 0x393c <strchr>
    2c08:	00 97       	sbiw	r24, 0x00	; 0
    2c0a:	29 f0       	breq	.+10     	; 0x2c16 <String::indexOf(char, unsigned int) const+0x32>
    2c0c:	8c 1b       	sub	r24, r28
    2c0e:	9d 0b       	sbc	r25, r29
    2c10:	df 91       	pop	r29
    2c12:	cf 91       	pop	r28
    2c14:	08 95       	ret
    2c16:	8f ef       	ldi	r24, 0xFF	; 255
    2c18:	9f ef       	ldi	r25, 0xFF	; 255
    2c1a:	fa cf       	rjmp	.-12     	; 0x2c10 <String::indexOf(char, unsigned int) const+0x2c>

00002c1c <String::indexOf(char) const>:
_ZNK6String7indexOfEc():
    2c1c:	50 e0       	ldi	r21, 0x00	; 0
    2c1e:	40 e0       	ldi	r20, 0x00	; 0
    2c20:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <String::indexOf(char, unsigned int) const>

00002c24 <String::substring(unsigned int, unsigned int) const>:
_ZNK6String9substringEjj():
    2c24:	af 92       	push	r10
    2c26:	bf 92       	push	r11
    2c28:	cf 92       	push	r12
    2c2a:	df 92       	push	r13
    2c2c:	ef 92       	push	r14
    2c2e:	ff 92       	push	r15
    2c30:	0f 93       	push	r16
    2c32:	1f 93       	push	r17
    2c34:	cf 93       	push	r28
    2c36:	df 93       	push	r29
    2c38:	5c 01       	movw	r10, r24
    2c3a:	6b 01       	movw	r12, r22
    2c3c:	7a 01       	movw	r14, r20
    2c3e:	89 01       	movw	r16, r18
    2c40:	24 17       	cp	r18, r20
    2c42:	35 07       	cpc	r19, r21
    2c44:	20 f4       	brcc	.+8      	; 0x2c4e <String::substring(unsigned int, unsigned int) const+0x2a>
    2c46:	8f 2d       	mov	r24, r15
    2c48:	79 01       	movw	r14, r18
    2c4a:	04 2f       	mov	r16, r20
    2c4c:	18 2f       	mov	r17, r24
    2c4e:	6b eb       	ldi	r22, 0xBB	; 187
    2c50:	71 e0       	ldi	r23, 0x01	; 1
    2c52:	c5 01       	movw	r24, r10
    2c54:	0e 94 22 14 	call	0x2844	; 0x2844 <String::String(char const*)>
    2c58:	d6 01       	movw	r26, r12
    2c5a:	14 96       	adiw	r26, 0x04	; 4
    2c5c:	cd 91       	ld	r28, X+
    2c5e:	dc 91       	ld	r29, X
    2c60:	ec 16       	cp	r14, r28
    2c62:	fd 06       	cpc	r15, r29
    2c64:	c8 f4       	brcc	.+50     	; 0x2c98 <String::substring(unsigned int, unsigned int) const+0x74>
    2c66:	0c 17       	cp	r16, r28
    2c68:	1d 07       	cpc	r17, r29
    2c6a:	08 f4       	brcc	.+2      	; 0x2c6e <String::substring(unsigned int, unsigned int) const+0x4a>
    2c6c:	e8 01       	movw	r28, r16
    2c6e:	d6 01       	movw	r26, r12
    2c70:	ed 91       	ld	r30, X+
    2c72:	fc 91       	ld	r31, X
    2c74:	11 97       	sbiw	r26, 0x01	; 1
    2c76:	ec 0f       	add	r30, r28
    2c78:	fd 1f       	adc	r31, r29
    2c7a:	10 81       	ld	r17, Z
    2c7c:	10 82       	st	Z, r1
    2c7e:	6d 91       	ld	r22, X+
    2c80:	7c 91       	ld	r23, X
    2c82:	6e 0d       	add	r22, r14
    2c84:	7f 1d       	adc	r23, r15
    2c86:	c5 01       	movw	r24, r10
    2c88:	0e 94 aa 14 	call	0x2954	; 0x2954 <String::operator=(char const*)>
    2c8c:	f6 01       	movw	r30, r12
    2c8e:	80 81       	ld	r24, Z
    2c90:	91 81       	ldd	r25, Z+1	; 0x01
    2c92:	c8 0f       	add	r28, r24
    2c94:	d9 1f       	adc	r29, r25
    2c96:	18 83       	st	Y, r17
    2c98:	c5 01       	movw	r24, r10
    2c9a:	df 91       	pop	r29
    2c9c:	cf 91       	pop	r28
    2c9e:	1f 91       	pop	r17
    2ca0:	0f 91       	pop	r16
    2ca2:	ff 90       	pop	r15
    2ca4:	ef 90       	pop	r14
    2ca6:	df 90       	pop	r13
    2ca8:	cf 90       	pop	r12
    2caa:	bf 90       	pop	r11
    2cac:	af 90       	pop	r10
    2cae:	08 95       	ret

00002cb0 <String::trim()>:
_ZN6String4trimEv():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.cpp:720

void String::trim(void)
{
    2cb0:	af 92       	push	r10
    2cb2:	bf 92       	push	r11
    2cb4:	cf 92       	push	r12
    2cb6:	df 92       	push	r13
    2cb8:	ef 92       	push	r14
    2cba:	ff 92       	push	r15
    2cbc:	0f 93       	push	r16
    2cbe:	1f 93       	push	r17
    2cc0:	cf 93       	push	r28
    2cc2:	df 93       	push	r29
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.cpp:721
  if (!buffer || len == 0) return;
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cd 90       	ld	r12, X+
    2cc8:	dc 90       	ld	r13, X
    2cca:	11 97       	sbiw	r26, 0x01	; 1
    2ccc:	c1 14       	cp	r12, r1
    2cce:	d1 04       	cpc	r13, r1
    2cd0:	39 f0       	breq	.+14     	; 0x2ce0 <String::trim()+0x30>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.cpp:721 (discriminator 1)
    2cd2:	14 96       	adiw	r26, 0x04	; 4
    2cd4:	cd 91       	ld	r28, X+
    2cd6:	dc 91       	ld	r29, X
    2cd8:	8c 01       	movw	r16, r24
    2cda:	76 01       	movw	r14, r12
    2cdc:	20 97       	sbiw	r28, 0x00	; 0
    2cde:	61 f4       	brne	.+24     	; 0x2cf8 <String::trim()+0x48>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.cpp:729
  char *end = buffer + len - 1;
  while (isspace(*end) && end >= begin) end--;
  len = end + 1 - begin;
  if (begin > buffer) memcpy(buffer, begin, len);
  buffer[len] = 0;
}
    2ce0:	df 91       	pop	r29
    2ce2:	cf 91       	pop	r28
    2ce4:	1f 91       	pop	r17
    2ce6:	0f 91       	pop	r16
    2ce8:	ff 90       	pop	r15
    2cea:	ef 90       	pop	r14
    2cec:	df 90       	pop	r13
    2cee:	cf 90       	pop	r12
    2cf0:	bf 90       	pop	r11
    2cf2:	af 90       	pop	r10
    2cf4:	08 95       	ret
    2cf6:	75 01       	movw	r14, r10
    2cf8:	57 01       	movw	r10, r14
    2cfa:	bf ef       	ldi	r27, 0xFF	; 255
    2cfc:	ab 1a       	sub	r10, r27
    2cfe:	bb 0a       	sbc	r11, r27
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.cpp:723 (discriminator 2)

void String::trim(void)
{
  if (!buffer || len == 0) return;
  char *begin = buffer;
  while (isspace(*begin)) begin++;
    2d00:	f7 01       	movw	r30, r14
    2d02:	80 81       	ld	r24, Z
    2d04:	08 2e       	mov	r0, r24
    2d06:	00 0c       	add	r0, r0
    2d08:	99 0b       	sbc	r25, r25
    2d0a:	0e 94 8c 1c 	call	0x3918	; 0x3918 <isspace>
    2d0e:	89 2b       	or	r24, r25
    2d10:	91 f7       	brne	.-28     	; 0x2cf6 <String::trim()+0x46>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.cpp:724
  char *end = buffer + len - 1;
    2d12:	21 97       	sbiw	r28, 0x01	; 1
    2d14:	cc 0d       	add	r28, r12
    2d16:	dd 1d       	adc	r29, r13
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.cpp:725 (discriminator 3)
  while (isspace(*end) && end >= begin) end--;
    2d18:	88 81       	ld	r24, Y
    2d1a:	08 2e       	mov	r0, r24
    2d1c:	00 0c       	add	r0, r0
    2d1e:	99 0b       	sbc	r25, r25
    2d20:	0e 94 8c 1c 	call	0x3918	; 0x3918 <isspace>
    2d24:	89 2b       	or	r24, r25
    2d26:	29 f0       	breq	.+10     	; 0x2d32 <String::trim()+0x82>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.cpp:725 (discriminator 1)
    2d28:	ce 15       	cp	r28, r14
    2d2a:	df 05       	cpc	r29, r15
    2d2c:	10 f0       	brcs	.+4      	; 0x2d32 <String::trim()+0x82>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.cpp:725 (discriminator 2)
    2d2e:	21 97       	sbiw	r28, 0x01	; 1
    2d30:	f3 cf       	rjmp	.-26     	; 0x2d18 <String::trim()+0x68>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.cpp:726
  len = end + 1 - begin;
    2d32:	ae 01       	movw	r20, r28
    2d34:	4f 5f       	subi	r20, 0xFF	; 255
    2d36:	5f 4f       	sbci	r21, 0xFF	; 255
    2d38:	4e 19       	sub	r20, r14
    2d3a:	5f 09       	sbc	r21, r15
    2d3c:	d8 01       	movw	r26, r16
    2d3e:	15 96       	adiw	r26, 0x05	; 5
    2d40:	5c 93       	st	X, r21
    2d42:	4e 93       	st	-X, r20
    2d44:	14 97       	sbiw	r26, 0x04	; 4
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.cpp:727
  if (begin > buffer) memcpy(buffer, begin, len);
    2d46:	ce 14       	cp	r12, r14
    2d48:	df 04       	cpc	r13, r15
    2d4a:	20 f4       	brcc	.+8      	; 0x2d54 <String::trim()+0xa4>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.cpp:727 (discriminator 1)
    2d4c:	b7 01       	movw	r22, r14
    2d4e:	c6 01       	movw	r24, r12
    2d50:	0e 94 95 1c 	call	0x392a	; 0x392a <memcpy>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.cpp:728
  buffer[len] = 0;
    2d54:	d8 01       	movw	r26, r16
    2d56:	ed 91       	ld	r30, X+
    2d58:	fc 91       	ld	r31, X
    2d5a:	11 97       	sbiw	r26, 0x01	; 1
    2d5c:	14 96       	adiw	r26, 0x04	; 4
    2d5e:	8d 91       	ld	r24, X+
    2d60:	9c 91       	ld	r25, X
    2d62:	e8 0f       	add	r30, r24
    2d64:	f9 1f       	adc	r31, r25
    2d66:	10 82       	st	Z, r1
    2d68:	bb cf       	rjmp	.-138    	; 0x2ce0 <String::trim()+0x30>

00002d6a <String::toInt() const>:
_ZNK6String5toIntEv():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.cpp:737
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
  if (buffer) return atol(buffer);
    2d6a:	fc 01       	movw	r30, r24
    2d6c:	80 81       	ld	r24, Z
    2d6e:	91 81       	ldd	r25, Z+1	; 0x01
    2d70:	00 97       	sbiw	r24, 0x00	; 0
    2d72:	11 f0       	breq	.+4      	; 0x2d78 <String::toInt() const+0xe>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.cpp:737 (discriminator 1)
    2d74:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <atol>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.cpp:739
  return 0;
}
    2d78:	60 e0       	ldi	r22, 0x00	; 0
    2d7a:	70 e0       	ldi	r23, 0x00	; 0
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	08 95       	ret

00002d80 <String::toDouble() const>:
_ZNK6String8toDoubleEv():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.cpp:748
  return float(toDouble());
}

double String::toDouble(void) const
{
  if (buffer) return atof(buffer);
    2d80:	fc 01       	movw	r30, r24
    2d82:	80 81       	ld	r24, Z
    2d84:	91 81       	ldd	r25, Z+1	; 0x01
    2d86:	00 97       	sbiw	r24, 0x00	; 0
    2d88:	11 f0       	breq	.+4      	; 0x2d8e <String::toDouble() const+0xe>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.cpp:748 (discriminator 1)
    2d8a:	0c 94 61 1c 	jmp	0x38c2	; 0x38c2 <atof>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.cpp:750
  return 0;
}
    2d8e:	60 e0       	ldi	r22, 0x00	; 0
    2d90:	70 e0       	ldi	r23, 0x00	; 0
    2d92:	cb 01       	movw	r24, r22
    2d94:	08 95       	ret

00002d96 <String::toFloat() const>:
_ZNK6String7toFloatEv():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/WString.cpp:743
  return 0;
}

float String::toFloat(void) const
{
  return float(toDouble());
    2d96:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <String::toDouble() const>

00002d9a <initVariant>:
initVariant():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    2d9a:	08 95       	ret

00002d9c <main>:
main():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    2d9c:	0e 94 74 10 	call	0x20e8	; 0x20e8 <init>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/main.cpp:37

  initVariant();
    2da0:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <initVariant>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    2da4:	0e 94 37 03 	call	0x66e	; 0x66e <setup>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    2da8:	c4 e9       	ldi	r28, 0x94	; 148
    2daa:	d1 e1       	ldi	r29, 0x11	; 17
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    2dac:	0e 94 2f 06 	call	0xc5e	; 0xc5e <loop>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    2db0:	20 97       	sbiw	r28, 0x00	; 0
    2db2:	e1 f3       	breq	.-8      	; 0x2dac <main+0x10>
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/main.cpp:47 (discriminator 1)
    2db4:	0e 94 94 11 	call	0x2328	; 0x2328 <serialEventRun()>
    2db8:	f9 cf       	rjmp	.-14     	; 0x2dac <main+0x10>

00002dba <yield>:
__empty():
/home/fluxion9/Arduino/hardware/MiniCore/avr/cores/MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    2dba:	08 95       	ret

00002dbc <__subsf3>:
__subsf3():
    2dbc:	50 58       	subi	r21, 0x80	; 128

00002dbe <__addsf3>:
    2dbe:	bb 27       	eor	r27, r27
    2dc0:	aa 27       	eor	r26, r26
    2dc2:	0e 94 f6 16 	call	0x2dec	; 0x2dec <__addsf3x>
    2dc6:	0c 94 09 19 	jmp	0x3212	; 0x3212 <__fp_round>
__addsf3():
    2dca:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <__fp_pscA>
    2dce:	38 f0       	brcs	.+14     	; 0x2dde <__addsf3+0x20>
    2dd0:	0e 94 02 19 	call	0x3204	; 0x3204 <__fp_pscB>
    2dd4:	20 f0       	brcs	.+8      	; 0x2dde <__addsf3+0x20>
    2dd6:	39 f4       	brne	.+14     	; 0x2de6 <__addsf3+0x28>
    2dd8:	9f 3f       	cpi	r25, 0xFF	; 255
    2dda:	19 f4       	brne	.+6      	; 0x2de2 <__addsf3+0x24>
    2ddc:	26 f4       	brtc	.+8      	; 0x2de6 <__addsf3+0x28>
    2dde:	0c 94 d1 18 	jmp	0x31a2	; 0x31a2 <__fp_nan>
    2de2:	0e f4       	brtc	.+2      	; 0x2de6 <__addsf3+0x28>
    2de4:	e0 95       	com	r30
    2de6:	e7 fb       	bst	r30, 7
    2de8:	0c 94 cb 18 	jmp	0x3196	; 0x3196 <__fp_inf>

00002dec <__addsf3x>:
__addsf3x():
    2dec:	e9 2f       	mov	r30, r25
    2dee:	0e 94 1a 19 	call	0x3234	; 0x3234 <__fp_split3>
    2df2:	58 f3       	brcs	.-42     	; 0x2dca <__addsf3+0xc>
    2df4:	ba 17       	cp	r27, r26
    2df6:	62 07       	cpc	r22, r18
    2df8:	73 07       	cpc	r23, r19
    2dfa:	84 07       	cpc	r24, r20
    2dfc:	95 07       	cpc	r25, r21
    2dfe:	20 f0       	brcs	.+8      	; 0x2e08 <__addsf3x+0x1c>
    2e00:	79 f4       	brne	.+30     	; 0x2e20 <__addsf3x+0x34>
    2e02:	a6 f5       	brtc	.+104    	; 0x2e6c <__addsf3x+0x80>
    2e04:	0c 94 3c 19 	jmp	0x3278	; 0x3278 <__fp_zero>
    2e08:	0e f4       	brtc	.+2      	; 0x2e0c <__addsf3x+0x20>
    2e0a:	e0 95       	com	r30
    2e0c:	0b 2e       	mov	r0, r27
    2e0e:	ba 2f       	mov	r27, r26
    2e10:	a0 2d       	mov	r26, r0
    2e12:	0b 01       	movw	r0, r22
    2e14:	b9 01       	movw	r22, r18
    2e16:	90 01       	movw	r18, r0
    2e18:	0c 01       	movw	r0, r24
    2e1a:	ca 01       	movw	r24, r20
    2e1c:	a0 01       	movw	r20, r0
    2e1e:	11 24       	eor	r1, r1
    2e20:	ff 27       	eor	r31, r31
    2e22:	59 1b       	sub	r21, r25
    2e24:	99 f0       	breq	.+38     	; 0x2e4c <__addsf3x+0x60>
    2e26:	59 3f       	cpi	r21, 0xF9	; 249
    2e28:	50 f4       	brcc	.+20     	; 0x2e3e <__addsf3x+0x52>
    2e2a:	50 3e       	cpi	r21, 0xE0	; 224
    2e2c:	68 f1       	brcs	.+90     	; 0x2e88 <__addsf3x+0x9c>
    2e2e:	1a 16       	cp	r1, r26
    2e30:	f0 40       	sbci	r31, 0x00	; 0
    2e32:	a2 2f       	mov	r26, r18
    2e34:	23 2f       	mov	r18, r19
    2e36:	34 2f       	mov	r19, r20
    2e38:	44 27       	eor	r20, r20
    2e3a:	58 5f       	subi	r21, 0xF8	; 248
    2e3c:	f3 cf       	rjmp	.-26     	; 0x2e24 <__addsf3x+0x38>
    2e3e:	46 95       	lsr	r20
    2e40:	37 95       	ror	r19
    2e42:	27 95       	ror	r18
    2e44:	a7 95       	ror	r26
    2e46:	f0 40       	sbci	r31, 0x00	; 0
    2e48:	53 95       	inc	r21
    2e4a:	c9 f7       	brne	.-14     	; 0x2e3e <__addsf3x+0x52>
    2e4c:	7e f4       	brtc	.+30     	; 0x2e6c <__addsf3x+0x80>
    2e4e:	1f 16       	cp	r1, r31
    2e50:	ba 0b       	sbc	r27, r26
    2e52:	62 0b       	sbc	r22, r18
    2e54:	73 0b       	sbc	r23, r19
    2e56:	84 0b       	sbc	r24, r20
    2e58:	ba f0       	brmi	.+46     	; 0x2e88 <__addsf3x+0x9c>
    2e5a:	91 50       	subi	r25, 0x01	; 1
    2e5c:	a1 f0       	breq	.+40     	; 0x2e86 <__addsf3x+0x9a>
    2e5e:	ff 0f       	add	r31, r31
    2e60:	bb 1f       	adc	r27, r27
    2e62:	66 1f       	adc	r22, r22
    2e64:	77 1f       	adc	r23, r23
    2e66:	88 1f       	adc	r24, r24
    2e68:	c2 f7       	brpl	.-16     	; 0x2e5a <__addsf3x+0x6e>
    2e6a:	0e c0       	rjmp	.+28     	; 0x2e88 <__addsf3x+0x9c>
    2e6c:	ba 0f       	add	r27, r26
    2e6e:	62 1f       	adc	r22, r18
    2e70:	73 1f       	adc	r23, r19
    2e72:	84 1f       	adc	r24, r20
    2e74:	48 f4       	brcc	.+18     	; 0x2e88 <__addsf3x+0x9c>
    2e76:	87 95       	ror	r24
    2e78:	77 95       	ror	r23
    2e7a:	67 95       	ror	r22
    2e7c:	b7 95       	ror	r27
    2e7e:	f7 95       	ror	r31
    2e80:	9e 3f       	cpi	r25, 0xFE	; 254
    2e82:	08 f0       	brcs	.+2      	; 0x2e86 <__addsf3x+0x9a>
    2e84:	b0 cf       	rjmp	.-160    	; 0x2de6 <__addsf3+0x28>
    2e86:	93 95       	inc	r25
    2e88:	88 0f       	add	r24, r24
    2e8a:	08 f0       	brcs	.+2      	; 0x2e8e <__addsf3x+0xa2>
    2e8c:	99 27       	eor	r25, r25
    2e8e:	ee 0f       	add	r30, r30
    2e90:	97 95       	ror	r25
    2e92:	87 95       	ror	r24
    2e94:	08 95       	ret
    2e96:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <__fp_pscA>
    2e9a:	60 f0       	brcs	.+24     	; 0x2eb4 <__addsf3x+0xc8>
    2e9c:	80 e8       	ldi	r24, 0x80	; 128
    2e9e:	91 e0       	ldi	r25, 0x01	; 1
    2ea0:	09 f4       	brne	.+2      	; 0x2ea4 <__addsf3x+0xb8>
    2ea2:	9e ef       	ldi	r25, 0xFE	; 254
    2ea4:	0e 94 02 19 	call	0x3204	; 0x3204 <__fp_pscB>
    2ea8:	28 f0       	brcs	.+10     	; 0x2eb4 <__addsf3x+0xc8>
    2eaa:	40 e8       	ldi	r20, 0x80	; 128
    2eac:	51 e0       	ldi	r21, 0x01	; 1
    2eae:	71 f4       	brne	.+28     	; 0x2ecc <atan2+0x10>
    2eb0:	5e ef       	ldi	r21, 0xFE	; 254
    2eb2:	0c c0       	rjmp	.+24     	; 0x2ecc <atan2+0x10>
    2eb4:	0c 94 d1 18 	jmp	0x31a2	; 0x31a2 <__fp_nan>
    2eb8:	0c 94 3c 19 	jmp	0x3278	; 0x3278 <__fp_zero>

00002ebc <atan2>:
atan2():
    2ebc:	e9 2f       	mov	r30, r25
    2ebe:	e0 78       	andi	r30, 0x80	; 128
    2ec0:	0e 94 1a 19 	call	0x3234	; 0x3234 <__fp_split3>
    2ec4:	40 f3       	brcs	.-48     	; 0x2e96 <__addsf3x+0xaa>
    2ec6:	09 2e       	mov	r0, r25
    2ec8:	05 2a       	or	r0, r21
    2eca:	b1 f3       	breq	.-20     	; 0x2eb8 <__addsf3x+0xcc>
    2ecc:	26 17       	cp	r18, r22
    2ece:	37 07       	cpc	r19, r23
    2ed0:	48 07       	cpc	r20, r24
    2ed2:	59 07       	cpc	r21, r25
    2ed4:	38 f0       	brcs	.+14     	; 0x2ee4 <atan2+0x28>
    2ed6:	0e 2e       	mov	r0, r30
    2ed8:	07 f8       	bld	r0, 7
    2eda:	e0 25       	eor	r30, r0
    2edc:	69 f0       	breq	.+26     	; 0x2ef8 <atan2+0x3c>
    2ede:	e0 25       	eor	r30, r0
    2ee0:	e0 64       	ori	r30, 0x40	; 64
    2ee2:	0a c0       	rjmp	.+20     	; 0x2ef8 <atan2+0x3c>
    2ee4:	ef 63       	ori	r30, 0x3F	; 63
    2ee6:	07 f8       	bld	r0, 7
    2ee8:	00 94       	com	r0
    2eea:	07 fa       	bst	r0, 7
    2eec:	db 01       	movw	r26, r22
    2eee:	b9 01       	movw	r22, r18
    2ef0:	9d 01       	movw	r18, r26
    2ef2:	dc 01       	movw	r26, r24
    2ef4:	ca 01       	movw	r24, r20
    2ef6:	ad 01       	movw	r20, r26
    2ef8:	ef 93       	push	r30
    2efa:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <__divsf3_pse>
    2efe:	0e 94 09 19 	call	0x3212	; 0x3212 <__fp_round>
    2f02:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <atan>
    2f06:	5f 91       	pop	r21
    2f08:	55 23       	and	r21, r21
    2f0a:	39 f0       	breq	.+14     	; 0x2f1a <atan2+0x5e>
    2f0c:	2b ed       	ldi	r18, 0xDB	; 219
    2f0e:	3f e0       	ldi	r19, 0x0F	; 15
    2f10:	49 e4       	ldi	r20, 0x49	; 73
    2f12:	50 fd       	sbrc	r21, 0
    2f14:	49 ec       	ldi	r20, 0xC9	; 201
    2f16:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__addsf3>
    2f1a:	08 95       	ret

00002f1c <atan>:
    2f1c:	df 93       	push	r29
    2f1e:	dd 27       	eor	r29, r29
    2f20:	b9 2f       	mov	r27, r25
    2f22:	bf 77       	andi	r27, 0x7F	; 127
    2f24:	40 e8       	ldi	r20, 0x80	; 128
    2f26:	5f e3       	ldi	r21, 0x3F	; 63
    2f28:	16 16       	cp	r1, r22
    2f2a:	17 06       	cpc	r1, r23
    2f2c:	48 07       	cpc	r20, r24
    2f2e:	5b 07       	cpc	r21, r27
    2f30:	18 f4       	brcc	.+6      	; 0x2f38 <atan+0x1c>
    2f32:	d9 2f       	mov	r29, r25
    2f34:	0e 94 43 19 	call	0x3286	; 0x3286 <inverse>
    2f38:	9f 93       	push	r25
    2f3a:	8f 93       	push	r24
    2f3c:	7f 93       	push	r23
    2f3e:	6f 93       	push	r22
    2f40:	0e 94 b8 19 	call	0x3370	; 0x3370 <square>
atan():
    2f44:	e8 e6       	ldi	r30, 0x68	; 104
    2f46:	f0 e0       	ldi	r31, 0x00	; 0
    2f48:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__fp_powser>
    2f4c:	0e 94 09 19 	call	0x3212	; 0x3212 <__fp_round>
    2f50:	2f 91       	pop	r18
    2f52:	3f 91       	pop	r19
    2f54:	4f 91       	pop	r20
    2f56:	5f 91       	pop	r21
    2f58:	0e 94 5e 19 	call	0x32bc	; 0x32bc <__mulsf3x>
    2f5c:	dd 23       	and	r29, r29
    2f5e:	51 f0       	breq	.+20     	; 0x2f74 <atan+0x58>
    2f60:	90 58       	subi	r25, 0x80	; 128
    2f62:	a2 ea       	ldi	r26, 0xA2	; 162
    2f64:	2a ed       	ldi	r18, 0xDA	; 218
    2f66:	3f e0       	ldi	r19, 0x0F	; 15
    2f68:	49 ec       	ldi	r20, 0xC9	; 201
    2f6a:	5f e3       	ldi	r21, 0x3F	; 63
    2f6c:	d0 78       	andi	r29, 0x80	; 128
    2f6e:	5d 27       	eor	r21, r29
    2f70:	0e 94 f6 16 	call	0x2dec	; 0x2dec <__addsf3x>
    2f74:	df 91       	pop	r29
    2f76:	0c 94 09 19 	jmp	0x3212	; 0x3212 <__fp_round>

00002f7a <__cmpsf2>:
__cmpsf2():
    2f7a:	0e 94 a7 18 	call	0x314e	; 0x314e <__fp_cmp>
    2f7e:	08 f4       	brcc	.+2      	; 0x2f82 <__cmpsf2+0x8>
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	08 95       	ret

00002f84 <__divsf3>:
__divsf3():
    2f84:	0e 94 d6 17 	call	0x2fac	; 0x2fac <__divsf3x>
    2f88:	0c 94 09 19 	jmp	0x3212	; 0x3212 <__fp_round>
    2f8c:	0e 94 02 19 	call	0x3204	; 0x3204 <__fp_pscB>
    2f90:	58 f0       	brcs	.+22     	; 0x2fa8 <__divsf3+0x24>
    2f92:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <__fp_pscA>
    2f96:	40 f0       	brcs	.+16     	; 0x2fa8 <__divsf3+0x24>
    2f98:	29 f4       	brne	.+10     	; 0x2fa4 <__divsf3+0x20>
    2f9a:	5f 3f       	cpi	r21, 0xFF	; 255
    2f9c:	29 f0       	breq	.+10     	; 0x2fa8 <__divsf3+0x24>
    2f9e:	0c 94 cb 18 	jmp	0x3196	; 0x3196 <__fp_inf>
    2fa2:	51 11       	cpse	r21, r1
    2fa4:	0c 94 3d 19 	jmp	0x327a	; 0x327a <__fp_szero>
    2fa8:	0c 94 d1 18 	jmp	0x31a2	; 0x31a2 <__fp_nan>

00002fac <__divsf3x>:
__divsf3x():
    2fac:	0e 94 1a 19 	call	0x3234	; 0x3234 <__fp_split3>
    2fb0:	68 f3       	brcs	.-38     	; 0x2f8c <__divsf3+0x8>

00002fb2 <__divsf3_pse>:
    2fb2:	99 23       	and	r25, r25
    2fb4:	b1 f3       	breq	.-20     	; 0x2fa2 <__divsf3+0x1e>
    2fb6:	55 23       	and	r21, r21
    2fb8:	91 f3       	breq	.-28     	; 0x2f9e <__divsf3+0x1a>
    2fba:	95 1b       	sub	r25, r21
    2fbc:	55 0b       	sbc	r21, r21
    2fbe:	bb 27       	eor	r27, r27
    2fc0:	aa 27       	eor	r26, r26
    2fc2:	62 17       	cp	r22, r18
    2fc4:	73 07       	cpc	r23, r19
    2fc6:	84 07       	cpc	r24, r20
    2fc8:	38 f0       	brcs	.+14     	; 0x2fd8 <__divsf3_pse+0x26>
    2fca:	9f 5f       	subi	r25, 0xFF	; 255
    2fcc:	5f 4f       	sbci	r21, 0xFF	; 255
    2fce:	22 0f       	add	r18, r18
    2fd0:	33 1f       	adc	r19, r19
    2fd2:	44 1f       	adc	r20, r20
    2fd4:	aa 1f       	adc	r26, r26
    2fd6:	a9 f3       	breq	.-22     	; 0x2fc2 <__divsf3_pse+0x10>
    2fd8:	35 d0       	rcall	.+106    	; 0x3044 <__divsf3_pse+0x92>
    2fda:	0e 2e       	mov	r0, r30
    2fdc:	3a f0       	brmi	.+14     	; 0x2fec <__divsf3_pse+0x3a>
    2fde:	e0 e8       	ldi	r30, 0x80	; 128
    2fe0:	32 d0       	rcall	.+100    	; 0x3046 <__divsf3_pse+0x94>
    2fe2:	91 50       	subi	r25, 0x01	; 1
    2fe4:	50 40       	sbci	r21, 0x00	; 0
    2fe6:	e6 95       	lsr	r30
    2fe8:	00 1c       	adc	r0, r0
    2fea:	ca f7       	brpl	.-14     	; 0x2fde <__divsf3_pse+0x2c>
    2fec:	2b d0       	rcall	.+86     	; 0x3044 <__divsf3_pse+0x92>
    2fee:	fe 2f       	mov	r31, r30
    2ff0:	29 d0       	rcall	.+82     	; 0x3044 <__divsf3_pse+0x92>
    2ff2:	66 0f       	add	r22, r22
    2ff4:	77 1f       	adc	r23, r23
    2ff6:	88 1f       	adc	r24, r24
    2ff8:	bb 1f       	adc	r27, r27
    2ffa:	26 17       	cp	r18, r22
    2ffc:	37 07       	cpc	r19, r23
    2ffe:	48 07       	cpc	r20, r24
    3000:	ab 07       	cpc	r26, r27
    3002:	b0 e8       	ldi	r27, 0x80	; 128
    3004:	09 f0       	breq	.+2      	; 0x3008 <__divsf3_pse+0x56>
    3006:	bb 0b       	sbc	r27, r27
    3008:	80 2d       	mov	r24, r0
    300a:	bf 01       	movw	r22, r30
    300c:	ff 27       	eor	r31, r31
    300e:	93 58       	subi	r25, 0x83	; 131
    3010:	5f 4f       	sbci	r21, 0xFF	; 255
    3012:	3a f0       	brmi	.+14     	; 0x3022 <__divsf3_pse+0x70>
    3014:	9e 3f       	cpi	r25, 0xFE	; 254
    3016:	51 05       	cpc	r21, r1
    3018:	78 f0       	brcs	.+30     	; 0x3038 <__divsf3_pse+0x86>
    301a:	0c 94 cb 18 	jmp	0x3196	; 0x3196 <__fp_inf>
    301e:	0c 94 3d 19 	jmp	0x327a	; 0x327a <__fp_szero>
    3022:	5f 3f       	cpi	r21, 0xFF	; 255
    3024:	e4 f3       	brlt	.-8      	; 0x301e <__divsf3_pse+0x6c>
    3026:	98 3e       	cpi	r25, 0xE8	; 232
    3028:	d4 f3       	brlt	.-12     	; 0x301e <__divsf3_pse+0x6c>
    302a:	86 95       	lsr	r24
    302c:	77 95       	ror	r23
    302e:	67 95       	ror	r22
    3030:	b7 95       	ror	r27
    3032:	f7 95       	ror	r31
    3034:	9f 5f       	subi	r25, 0xFF	; 255
    3036:	c9 f7       	brne	.-14     	; 0x302a <__divsf3_pse+0x78>
    3038:	88 0f       	add	r24, r24
    303a:	91 1d       	adc	r25, r1
    303c:	96 95       	lsr	r25
    303e:	87 95       	ror	r24
    3040:	97 f9       	bld	r25, 7
    3042:	08 95       	ret
    3044:	e1 e0       	ldi	r30, 0x01	; 1
    3046:	66 0f       	add	r22, r22
    3048:	77 1f       	adc	r23, r23
    304a:	88 1f       	adc	r24, r24
    304c:	bb 1f       	adc	r27, r27
    304e:	62 17       	cp	r22, r18
    3050:	73 07       	cpc	r23, r19
    3052:	84 07       	cpc	r24, r20
    3054:	ba 07       	cpc	r27, r26
    3056:	20 f0       	brcs	.+8      	; 0x3060 <__divsf3_pse+0xae>
    3058:	62 1b       	sub	r22, r18
    305a:	73 0b       	sbc	r23, r19
    305c:	84 0b       	sbc	r24, r20
    305e:	ba 0b       	sbc	r27, r26
    3060:	ee 1f       	adc	r30, r30
    3062:	88 f7       	brcc	.-30     	; 0x3046 <__divsf3_pse+0x94>
    3064:	e0 95       	com	r30
    3066:	08 95       	ret

00003068 <__fixsfsi>:
    3068:	0e 94 3b 18 	call	0x3076	; 0x3076 <__fixunssfsi>
    306c:	68 94       	set
    306e:	b1 11       	cpse	r27, r1
    3070:	0c 94 3d 19 	jmp	0x327a	; 0x327a <__fp_szero>
    3074:	08 95       	ret

00003076 <__fixunssfsi>:
    3076:	0e 94 22 19 	call	0x3244	; 0x3244 <__fp_splitA>
    307a:	88 f0       	brcs	.+34     	; 0x309e <__fixunssfsi+0x28>
    307c:	9f 57       	subi	r25, 0x7F	; 127
    307e:	98 f0       	brcs	.+38     	; 0x30a6 <__fixunssfsi+0x30>
    3080:	b9 2f       	mov	r27, r25
    3082:	99 27       	eor	r25, r25
    3084:	b7 51       	subi	r27, 0x17	; 23
    3086:	b0 f0       	brcs	.+44     	; 0x30b4 <__fixunssfsi+0x3e>
__fixunssfsi():
    3088:	e1 f0       	breq	.+56     	; 0x30c2 <__fixunssfsi+0x4c>
    308a:	66 0f       	add	r22, r22
    308c:	77 1f       	adc	r23, r23
    308e:	88 1f       	adc	r24, r24
    3090:	99 1f       	adc	r25, r25
    3092:	1a f0       	brmi	.+6      	; 0x309a <__fixunssfsi+0x24>
    3094:	ba 95       	dec	r27
    3096:	c9 f7       	brne	.-14     	; 0x308a <__fixunssfsi+0x14>
    3098:	14 c0       	rjmp	.+40     	; 0x30c2 <__fixunssfsi+0x4c>
    309a:	b1 30       	cpi	r27, 0x01	; 1
    309c:	91 f0       	breq	.+36     	; 0x30c2 <__fixunssfsi+0x4c>
    309e:	0e 94 3c 19 	call	0x3278	; 0x3278 <__fp_zero>
    30a2:	b1 e0       	ldi	r27, 0x01	; 1
    30a4:	08 95       	ret
    30a6:	0c 94 3c 19 	jmp	0x3278	; 0x3278 <__fp_zero>
    30aa:	67 2f       	mov	r22, r23
    30ac:	78 2f       	mov	r23, r24
    30ae:	88 27       	eor	r24, r24
    30b0:	b8 5f       	subi	r27, 0xF8	; 248
    30b2:	39 f0       	breq	.+14     	; 0x30c2 <__fixunssfsi+0x4c>
    30b4:	b9 3f       	cpi	r27, 0xF9	; 249
    30b6:	cc f3       	brlt	.-14     	; 0x30aa <__fixunssfsi+0x34>
    30b8:	86 95       	lsr	r24
    30ba:	77 95       	ror	r23
    30bc:	67 95       	ror	r22
    30be:	b3 95       	inc	r27
    30c0:	d9 f7       	brne	.-10     	; 0x30b8 <__fixunssfsi+0x42>
    30c2:	3e f4       	brtc	.+14     	; 0x30d2 <__fixunssfsi+0x5c>
    30c4:	90 95       	com	r25
    30c6:	80 95       	com	r24
    30c8:	70 95       	com	r23
    30ca:	61 95       	neg	r22
    30cc:	7f 4f       	sbci	r23, 0xFF	; 255
    30ce:	8f 4f       	sbci	r24, 0xFF	; 255
    30d0:	9f 4f       	sbci	r25, 0xFF	; 255
    30d2:	08 95       	ret

000030d4 <__floatunsisf>:
__floatunsisf():
    30d4:	e8 94       	clt
    30d6:	09 c0       	rjmp	.+18     	; 0x30ea <__floatsisf+0x12>

000030d8 <__floatsisf>:
    30d8:	97 fb       	bst	r25, 7
    30da:	3e f4       	brtc	.+14     	; 0x30ea <__floatsisf+0x12>
    30dc:	90 95       	com	r25
    30de:	80 95       	com	r24
    30e0:	70 95       	com	r23
    30e2:	61 95       	neg	r22
    30e4:	7f 4f       	sbci	r23, 0xFF	; 255
    30e6:	8f 4f       	sbci	r24, 0xFF	; 255
    30e8:	9f 4f       	sbci	r25, 0xFF	; 255
    30ea:	99 23       	and	r25, r25
    30ec:	a9 f0       	breq	.+42     	; 0x3118 <__floatsisf+0x40>
    30ee:	f9 2f       	mov	r31, r25
    30f0:	96 e9       	ldi	r25, 0x96	; 150
    30f2:	bb 27       	eor	r27, r27
    30f4:	93 95       	inc	r25
    30f6:	f6 95       	lsr	r31
    30f8:	87 95       	ror	r24
    30fa:	77 95       	ror	r23
    30fc:	67 95       	ror	r22
    30fe:	b7 95       	ror	r27
    3100:	f1 11       	cpse	r31, r1
    3102:	f8 cf       	rjmp	.-16     	; 0x30f4 <__floatsisf+0x1c>
    3104:	fa f4       	brpl	.+62     	; 0x3144 <__floatsisf+0x6c>
    3106:	bb 0f       	add	r27, r27
    3108:	11 f4       	brne	.+4      	; 0x310e <__floatsisf+0x36>
    310a:	60 ff       	sbrs	r22, 0
    310c:	1b c0       	rjmp	.+54     	; 0x3144 <__floatsisf+0x6c>
    310e:	6f 5f       	subi	r22, 0xFF	; 255
    3110:	7f 4f       	sbci	r23, 0xFF	; 255
    3112:	8f 4f       	sbci	r24, 0xFF	; 255
    3114:	9f 4f       	sbci	r25, 0xFF	; 255
    3116:	16 c0       	rjmp	.+44     	; 0x3144 <__floatsisf+0x6c>
    3118:	88 23       	and	r24, r24
    311a:	11 f0       	breq	.+4      	; 0x3120 <__floatsisf+0x48>
    311c:	96 e9       	ldi	r25, 0x96	; 150
    311e:	11 c0       	rjmp	.+34     	; 0x3142 <__floatsisf+0x6a>
    3120:	77 23       	and	r23, r23
    3122:	21 f0       	breq	.+8      	; 0x312c <__floatsisf+0x54>
    3124:	9e e8       	ldi	r25, 0x8E	; 142
    3126:	87 2f       	mov	r24, r23
    3128:	76 2f       	mov	r23, r22
    312a:	05 c0       	rjmp	.+10     	; 0x3136 <__floatsisf+0x5e>
    312c:	66 23       	and	r22, r22
    312e:	71 f0       	breq	.+28     	; 0x314c <__floatsisf+0x74>
    3130:	96 e8       	ldi	r25, 0x86	; 134
    3132:	86 2f       	mov	r24, r22
    3134:	70 e0       	ldi	r23, 0x00	; 0
    3136:	60 e0       	ldi	r22, 0x00	; 0
    3138:	2a f0       	brmi	.+10     	; 0x3144 <__floatsisf+0x6c>
    313a:	9a 95       	dec	r25
    313c:	66 0f       	add	r22, r22
    313e:	77 1f       	adc	r23, r23
    3140:	88 1f       	adc	r24, r24
    3142:	da f7       	brpl	.-10     	; 0x313a <__floatsisf+0x62>
    3144:	88 0f       	add	r24, r24
    3146:	96 95       	lsr	r25
    3148:	87 95       	ror	r24
    314a:	97 f9       	bld	r25, 7
    314c:	08 95       	ret

0000314e <__fp_cmp>:
__fp_cmp():
    314e:	99 0f       	add	r25, r25
    3150:	00 08       	sbc	r0, r0
    3152:	55 0f       	add	r21, r21
    3154:	aa 0b       	sbc	r26, r26
    3156:	e0 e8       	ldi	r30, 0x80	; 128
    3158:	fe ef       	ldi	r31, 0xFE	; 254
    315a:	16 16       	cp	r1, r22
    315c:	17 06       	cpc	r1, r23
    315e:	e8 07       	cpc	r30, r24
    3160:	f9 07       	cpc	r31, r25
    3162:	c0 f0       	brcs	.+48     	; 0x3194 <__fp_cmp+0x46>
    3164:	12 16       	cp	r1, r18
    3166:	13 06       	cpc	r1, r19
    3168:	e4 07       	cpc	r30, r20
    316a:	f5 07       	cpc	r31, r21
    316c:	98 f0       	brcs	.+38     	; 0x3194 <__fp_cmp+0x46>
    316e:	62 1b       	sub	r22, r18
    3170:	73 0b       	sbc	r23, r19
    3172:	84 0b       	sbc	r24, r20
    3174:	95 0b       	sbc	r25, r21
    3176:	39 f4       	brne	.+14     	; 0x3186 <__fp_cmp+0x38>
    3178:	0a 26       	eor	r0, r26
    317a:	61 f0       	breq	.+24     	; 0x3194 <__fp_cmp+0x46>
    317c:	23 2b       	or	r18, r19
    317e:	24 2b       	or	r18, r20
    3180:	25 2b       	or	r18, r21
    3182:	21 f4       	brne	.+8      	; 0x318c <__fp_cmp+0x3e>
    3184:	08 95       	ret
    3186:	0a 26       	eor	r0, r26
    3188:	09 f4       	brne	.+2      	; 0x318c <__fp_cmp+0x3e>
    318a:	a1 40       	sbci	r26, 0x01	; 1
    318c:	a6 95       	lsr	r26
    318e:	8f ef       	ldi	r24, 0xFF	; 255
    3190:	81 1d       	adc	r24, r1
    3192:	81 1d       	adc	r24, r1
    3194:	08 95       	ret

00003196 <__fp_inf>:
__fp_inf():
    3196:	97 f9       	bld	r25, 7
    3198:	9f 67       	ori	r25, 0x7F	; 127
    319a:	80 e8       	ldi	r24, 0x80	; 128
    319c:	70 e0       	ldi	r23, 0x00	; 0
    319e:	60 e0       	ldi	r22, 0x00	; 0
    31a0:	08 95       	ret

000031a2 <__fp_nan>:
__fp_nan():
    31a2:	9f ef       	ldi	r25, 0xFF	; 255
    31a4:	80 ec       	ldi	r24, 0xC0	; 192
    31a6:	08 95       	ret

000031a8 <__fp_powser>:
__fp_powser():
    31a8:	df 93       	push	r29
    31aa:	cf 93       	push	r28
    31ac:	1f 93       	push	r17
    31ae:	0f 93       	push	r16
    31b0:	ff 92       	push	r15
    31b2:	ef 92       	push	r14
    31b4:	df 92       	push	r13
    31b6:	7b 01       	movw	r14, r22
    31b8:	8c 01       	movw	r16, r24
    31ba:	68 94       	set
    31bc:	06 c0       	rjmp	.+12     	; 0x31ca <__fp_powser+0x22>
    31be:	da 2e       	mov	r13, r26
    31c0:	ef 01       	movw	r28, r30
    31c2:	0e 94 5e 19 	call	0x32bc	; 0x32bc <__mulsf3x>
    31c6:	fe 01       	movw	r30, r28
    31c8:	e8 94       	clt
    31ca:	a5 91       	lpm	r26, Z+
    31cc:	25 91       	lpm	r18, Z+
    31ce:	35 91       	lpm	r19, Z+
    31d0:	45 91       	lpm	r20, Z+
    31d2:	55 91       	lpm	r21, Z+
    31d4:	a6 f3       	brts	.-24     	; 0x31be <__fp_powser+0x16>
    31d6:	ef 01       	movw	r28, r30
    31d8:	0e 94 f6 16 	call	0x2dec	; 0x2dec <__addsf3x>
    31dc:	fe 01       	movw	r30, r28
    31de:	97 01       	movw	r18, r14
    31e0:	a8 01       	movw	r20, r16
    31e2:	da 94       	dec	r13
    31e4:	69 f7       	brne	.-38     	; 0x31c0 <__fp_powser+0x18>
    31e6:	df 90       	pop	r13
    31e8:	ef 90       	pop	r14
    31ea:	ff 90       	pop	r15
    31ec:	0f 91       	pop	r16
    31ee:	1f 91       	pop	r17
    31f0:	cf 91       	pop	r28
    31f2:	df 91       	pop	r29
    31f4:	08 95       	ret

000031f6 <__fp_pscA>:
__fp_pscA():
    31f6:	00 24       	eor	r0, r0
    31f8:	0a 94       	dec	r0
    31fa:	16 16       	cp	r1, r22
    31fc:	17 06       	cpc	r1, r23
    31fe:	18 06       	cpc	r1, r24
    3200:	09 06       	cpc	r0, r25
    3202:	08 95       	ret

00003204 <__fp_pscB>:
__fp_pscB():
    3204:	00 24       	eor	r0, r0
    3206:	0a 94       	dec	r0
    3208:	12 16       	cp	r1, r18
    320a:	13 06       	cpc	r1, r19
    320c:	14 06       	cpc	r1, r20
    320e:	05 06       	cpc	r0, r21
    3210:	08 95       	ret

00003212 <__fp_round>:
__fp_round():
    3212:	09 2e       	mov	r0, r25
    3214:	03 94       	inc	r0
    3216:	00 0c       	add	r0, r0
    3218:	11 f4       	brne	.+4      	; 0x321e <__fp_round+0xc>
    321a:	88 23       	and	r24, r24
    321c:	52 f0       	brmi	.+20     	; 0x3232 <__fp_round+0x20>
    321e:	bb 0f       	add	r27, r27
    3220:	40 f4       	brcc	.+16     	; 0x3232 <__fp_round+0x20>
    3222:	bf 2b       	or	r27, r31
    3224:	11 f4       	brne	.+4      	; 0x322a <__fp_round+0x18>
    3226:	60 ff       	sbrs	r22, 0
    3228:	04 c0       	rjmp	.+8      	; 0x3232 <__fp_round+0x20>
    322a:	6f 5f       	subi	r22, 0xFF	; 255
    322c:	7f 4f       	sbci	r23, 0xFF	; 255
    322e:	8f 4f       	sbci	r24, 0xFF	; 255
    3230:	9f 4f       	sbci	r25, 0xFF	; 255
    3232:	08 95       	ret

00003234 <__fp_split3>:
__fp_split3():
    3234:	57 fd       	sbrc	r21, 7
    3236:	90 58       	subi	r25, 0x80	; 128
    3238:	44 0f       	add	r20, r20
    323a:	55 1f       	adc	r21, r21
    323c:	59 f0       	breq	.+22     	; 0x3254 <__fp_splitA+0x10>
    323e:	5f 3f       	cpi	r21, 0xFF	; 255
    3240:	71 f0       	breq	.+28     	; 0x325e <__fp_splitA+0x1a>
    3242:	47 95       	ror	r20

00003244 <__fp_splitA>:
    3244:	88 0f       	add	r24, r24
    3246:	97 fb       	bst	r25, 7
    3248:	99 1f       	adc	r25, r25
    324a:	61 f0       	breq	.+24     	; 0x3264 <__fp_splitA+0x20>
    324c:	9f 3f       	cpi	r25, 0xFF	; 255
    324e:	79 f0       	breq	.+30     	; 0x326e <__fp_splitA+0x2a>
    3250:	87 95       	ror	r24
    3252:	08 95       	ret
    3254:	12 16       	cp	r1, r18
    3256:	13 06       	cpc	r1, r19
    3258:	14 06       	cpc	r1, r20
    325a:	55 1f       	adc	r21, r21
    325c:	f2 cf       	rjmp	.-28     	; 0x3242 <__fp_split3+0xe>
    325e:	46 95       	lsr	r20
    3260:	f1 df       	rcall	.-30     	; 0x3244 <__fp_splitA>
    3262:	08 c0       	rjmp	.+16     	; 0x3274 <__fp_splitA+0x30>
    3264:	16 16       	cp	r1, r22
    3266:	17 06       	cpc	r1, r23
    3268:	18 06       	cpc	r1, r24
    326a:	99 1f       	adc	r25, r25
    326c:	f1 cf       	rjmp	.-30     	; 0x3250 <__fp_splitA+0xc>
    326e:	86 95       	lsr	r24
    3270:	71 05       	cpc	r23, r1
    3272:	61 05       	cpc	r22, r1
    3274:	08 94       	sec
    3276:	08 95       	ret

00003278 <__fp_zero>:
__fp_zero():
    3278:	e8 94       	clt

0000327a <__fp_szero>:
    327a:	bb 27       	eor	r27, r27
    327c:	66 27       	eor	r22, r22
    327e:	77 27       	eor	r23, r23
    3280:	cb 01       	movw	r24, r22
    3282:	97 f9       	bld	r25, 7
    3284:	08 95       	ret

00003286 <inverse>:
inverse():
    3286:	9b 01       	movw	r18, r22
    3288:	ac 01       	movw	r20, r24
    328a:	60 e0       	ldi	r22, 0x00	; 0
    328c:	70 e0       	ldi	r23, 0x00	; 0
    328e:	80 e8       	ldi	r24, 0x80	; 128
    3290:	9f e3       	ldi	r25, 0x3F	; 63
    3292:	0c 94 c2 17 	jmp	0x2f84	; 0x2f84 <__divsf3>

00003296 <__mulsf3>:
__mulsf3():
    3296:	0e 94 5e 19 	call	0x32bc	; 0x32bc <__mulsf3x>
    329a:	0c 94 09 19 	jmp	0x3212	; 0x3212 <__fp_round>
    329e:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <__fp_pscA>
    32a2:	38 f0       	brcs	.+14     	; 0x32b2 <__mulsf3+0x1c>
    32a4:	0e 94 02 19 	call	0x3204	; 0x3204 <__fp_pscB>
    32a8:	20 f0       	brcs	.+8      	; 0x32b2 <__mulsf3+0x1c>
    32aa:	95 23       	and	r25, r21
    32ac:	11 f0       	breq	.+4      	; 0x32b2 <__mulsf3+0x1c>
    32ae:	0c 94 cb 18 	jmp	0x3196	; 0x3196 <__fp_inf>
    32b2:	0c 94 d1 18 	jmp	0x31a2	; 0x31a2 <__fp_nan>
    32b6:	11 24       	eor	r1, r1
    32b8:	0c 94 3d 19 	jmp	0x327a	; 0x327a <__fp_szero>

000032bc <__mulsf3x>:
__mulsf3x():
    32bc:	0e 94 1a 19 	call	0x3234	; 0x3234 <__fp_split3>
    32c0:	70 f3       	brcs	.-36     	; 0x329e <__mulsf3+0x8>

000032c2 <__mulsf3_pse>:
    32c2:	95 9f       	mul	r25, r21
    32c4:	c1 f3       	breq	.-16     	; 0x32b6 <__mulsf3+0x20>
    32c6:	95 0f       	add	r25, r21
    32c8:	50 e0       	ldi	r21, 0x00	; 0
    32ca:	55 1f       	adc	r21, r21
    32cc:	62 9f       	mul	r22, r18
    32ce:	f0 01       	movw	r30, r0
    32d0:	72 9f       	mul	r23, r18
    32d2:	bb 27       	eor	r27, r27
    32d4:	f0 0d       	add	r31, r0
    32d6:	b1 1d       	adc	r27, r1
    32d8:	63 9f       	mul	r22, r19
    32da:	aa 27       	eor	r26, r26
    32dc:	f0 0d       	add	r31, r0
    32de:	b1 1d       	adc	r27, r1
    32e0:	aa 1f       	adc	r26, r26
    32e2:	64 9f       	mul	r22, r20
    32e4:	66 27       	eor	r22, r22
    32e6:	b0 0d       	add	r27, r0
    32e8:	a1 1d       	adc	r26, r1
    32ea:	66 1f       	adc	r22, r22
    32ec:	82 9f       	mul	r24, r18
    32ee:	22 27       	eor	r18, r18
    32f0:	b0 0d       	add	r27, r0
    32f2:	a1 1d       	adc	r26, r1
    32f4:	62 1f       	adc	r22, r18
    32f6:	73 9f       	mul	r23, r19
    32f8:	b0 0d       	add	r27, r0
    32fa:	a1 1d       	adc	r26, r1
    32fc:	62 1f       	adc	r22, r18
    32fe:	83 9f       	mul	r24, r19
    3300:	a0 0d       	add	r26, r0
    3302:	61 1d       	adc	r22, r1
    3304:	22 1f       	adc	r18, r18
    3306:	74 9f       	mul	r23, r20
    3308:	33 27       	eor	r19, r19
    330a:	a0 0d       	add	r26, r0
    330c:	61 1d       	adc	r22, r1
    330e:	23 1f       	adc	r18, r19
    3310:	84 9f       	mul	r24, r20
    3312:	60 0d       	add	r22, r0
    3314:	21 1d       	adc	r18, r1
    3316:	82 2f       	mov	r24, r18
    3318:	76 2f       	mov	r23, r22
    331a:	6a 2f       	mov	r22, r26
    331c:	11 24       	eor	r1, r1
    331e:	9f 57       	subi	r25, 0x7F	; 127
    3320:	50 40       	sbci	r21, 0x00	; 0
    3322:	9a f0       	brmi	.+38     	; 0x334a <__mulsf3_pse+0x88>
    3324:	f1 f0       	breq	.+60     	; 0x3362 <__mulsf3_pse+0xa0>
    3326:	88 23       	and	r24, r24
    3328:	4a f0       	brmi	.+18     	; 0x333c <__mulsf3_pse+0x7a>
    332a:	ee 0f       	add	r30, r30
    332c:	ff 1f       	adc	r31, r31
    332e:	bb 1f       	adc	r27, r27
    3330:	66 1f       	adc	r22, r22
    3332:	77 1f       	adc	r23, r23
    3334:	88 1f       	adc	r24, r24
    3336:	91 50       	subi	r25, 0x01	; 1
    3338:	50 40       	sbci	r21, 0x00	; 0
    333a:	a9 f7       	brne	.-22     	; 0x3326 <__mulsf3_pse+0x64>
    333c:	9e 3f       	cpi	r25, 0xFE	; 254
    333e:	51 05       	cpc	r21, r1
    3340:	80 f0       	brcs	.+32     	; 0x3362 <__mulsf3_pse+0xa0>
    3342:	0c 94 cb 18 	jmp	0x3196	; 0x3196 <__fp_inf>
    3346:	0c 94 3d 19 	jmp	0x327a	; 0x327a <__fp_szero>
    334a:	5f 3f       	cpi	r21, 0xFF	; 255
    334c:	e4 f3       	brlt	.-8      	; 0x3346 <__mulsf3_pse+0x84>
    334e:	98 3e       	cpi	r25, 0xE8	; 232
    3350:	d4 f3       	brlt	.-12     	; 0x3346 <__mulsf3_pse+0x84>
    3352:	86 95       	lsr	r24
    3354:	77 95       	ror	r23
    3356:	67 95       	ror	r22
    3358:	b7 95       	ror	r27
    335a:	f7 95       	ror	r31
    335c:	e7 95       	ror	r30
    335e:	9f 5f       	subi	r25, 0xFF	; 255
    3360:	c1 f7       	brne	.-16     	; 0x3352 <__mulsf3_pse+0x90>
    3362:	fe 2b       	or	r31, r30
    3364:	88 0f       	add	r24, r24
    3366:	91 1d       	adc	r25, r1
    3368:	96 95       	lsr	r25
    336a:	87 95       	ror	r24
    336c:	97 f9       	bld	r25, 7
    336e:	08 95       	ret

00003370 <square>:
    3370:	9b 01       	movw	r18, r22
    3372:	ac 01       	movw	r20, r24
    3374:	0c 94 4b 19 	jmp	0x3296	; 0x3296 <__mulsf3>

00003378 <__mulsi3>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
    3378:	db 01       	movw	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
    337a:	8f 93       	push	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
    337c:	9f 93       	push	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
    337e:	0e 94 2d 1a 	call	0x345a	; 0x345a <__muluhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
    3382:	bf 91       	pop	r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
    3384:	af 91       	pop	r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
    3386:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
    3388:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
    338a:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
    338c:	a3 9f       	mul	r26, r19
__mulsi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
    338e:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
    3390:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
    3392:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
    3394:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
    3396:	08 95       	ret

00003398 <__udivmodqi4>:
__udivmodqi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
    3398:	99 1b       	sub	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
    339a:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
    339c:	04 c0       	rjmp	.+8      	; 0x33a6 <__udivmodqi4_ep>

0000339e <__udivmodqi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
    339e:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
    33a0:	96 17       	cp	r25, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
    33a2:	08 f0       	brcs	.+2      	; 0x33a6 <__udivmodqi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
    33a4:	96 1b       	sub	r25, r22

000033a6 <__udivmodqi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
    33a6:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
    33a8:	7a 95       	dec	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
    33aa:	c9 f7       	brne	.-14     	; 0x339e <__udivmodqi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
    33ac:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
    33ae:	08 95       	ret

000033b0 <__divmodhi4>:
__divmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    33b0:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    33b2:	07 2e       	mov	r0, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    33b4:	16 f4       	brtc	.+4      	; 0x33ba <__divmodhi4+0xa>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    33b6:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    33b8:	07 d0       	rcall	.+14     	; 0x33c8 <__divmodhi4_neg1>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    33ba:	77 fd       	sbrc	r23, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    33bc:	09 d0       	rcall	.+18     	; 0x33d0 <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    33be:	0e 94 38 1a 	call	0x3470	; 0x3470 <__udivmodhi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    33c2:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    33c4:	05 d0       	rcall	.+10     	; 0x33d0 <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    33c6:	3e f4       	brtc	.+14     	; 0x33d6 <__divmodhi4_exit>

000033c8 <__divmodhi4_neg1>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    33c8:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    33ca:	81 95       	neg	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    33cc:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    33ce:	08 95       	ret

000033d0 <__divmodhi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    33d0:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    33d2:	61 95       	neg	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    33d4:	7f 4f       	sbci	r23, 0xFF	; 255

000033d6 <__divmodhi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    33d6:	08 95       	ret

000033d8 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    33d8:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    33da:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    33dc:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    33de:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    33e0:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    33e2:	0d c0       	rjmp	.+26     	; 0x33fe <__udivmodsi4_ep>

000033e4 <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    33e4:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    33e6:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    33e8:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    33ea:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    33ec:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    33ee:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    33f0:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    33f2:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    33f4:	20 f0       	brcs	.+8      	; 0x33fe <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    33f6:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    33f8:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    33fa:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    33fc:	f5 0b       	sbc	r31, r21

000033fe <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    33fe:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    3400:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    3402:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    3404:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    3406:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    3408:	69 f7       	brne	.-38     	; 0x33e4 <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    340a:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    340c:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    340e:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    3410:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    3412:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    3414:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    3416:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    3418:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    341a:	08 95       	ret

0000341c <__divmodsi4>:
__divmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    341c:	05 2e       	mov	r0, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    341e:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    3420:	1e f4       	brtc	.+6      	; 0x3428 <__divmodsi4+0xc>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    3422:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    3424:	0e 94 25 1a 	call	0x344a	; 0x344a <__negsi2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    3428:	57 fd       	sbrc	r21, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    342a:	07 d0       	rcall	.+14     	; 0x343a <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    342c:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <__udivmodsi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    3430:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    3432:	03 d0       	rcall	.+6      	; 0x343a <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    3434:	4e f4       	brtc	.+18     	; 0x3448 <__divmodsi4_exit>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    3436:	0c 94 25 1a 	jmp	0x344a	; 0x344a <__negsi2>

0000343a <__divmodsi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    343a:	50 95       	com	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    343c:	40 95       	com	r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    343e:	30 95       	com	r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    3440:	21 95       	neg	r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    3442:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    3444:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    3446:	5f 4f       	sbci	r21, 0xFF	; 255

00003448 <__divmodsi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    3448:	08 95       	ret

0000344a <__negsi2>:
__negsi2():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    344a:	90 95       	com	r25
    344c:	80 95       	com	r24
    344e:	70 95       	com	r23
    3450:	61 95       	neg	r22
    3452:	7f 4f       	sbci	r23, 0xFF	; 255
    3454:	8f 4f       	sbci	r24, 0xFF	; 255
    3456:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    3458:	08 95       	ret

0000345a <__muluhisi3>:
__muluhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    345a:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <__umulhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    345e:	a5 9f       	mul	r26, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    3460:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    3462:	b4 9f       	mul	r27, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    3464:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    3466:	a4 9f       	mul	r26, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    3468:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    346a:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    346c:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    346e:	08 95       	ret

00003470 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    3470:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    3472:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    3474:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    3476:	07 c0       	rjmp	.+14     	; 0x3486 <__udivmodhi4_ep>

00003478 <__udivmodhi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    3478:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    347a:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    347c:	a6 17       	cp	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    347e:	b7 07       	cpc	r27, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    3480:	10 f0       	brcs	.+4      	; 0x3486 <__udivmodhi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    3482:	a6 1b       	sub	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    3484:	b7 0b       	sbc	r27, r23

00003486 <__udivmodhi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    3486:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    3488:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    348a:	5a 95       	dec	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    348c:	a9 f7       	brne	.-22     	; 0x3478 <__udivmodhi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    348e:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    3490:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    3492:	bc 01       	movw	r22, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    3494:	cd 01       	movw	r24, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    3496:	08 95       	ret

00003498 <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    3498:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    349a:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    349c:	05 90       	lpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    349e:	f4 91       	lpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    34a0:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    34a2:	09 94       	ijmp

000034a4 <__umulhisi3>:
__umulhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    34a4:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    34a6:	b0 01       	movw	r22, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    34a8:	b3 9f       	mul	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    34aa:	c0 01       	movw	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    34ac:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    34ae:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    34b0:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    34b2:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    34b4:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    34b6:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    34b8:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    34ba:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    34bc:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    34be:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    34c0:	08 95       	ret

000034c2 <dtostrf>:
dtostrf():
    34c2:	ef 92       	push	r14
    34c4:	0f 93       	push	r16
    34c6:	1f 93       	push	r17
    34c8:	cf 93       	push	r28
    34ca:	df 93       	push	r29
    34cc:	e8 01       	movw	r28, r16
    34ce:	34 e0       	ldi	r19, 0x04	; 4
    34d0:	47 fd       	sbrc	r20, 7
    34d2:	34 e1       	ldi	r19, 0x14	; 20
    34d4:	04 2e       	mov	r0, r20
    34d6:	00 0c       	add	r0, r0
    34d8:	55 0b       	sbc	r21, r21
    34da:	57 ff       	sbrs	r21, 7
    34dc:	03 c0       	rjmp	.+6      	; 0x34e4 <dtostrf+0x22>
    34de:	51 95       	neg	r21
    34e0:	41 95       	neg	r20
    34e2:	51 09       	sbc	r21, r1
    34e4:	e3 2e       	mov	r14, r19
    34e6:	02 2f       	mov	r16, r18
    34e8:	24 2f       	mov	r18, r20
    34ea:	ae 01       	movw	r20, r28
    34ec:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <dtoa_prf>
    34f0:	ce 01       	movw	r24, r28
    34f2:	df 91       	pop	r29
    34f4:	cf 91       	pop	r28
    34f6:	1f 91       	pop	r17
    34f8:	0f 91       	pop	r16
    34fa:	ef 90       	pop	r14
    34fc:	08 95       	ret

000034fe <malloc>:
malloc():
    34fe:	0f 93       	push	r16
    3500:	1f 93       	push	r17
    3502:	cf 93       	push	r28
    3504:	df 93       	push	r29
    3506:	82 30       	cpi	r24, 0x02	; 2
    3508:	91 05       	cpc	r25, r1
    350a:	10 f4       	brcc	.+4      	; 0x3510 <malloc+0x12>
    350c:	82 e0       	ldi	r24, 0x02	; 2
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	e0 91 18 04 	lds	r30, 0x0418	; 0x800418 <__flp>
    3514:	f0 91 19 04 	lds	r31, 0x0419	; 0x800419 <__flp+0x1>
    3518:	30 e0       	ldi	r19, 0x00	; 0
    351a:	20 e0       	ldi	r18, 0x00	; 0
    351c:	b0 e0       	ldi	r27, 0x00	; 0
    351e:	a0 e0       	ldi	r26, 0x00	; 0
    3520:	30 97       	sbiw	r30, 0x00	; 0
    3522:	99 f4       	brne	.+38     	; 0x354a <malloc+0x4c>
    3524:	21 15       	cp	r18, r1
    3526:	31 05       	cpc	r19, r1
    3528:	09 f4       	brne	.+2      	; 0x352c <malloc+0x2e>
    352a:	4a c0       	rjmp	.+148    	; 0x35c0 <malloc+0xc2>
    352c:	28 1b       	sub	r18, r24
    352e:	39 0b       	sbc	r19, r25
    3530:	24 30       	cpi	r18, 0x04	; 4
    3532:	31 05       	cpc	r19, r1
    3534:	d8 f5       	brcc	.+118    	; 0x35ac <malloc+0xae>
    3536:	8a 81       	ldd	r24, Y+2	; 0x02
    3538:	9b 81       	ldd	r25, Y+3	; 0x03
    353a:	61 15       	cp	r22, r1
    353c:	71 05       	cpc	r23, r1
    353e:	89 f1       	breq	.+98     	; 0x35a2 <malloc+0xa4>
    3540:	fb 01       	movw	r30, r22
    3542:	93 83       	std	Z+3, r25	; 0x03
    3544:	82 83       	std	Z+2, r24	; 0x02
    3546:	fe 01       	movw	r30, r28
    3548:	11 c0       	rjmp	.+34     	; 0x356c <malloc+0x6e>
    354a:	40 81       	ld	r20, Z
    354c:	51 81       	ldd	r21, Z+1	; 0x01
    354e:	02 81       	ldd	r16, Z+2	; 0x02
    3550:	13 81       	ldd	r17, Z+3	; 0x03
    3552:	48 17       	cp	r20, r24
    3554:	59 07       	cpc	r21, r25
    3556:	e0 f0       	brcs	.+56     	; 0x3590 <malloc+0x92>
    3558:	48 17       	cp	r20, r24
    355a:	59 07       	cpc	r21, r25
    355c:	99 f4       	brne	.+38     	; 0x3584 <malloc+0x86>
    355e:	10 97       	sbiw	r26, 0x00	; 0
    3560:	61 f0       	breq	.+24     	; 0x357a <malloc+0x7c>
    3562:	12 96       	adiw	r26, 0x02	; 2
    3564:	0c 93       	st	X, r16
    3566:	12 97       	sbiw	r26, 0x02	; 2
    3568:	13 96       	adiw	r26, 0x03	; 3
    356a:	1c 93       	st	X, r17
    356c:	32 96       	adiw	r30, 0x02	; 2
    356e:	cf 01       	movw	r24, r30
    3570:	df 91       	pop	r29
    3572:	cf 91       	pop	r28
    3574:	1f 91       	pop	r17
    3576:	0f 91       	pop	r16
    3578:	08 95       	ret
    357a:	00 93 18 04 	sts	0x0418, r16	; 0x800418 <__flp>
    357e:	10 93 19 04 	sts	0x0419, r17	; 0x800419 <__flp+0x1>
    3582:	f4 cf       	rjmp	.-24     	; 0x356c <malloc+0x6e>
    3584:	21 15       	cp	r18, r1
    3586:	31 05       	cpc	r19, r1
    3588:	51 f0       	breq	.+20     	; 0x359e <malloc+0xa0>
    358a:	42 17       	cp	r20, r18
    358c:	53 07       	cpc	r21, r19
    358e:	38 f0       	brcs	.+14     	; 0x359e <malloc+0xa0>
    3590:	a9 01       	movw	r20, r18
    3592:	db 01       	movw	r26, r22
    3594:	9a 01       	movw	r18, r20
    3596:	bd 01       	movw	r22, r26
    3598:	df 01       	movw	r26, r30
    359a:	f8 01       	movw	r30, r16
    359c:	c1 cf       	rjmp	.-126    	; 0x3520 <malloc+0x22>
    359e:	ef 01       	movw	r28, r30
    35a0:	f9 cf       	rjmp	.-14     	; 0x3594 <malloc+0x96>
    35a2:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <__flp+0x1>
    35a6:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <__flp>
    35aa:	cd cf       	rjmp	.-102    	; 0x3546 <malloc+0x48>
    35ac:	fe 01       	movw	r30, r28
    35ae:	e2 0f       	add	r30, r18
    35b0:	f3 1f       	adc	r31, r19
    35b2:	81 93       	st	Z+, r24
    35b4:	91 93       	st	Z+, r25
    35b6:	22 50       	subi	r18, 0x02	; 2
    35b8:	31 09       	sbc	r19, r1
    35ba:	39 83       	std	Y+1, r19	; 0x01
    35bc:	28 83       	st	Y, r18
    35be:	d7 cf       	rjmp	.-82     	; 0x356e <malloc+0x70>
    35c0:	20 91 16 04 	lds	r18, 0x0416	; 0x800416 <__brkval>
    35c4:	30 91 17 04 	lds	r19, 0x0417	; 0x800417 <__brkval+0x1>
    35c8:	23 2b       	or	r18, r19
    35ca:	41 f4       	brne	.+16     	; 0x35dc <malloc+0xde>
    35cc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    35d0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    35d4:	30 93 17 04 	sts	0x0417, r19	; 0x800417 <__brkval+0x1>
    35d8:	20 93 16 04 	sts	0x0416, r18	; 0x800416 <__brkval>
    35dc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    35e0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    35e4:	21 15       	cp	r18, r1
    35e6:	31 05       	cpc	r19, r1
    35e8:	41 f4       	brne	.+16     	; 0x35fa <malloc+0xfc>
    35ea:	2d b7       	in	r18, 0x3d	; 61
    35ec:	3e b7       	in	r19, 0x3e	; 62
    35ee:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    35f2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    35f6:	24 1b       	sub	r18, r20
    35f8:	35 0b       	sbc	r19, r21
    35fa:	e0 91 16 04 	lds	r30, 0x0416	; 0x800416 <__brkval>
    35fe:	f0 91 17 04 	lds	r31, 0x0417	; 0x800417 <__brkval+0x1>
    3602:	e2 17       	cp	r30, r18
    3604:	f3 07       	cpc	r31, r19
    3606:	a0 f4       	brcc	.+40     	; 0x3630 <malloc+0x132>
    3608:	2e 1b       	sub	r18, r30
    360a:	3f 0b       	sbc	r19, r31
    360c:	28 17       	cp	r18, r24
    360e:	39 07       	cpc	r19, r25
    3610:	78 f0       	brcs	.+30     	; 0x3630 <malloc+0x132>
    3612:	ac 01       	movw	r20, r24
    3614:	4e 5f       	subi	r20, 0xFE	; 254
    3616:	5f 4f       	sbci	r21, 0xFF	; 255
    3618:	24 17       	cp	r18, r20
    361a:	35 07       	cpc	r19, r21
    361c:	48 f0       	brcs	.+18     	; 0x3630 <malloc+0x132>
    361e:	4e 0f       	add	r20, r30
    3620:	5f 1f       	adc	r21, r31
    3622:	50 93 17 04 	sts	0x0417, r21	; 0x800417 <__brkval+0x1>
    3626:	40 93 16 04 	sts	0x0416, r20	; 0x800416 <__brkval>
    362a:	81 93       	st	Z+, r24
    362c:	91 93       	st	Z+, r25
    362e:	9f cf       	rjmp	.-194    	; 0x356e <malloc+0x70>
    3630:	f0 e0       	ldi	r31, 0x00	; 0
    3632:	e0 e0       	ldi	r30, 0x00	; 0
    3634:	9c cf       	rjmp	.-200    	; 0x356e <malloc+0x70>

00003636 <free>:
free():
    3636:	cf 93       	push	r28
    3638:	df 93       	push	r29
    363a:	00 97       	sbiw	r24, 0x00	; 0
    363c:	e9 f0       	breq	.+58     	; 0x3678 <free+0x42>
    363e:	fc 01       	movw	r30, r24
    3640:	32 97       	sbiw	r30, 0x02	; 2
    3642:	13 82       	std	Z+3, r1	; 0x03
    3644:	12 82       	std	Z+2, r1	; 0x02
    3646:	a0 91 18 04 	lds	r26, 0x0418	; 0x800418 <__flp>
    364a:	b0 91 19 04 	lds	r27, 0x0419	; 0x800419 <__flp+0x1>
    364e:	ed 01       	movw	r28, r26
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	20 e0       	ldi	r18, 0x00	; 0
    3654:	10 97       	sbiw	r26, 0x00	; 0
    3656:	a1 f4       	brne	.+40     	; 0x3680 <free+0x4a>
    3658:	20 81       	ld	r18, Z
    365a:	31 81       	ldd	r19, Z+1	; 0x01
    365c:	82 0f       	add	r24, r18
    365e:	93 1f       	adc	r25, r19
    3660:	20 91 16 04 	lds	r18, 0x0416	; 0x800416 <__brkval>
    3664:	30 91 17 04 	lds	r19, 0x0417	; 0x800417 <__brkval+0x1>
    3668:	28 17       	cp	r18, r24
    366a:	39 07       	cpc	r19, r25
    366c:	09 f0       	breq	.+2      	; 0x3670 <free+0x3a>
    366e:	61 c0       	rjmp	.+194    	; 0x3732 <free+0xfc>
    3670:	f0 93 17 04 	sts	0x0417, r31	; 0x800417 <__brkval+0x1>
    3674:	e0 93 16 04 	sts	0x0416, r30	; 0x800416 <__brkval>
    3678:	df 91       	pop	r29
    367a:	cf 91       	pop	r28
    367c:	08 95       	ret
    367e:	ea 01       	movw	r28, r20
    3680:	ce 17       	cp	r28, r30
    3682:	df 07       	cpc	r29, r31
    3684:	e8 f5       	brcc	.+122    	; 0x3700 <free+0xca>
    3686:	4a 81       	ldd	r20, Y+2	; 0x02
    3688:	5b 81       	ldd	r21, Y+3	; 0x03
    368a:	9e 01       	movw	r18, r28
    368c:	41 15       	cp	r20, r1
    368e:	51 05       	cpc	r21, r1
    3690:	b1 f7       	brne	.-20     	; 0x367e <free+0x48>
    3692:	e9 01       	movw	r28, r18
    3694:	fb 83       	std	Y+3, r31	; 0x03
    3696:	ea 83       	std	Y+2, r30	; 0x02
    3698:	49 91       	ld	r20, Y+
    369a:	59 91       	ld	r21, Y+
    369c:	c4 0f       	add	r28, r20
    369e:	d5 1f       	adc	r29, r21
    36a0:	ec 17       	cp	r30, r28
    36a2:	fd 07       	cpc	r31, r29
    36a4:	61 f4       	brne	.+24     	; 0x36be <free+0x88>
    36a6:	80 81       	ld	r24, Z
    36a8:	91 81       	ldd	r25, Z+1	; 0x01
    36aa:	02 96       	adiw	r24, 0x02	; 2
    36ac:	84 0f       	add	r24, r20
    36ae:	95 1f       	adc	r25, r21
    36b0:	e9 01       	movw	r28, r18
    36b2:	99 83       	std	Y+1, r25	; 0x01
    36b4:	88 83       	st	Y, r24
    36b6:	82 81       	ldd	r24, Z+2	; 0x02
    36b8:	93 81       	ldd	r25, Z+3	; 0x03
    36ba:	9b 83       	std	Y+3, r25	; 0x03
    36bc:	8a 83       	std	Y+2, r24	; 0x02
    36be:	f0 e0       	ldi	r31, 0x00	; 0
    36c0:	e0 e0       	ldi	r30, 0x00	; 0
    36c2:	12 96       	adiw	r26, 0x02	; 2
    36c4:	8d 91       	ld	r24, X+
    36c6:	9c 91       	ld	r25, X
    36c8:	13 97       	sbiw	r26, 0x03	; 3
    36ca:	00 97       	sbiw	r24, 0x00	; 0
    36cc:	b9 f5       	brne	.+110    	; 0x373c <free+0x106>
    36ce:	2d 91       	ld	r18, X+
    36d0:	3c 91       	ld	r19, X
    36d2:	11 97       	sbiw	r26, 0x01	; 1
    36d4:	cd 01       	movw	r24, r26
    36d6:	02 96       	adiw	r24, 0x02	; 2
    36d8:	82 0f       	add	r24, r18
    36da:	93 1f       	adc	r25, r19
    36dc:	20 91 16 04 	lds	r18, 0x0416	; 0x800416 <__brkval>
    36e0:	30 91 17 04 	lds	r19, 0x0417	; 0x800417 <__brkval+0x1>
    36e4:	28 17       	cp	r18, r24
    36e6:	39 07       	cpc	r19, r25
    36e8:	39 f6       	brne	.-114    	; 0x3678 <free+0x42>
    36ea:	30 97       	sbiw	r30, 0x00	; 0
    36ec:	51 f5       	brne	.+84     	; 0x3742 <free+0x10c>
    36ee:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <__flp+0x1>
    36f2:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <__flp>
    36f6:	b0 93 17 04 	sts	0x0417, r27	; 0x800417 <__brkval+0x1>
    36fa:	a0 93 16 04 	sts	0x0416, r26	; 0x800416 <__brkval>
    36fe:	bc cf       	rjmp	.-136    	; 0x3678 <free+0x42>
    3700:	d3 83       	std	Z+3, r29	; 0x03
    3702:	c2 83       	std	Z+2, r28	; 0x02
    3704:	40 81       	ld	r20, Z
    3706:	51 81       	ldd	r21, Z+1	; 0x01
    3708:	84 0f       	add	r24, r20
    370a:	95 1f       	adc	r25, r21
    370c:	c8 17       	cp	r28, r24
    370e:	d9 07       	cpc	r29, r25
    3710:	61 f4       	brne	.+24     	; 0x372a <free+0xf4>
    3712:	4e 5f       	subi	r20, 0xFE	; 254
    3714:	5f 4f       	sbci	r21, 0xFF	; 255
    3716:	88 81       	ld	r24, Y
    3718:	99 81       	ldd	r25, Y+1	; 0x01
    371a:	48 0f       	add	r20, r24
    371c:	59 1f       	adc	r21, r25
    371e:	51 83       	std	Z+1, r21	; 0x01
    3720:	40 83       	st	Z, r20
    3722:	8a 81       	ldd	r24, Y+2	; 0x02
    3724:	9b 81       	ldd	r25, Y+3	; 0x03
    3726:	93 83       	std	Z+3, r25	; 0x03
    3728:	82 83       	std	Z+2, r24	; 0x02
    372a:	21 15       	cp	r18, r1
    372c:	31 05       	cpc	r19, r1
    372e:	09 f0       	breq	.+2      	; 0x3732 <free+0xfc>
    3730:	b0 cf       	rjmp	.-160    	; 0x3692 <free+0x5c>
    3732:	f0 93 19 04 	sts	0x0419, r31	; 0x800419 <__flp+0x1>
    3736:	e0 93 18 04 	sts	0x0418, r30	; 0x800418 <__flp>
    373a:	9e cf       	rjmp	.-196    	; 0x3678 <free+0x42>
    373c:	fd 01       	movw	r30, r26
    373e:	dc 01       	movw	r26, r24
    3740:	c0 cf       	rjmp	.-128    	; 0x36c2 <free+0x8c>
    3742:	13 82       	std	Z+3, r1	; 0x03
    3744:	12 82       	std	Z+2, r1	; 0x02
    3746:	d7 cf       	rjmp	.-82     	; 0x36f6 <free+0xc0>

00003748 <realloc>:
realloc():
    3748:	b0 e0       	ldi	r27, 0x00	; 0
    374a:	a0 e0       	ldi	r26, 0x00	; 0
    374c:	ea ea       	ldi	r30, 0xAA	; 170
    374e:	fb e1       	ldi	r31, 0x1B	; 27
    3750:	0c 94 b5 20 	jmp	0x416a	; 0x416a <__prologue_saves__+0x4>
    3754:	8c 01       	movw	r16, r24
    3756:	00 97       	sbiw	r24, 0x00	; 0
    3758:	51 f4       	brne	.+20     	; 0x376e <realloc+0x26>
    375a:	cb 01       	movw	r24, r22
    375c:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <malloc>
    3760:	8c 01       	movw	r16, r24
    3762:	c8 01       	movw	r24, r16
    3764:	cd b7       	in	r28, 0x3d	; 61
    3766:	de b7       	in	r29, 0x3e	; 62
    3768:	e0 e1       	ldi	r30, 0x10	; 16
    376a:	0c 94 d1 20 	jmp	0x41a2	; 0x41a2 <__epilogue_restores__+0x4>
    376e:	fc 01       	movw	r30, r24
    3770:	e6 0f       	add	r30, r22
    3772:	f7 1f       	adc	r31, r23
    3774:	9c 01       	movw	r18, r24
    3776:	22 50       	subi	r18, 0x02	; 2
    3778:	31 09       	sbc	r19, r1
    377a:	e2 17       	cp	r30, r18
    377c:	f3 07       	cpc	r31, r19
    377e:	08 f4       	brcc	.+2      	; 0x3782 <realloc+0x3a>
    3780:	9d c0       	rjmp	.+314    	; 0x38bc <realloc+0x174>
    3782:	d9 01       	movw	r26, r18
    3784:	cd 91       	ld	r28, X+
    3786:	dc 91       	ld	r29, X
    3788:	11 97       	sbiw	r26, 0x01	; 1
    378a:	c6 17       	cp	r28, r22
    378c:	d7 07       	cpc	r29, r23
    378e:	98 f0       	brcs	.+38     	; 0x37b6 <realloc+0x6e>
    3790:	c5 30       	cpi	r28, 0x05	; 5
    3792:	d1 05       	cpc	r29, r1
    3794:	30 f3       	brcs	.-52     	; 0x3762 <realloc+0x1a>
    3796:	ce 01       	movw	r24, r28
    3798:	04 97       	sbiw	r24, 0x04	; 4
    379a:	86 17       	cp	r24, r22
    379c:	97 07       	cpc	r25, r23
    379e:	08 f3       	brcs	.-62     	; 0x3762 <realloc+0x1a>
    37a0:	c6 1b       	sub	r28, r22
    37a2:	d7 0b       	sbc	r29, r23
    37a4:	22 97       	sbiw	r28, 0x02	; 2
    37a6:	c1 93       	st	Z+, r28
    37a8:	d1 93       	st	Z+, r29
    37aa:	6d 93       	st	X+, r22
    37ac:	7c 93       	st	X, r23
    37ae:	cf 01       	movw	r24, r30
    37b0:	0e 94 1b 1b 	call	0x3636	; 0x3636 <free>
    37b4:	d6 cf       	rjmp	.-84     	; 0x3762 <realloc+0x1a>
    37b6:	5b 01       	movw	r10, r22
    37b8:	ac 1a       	sub	r10, r28
    37ba:	bd 0a       	sbc	r11, r29
    37bc:	4c 01       	movw	r8, r24
    37be:	8c 0e       	add	r8, r28
    37c0:	9d 1e       	adc	r9, r29
    37c2:	a0 91 18 04 	lds	r26, 0x0418	; 0x800418 <__flp>
    37c6:	b0 91 19 04 	lds	r27, 0x0419	; 0x800419 <__flp+0x1>
    37ca:	51 2c       	mov	r5, r1
    37cc:	41 2c       	mov	r4, r1
    37ce:	f1 2c       	mov	r15, r1
    37d0:	e1 2c       	mov	r14, r1
    37d2:	10 97       	sbiw	r26, 0x00	; 0
    37d4:	31 f5       	brne	.+76     	; 0x3822 <realloc+0xda>
    37d6:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <__brkval>
    37da:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <__brkval+0x1>
    37de:	88 15       	cp	r24, r8
    37e0:	99 05       	cpc	r25, r9
    37e2:	09 f0       	breq	.+2      	; 0x37e6 <realloc+0x9e>
    37e4:	5c c0       	rjmp	.+184    	; 0x389e <realloc+0x156>
    37e6:	46 16       	cp	r4, r22
    37e8:	57 06       	cpc	r5, r23
    37ea:	08 f0       	brcs	.+2      	; 0x37ee <realloc+0xa6>
    37ec:	58 c0       	rjmp	.+176    	; 0x389e <realloc+0x156>
    37ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    37f2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    37f6:	00 97       	sbiw	r24, 0x00	; 0
    37f8:	41 f4       	brne	.+16     	; 0x380a <realloc+0xc2>
    37fa:	8d b7       	in	r24, 0x3d	; 61
    37fc:	9e b7       	in	r25, 0x3e	; 62
    37fe:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3802:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3806:	84 1b       	sub	r24, r20
    3808:	95 0b       	sbc	r25, r21
    380a:	e8 17       	cp	r30, r24
    380c:	f9 07       	cpc	r31, r25
    380e:	08 f0       	brcs	.+2      	; 0x3812 <realloc+0xca>
    3810:	55 c0       	rjmp	.+170    	; 0x38bc <realloc+0x174>
    3812:	f0 93 17 04 	sts	0x0417, r31	; 0x800417 <__brkval+0x1>
    3816:	e0 93 16 04 	sts	0x0416, r30	; 0x800416 <__brkval>
    381a:	f9 01       	movw	r30, r18
    381c:	71 83       	std	Z+1, r23	; 0x01
    381e:	60 83       	st	Z, r22
    3820:	a0 cf       	rjmp	.-192    	; 0x3762 <realloc+0x1a>
    3822:	8d 91       	ld	r24, X+
    3824:	9c 91       	ld	r25, X
    3826:	11 97       	sbiw	r26, 0x01	; 1
    3828:	12 96       	adiw	r26, 0x02	; 2
    382a:	6c 90       	ld	r6, X
    382c:	12 97       	sbiw	r26, 0x02	; 2
    382e:	13 96       	adiw	r26, 0x03	; 3
    3830:	7c 90       	ld	r7, X
    3832:	13 97       	sbiw	r26, 0x03	; 3
    3834:	a8 15       	cp	r26, r8
    3836:	b9 05       	cpc	r27, r9
    3838:	59 f5       	brne	.+86     	; 0x3890 <realloc+0x148>
    383a:	6c 01       	movw	r12, r24
    383c:	42 e0       	ldi	r20, 0x02	; 2
    383e:	c4 0e       	add	r12, r20
    3840:	d1 1c       	adc	r13, r1
    3842:	ca 14       	cp	r12, r10
    3844:	db 04       	cpc	r13, r11
    3846:	20 f1       	brcs	.+72     	; 0x3890 <realloc+0x148>
    3848:	ac 01       	movw	r20, r24
    384a:	4a 19       	sub	r20, r10
    384c:	5b 09       	sbc	r21, r11
    384e:	da 01       	movw	r26, r20
    3850:	12 96       	adiw	r26, 0x02	; 2
    3852:	15 97       	sbiw	r26, 0x05	; 5
    3854:	80 f0       	brcs	.+32     	; 0x3876 <realloc+0x12e>
    3856:	62 82       	std	Z+2, r6	; 0x02
    3858:	73 82       	std	Z+3, r7	; 0x03
    385a:	51 83       	std	Z+1, r21	; 0x01
    385c:	40 83       	st	Z, r20
    385e:	d9 01       	movw	r26, r18
    3860:	6d 93       	st	X+, r22
    3862:	7c 93       	st	X, r23
    3864:	e1 14       	cp	r14, r1
    3866:	f1 04       	cpc	r15, r1
    3868:	71 f0       	breq	.+28     	; 0x3886 <realloc+0x13e>
    386a:	d7 01       	movw	r26, r14
    386c:	13 96       	adiw	r26, 0x03	; 3
    386e:	fc 93       	st	X, r31
    3870:	ee 93       	st	-X, r30
    3872:	12 97       	sbiw	r26, 0x02	; 2
    3874:	76 cf       	rjmp	.-276    	; 0x3762 <realloc+0x1a>
    3876:	22 96       	adiw	r28, 0x02	; 2
    3878:	8c 0f       	add	r24, r28
    387a:	9d 1f       	adc	r25, r29
    387c:	f9 01       	movw	r30, r18
    387e:	91 83       	std	Z+1, r25	; 0x01
    3880:	80 83       	st	Z, r24
    3882:	f3 01       	movw	r30, r6
    3884:	ef cf       	rjmp	.-34     	; 0x3864 <realloc+0x11c>
    3886:	f0 93 19 04 	sts	0x0419, r31	; 0x800419 <__flp+0x1>
    388a:	e0 93 18 04 	sts	0x0418, r30	; 0x800418 <__flp>
    388e:	69 cf       	rjmp	.-302    	; 0x3762 <realloc+0x1a>
    3890:	48 16       	cp	r4, r24
    3892:	59 06       	cpc	r5, r25
    3894:	08 f4       	brcc	.+2      	; 0x3898 <realloc+0x150>
    3896:	2c 01       	movw	r4, r24
    3898:	7d 01       	movw	r14, r26
    389a:	d3 01       	movw	r26, r6
    389c:	9a cf       	rjmp	.-204    	; 0x37d2 <realloc+0x8a>
    389e:	cb 01       	movw	r24, r22
    38a0:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <malloc>
    38a4:	7c 01       	movw	r14, r24
    38a6:	00 97       	sbiw	r24, 0x00	; 0
    38a8:	49 f0       	breq	.+18     	; 0x38bc <realloc+0x174>
    38aa:	ae 01       	movw	r20, r28
    38ac:	b8 01       	movw	r22, r16
    38ae:	0e 94 95 1c 	call	0x392a	; 0x392a <memcpy>
    38b2:	c8 01       	movw	r24, r16
    38b4:	0e 94 1b 1b 	call	0x3636	; 0x3636 <free>
    38b8:	87 01       	movw	r16, r14
    38ba:	53 cf       	rjmp	.-346    	; 0x3762 <realloc+0x1a>
    38bc:	10 e0       	ldi	r17, 0x00	; 0
    38be:	00 e0       	ldi	r16, 0x00	; 0
    38c0:	50 cf       	rjmp	.-352    	; 0x3762 <realloc+0x1a>

000038c2 <atof>:
atof():
    38c2:	66 27       	eor	r22, r22
    38c4:	77 27       	eor	r23, r23
    38c6:	0c 94 60 1e 	jmp	0x3cc0	; 0x3cc0 <strtod>

000038ca <atol>:
atol():
    38ca:	1f 93       	push	r17
    38cc:	fc 01       	movw	r30, r24
    38ce:	99 27       	eor	r25, r25
    38d0:	88 27       	eor	r24, r24
    38d2:	bc 01       	movw	r22, r24
    38d4:	e8 94       	clt
    38d6:	11 91       	ld	r17, Z+
    38d8:	10 32       	cpi	r17, 0x20	; 32
    38da:	e9 f3       	breq	.-6      	; 0x38d6 <atol+0xc>
    38dc:	19 30       	cpi	r17, 0x09	; 9
    38de:	10 f0       	brcs	.+4      	; 0x38e4 <atol+0x1a>
    38e0:	1e 30       	cpi	r17, 0x0E	; 14
    38e2:	c8 f3       	brcs	.-14     	; 0x38d6 <atol+0xc>
    38e4:	1b 32       	cpi	r17, 0x2B	; 43
    38e6:	51 f0       	breq	.+20     	; 0x38fc <atol+0x32>
    38e8:	1d 32       	cpi	r17, 0x2D	; 45
    38ea:	49 f4       	brne	.+18     	; 0x38fe <atol+0x34>
    38ec:	68 94       	set
    38ee:	06 c0       	rjmp	.+12     	; 0x38fc <atol+0x32>
    38f0:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <__mulsi_const_10>
    38f4:	61 0f       	add	r22, r17
    38f6:	71 1d       	adc	r23, r1
    38f8:	81 1d       	adc	r24, r1
    38fa:	91 1d       	adc	r25, r1
    38fc:	11 91       	ld	r17, Z+
    38fe:	10 53       	subi	r17, 0x30	; 48
    3900:	1a 30       	cpi	r17, 0x0A	; 10
    3902:	b0 f3       	brcs	.-20     	; 0x38f0 <atol+0x26>
    3904:	3e f4       	brtc	.+14     	; 0x3914 <atol+0x4a>
    3906:	90 95       	com	r25
    3908:	80 95       	com	r24
    390a:	70 95       	com	r23
    390c:	61 95       	neg	r22
    390e:	7f 4f       	sbci	r23, 0xFF	; 255
    3910:	8f 4f       	sbci	r24, 0xFF	; 255
    3912:	9f 4f       	sbci	r25, 0xFF	; 255
    3914:	1f 91       	pop	r17
    3916:	08 95       	ret

00003918 <isspace>:
isspace():
    3918:	91 11       	cpse	r25, r1
    391a:	0c 94 88 20 	jmp	0x4110	; 0x4110 <__ctype_isfalse>
    391e:	80 32       	cpi	r24, 0x20	; 32
    3920:	19 f0       	breq	.+6      	; 0x3928 <isspace+0x10>
    3922:	89 50       	subi	r24, 0x09	; 9
    3924:	85 50       	subi	r24, 0x05	; 5
    3926:	c8 f7       	brcc	.-14     	; 0x391a <isspace+0x2>
    3928:	08 95       	ret

0000392a <memcpy>:
memcpy():
    392a:	fb 01       	movw	r30, r22
    392c:	dc 01       	movw	r26, r24
    392e:	02 c0       	rjmp	.+4      	; 0x3934 <memcpy+0xa>
    3930:	01 90       	ld	r0, Z+
    3932:	0d 92       	st	X+, r0
    3934:	41 50       	subi	r20, 0x01	; 1
    3936:	50 40       	sbci	r21, 0x00	; 0
    3938:	d8 f7       	brcc	.-10     	; 0x3930 <memcpy+0x6>
    393a:	08 95       	ret

0000393c <strchr>:
strchr():
    393c:	fc 01       	movw	r30, r24
    393e:	81 91       	ld	r24, Z+
    3940:	86 17       	cp	r24, r22
    3942:	21 f0       	breq	.+8      	; 0x394c <strchr+0x10>
    3944:	88 23       	and	r24, r24
    3946:	d9 f7       	brne	.-10     	; 0x393e <strchr+0x2>
    3948:	99 27       	eor	r25, r25
    394a:	08 95       	ret
    394c:	31 97       	sbiw	r30, 0x01	; 1
    394e:	cf 01       	movw	r24, r30
    3950:	08 95       	ret

00003952 <strcmp>:
strcmp():
    3952:	fb 01       	movw	r30, r22
    3954:	dc 01       	movw	r26, r24
    3956:	8d 91       	ld	r24, X+
    3958:	01 90       	ld	r0, Z+
    395a:	80 19       	sub	r24, r0
    395c:	01 10       	cpse	r0, r1
    395e:	d9 f3       	breq	.-10     	; 0x3956 <strcmp+0x4>
    3960:	99 0b       	sbc	r25, r25
    3962:	08 95       	ret

00003964 <strcpy>:
strcpy():
    3964:	fb 01       	movw	r30, r22
    3966:	dc 01       	movw	r26, r24
    3968:	01 90       	ld	r0, Z+
    396a:	0d 92       	st	X+, r0
    396c:	00 20       	and	r0, r0
    396e:	e1 f7       	brne	.-8      	; 0x3968 <strcpy+0x4>
    3970:	08 95       	ret

00003972 <strncmp>:
strncmp():
    3972:	fb 01       	movw	r30, r22
    3974:	dc 01       	movw	r26, r24
    3976:	41 50       	subi	r20, 0x01	; 1
    3978:	50 40       	sbci	r21, 0x00	; 0
    397a:	30 f0       	brcs	.+12     	; 0x3988 <strncmp+0x16>
    397c:	8d 91       	ld	r24, X+
    397e:	01 90       	ld	r0, Z+
    3980:	80 19       	sub	r24, r0
    3982:	19 f4       	brne	.+6      	; 0x398a <strncmp+0x18>
    3984:	00 20       	and	r0, r0
    3986:	b9 f7       	brne	.-18     	; 0x3976 <strncmp+0x4>
    3988:	88 1b       	sub	r24, r24
    398a:	99 0b       	sbc	r25, r25
    398c:	08 95       	ret

0000398e <__itoa_ncheck>:
__itoa_ncheck():
    398e:	bb 27       	eor	r27, r27
    3990:	4a 30       	cpi	r20, 0x0A	; 10
    3992:	31 f4       	brne	.+12     	; 0x39a0 <__itoa_ncheck+0x12>
    3994:	99 23       	and	r25, r25
    3996:	22 f4       	brpl	.+8      	; 0x39a0 <__itoa_ncheck+0x12>
    3998:	bd e2       	ldi	r27, 0x2D	; 45
    399a:	90 95       	com	r25
    399c:	81 95       	neg	r24
    399e:	9f 4f       	sbci	r25, 0xFF	; 255
    39a0:	0c 94 e8 1c 	jmp	0x39d0	; 0x39d0 <__utoa_common>

000039a4 <__mulsi_const_10>:
__mulsi_const_10():
    39a4:	59 2f       	mov	r21, r25
    39a6:	48 2f       	mov	r20, r24
    39a8:	37 2f       	mov	r19, r23
    39aa:	26 2f       	mov	r18, r22
    39ac:	66 0f       	add	r22, r22
    39ae:	77 1f       	adc	r23, r23
    39b0:	88 1f       	adc	r24, r24
    39b2:	99 1f       	adc	r25, r25
    39b4:	66 0f       	add	r22, r22
    39b6:	77 1f       	adc	r23, r23
    39b8:	88 1f       	adc	r24, r24
    39ba:	99 1f       	adc	r25, r25
    39bc:	62 0f       	add	r22, r18
    39be:	73 1f       	adc	r23, r19
    39c0:	84 1f       	adc	r24, r20
    39c2:	95 1f       	adc	r25, r21
    39c4:	66 0f       	add	r22, r22
    39c6:	77 1f       	adc	r23, r23
    39c8:	88 1f       	adc	r24, r24
    39ca:	99 1f       	adc	r25, r25
    39cc:	08 95       	ret

000039ce <__utoa_ncheck>:
__utoa_ncheck():
    39ce:	bb 27       	eor	r27, r27

000039d0 <__utoa_common>:
    39d0:	fb 01       	movw	r30, r22
    39d2:	55 27       	eor	r21, r21
    39d4:	aa 27       	eor	r26, r26
    39d6:	88 0f       	add	r24, r24
    39d8:	99 1f       	adc	r25, r25
    39da:	aa 1f       	adc	r26, r26
    39dc:	a4 17       	cp	r26, r20
    39de:	10 f0       	brcs	.+4      	; 0x39e4 <__utoa_common+0x14>
    39e0:	a4 1b       	sub	r26, r20
    39e2:	83 95       	inc	r24
    39e4:	50 51       	subi	r21, 0x10	; 16
    39e6:	b9 f7       	brne	.-18     	; 0x39d6 <__utoa_common+0x6>
    39e8:	a0 5d       	subi	r26, 0xD0	; 208
    39ea:	aa 33       	cpi	r26, 0x3A	; 58
    39ec:	08 f0       	brcs	.+2      	; 0x39f0 <__utoa_common+0x20>
    39ee:	a9 5d       	subi	r26, 0xD9	; 217
    39f0:	a1 93       	st	Z+, r26
    39f2:	00 97       	sbiw	r24, 0x00	; 0
    39f4:	79 f7       	brne	.-34     	; 0x39d4 <__utoa_common+0x4>
    39f6:	b1 11       	cpse	r27, r1
    39f8:	b1 93       	st	Z+, r27
    39fa:	11 92       	st	Z+, r1
    39fc:	cb 01       	movw	r24, r22
    39fe:	0c 94 a3 20 	jmp	0x4146	; 0x4146 <strrev>

00003a02 <dtoa_prf>:
dtoa_prf():
    3a02:	a9 e0       	ldi	r26, 0x09	; 9
    3a04:	b0 e0       	ldi	r27, 0x00	; 0
    3a06:	e7 e0       	ldi	r30, 0x07	; 7
    3a08:	fd e1       	ldi	r31, 0x1D	; 29
    3a0a:	0c 94 b9 20 	jmp	0x4172	; 0x4172 <__prologue_saves__+0xc>
    3a0e:	6a 01       	movw	r12, r20
    3a10:	f2 2e       	mov	r15, r18
    3a12:	b0 2e       	mov	r11, r16
    3a14:	10 2f       	mov	r17, r16
    3a16:	fb e3       	ldi	r31, 0x3B	; 59
    3a18:	af 2e       	mov	r10, r31
    3a1a:	a0 16       	cp	r10, r16
    3a1c:	08 f4       	brcc	.+2      	; 0x3a20 <dtoa_prf+0x1e>
    3a1e:	1b e3       	ldi	r17, 0x3B	; 59
    3a20:	1f 5f       	subi	r17, 0xFF	; 255
    3a22:	01 2f       	mov	r16, r17
    3a24:	27 e0       	ldi	r18, 0x07	; 7
    3a26:	ae 01       	movw	r20, r28
    3a28:	4f 5f       	subi	r20, 0xFF	; 255
    3a2a:	5f 4f       	sbci	r21, 0xFF	; 255
    3a2c:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <__ftoa_engine>
    3a30:	bc 01       	movw	r22, r24
    3a32:	89 81       	ldd	r24, Y+1	; 0x01
    3a34:	98 2f       	mov	r25, r24
    3a36:	99 70       	andi	r25, 0x09	; 9
    3a38:	91 30       	cpi	r25, 0x01	; 1
    3a3a:	09 f4       	brne	.+2      	; 0x3a3e <dtoa_prf+0x3c>
    3a3c:	3f c0       	rjmp	.+126    	; 0x3abc <dtoa_prf+0xba>
    3a3e:	9b e2       	ldi	r25, 0x2B	; 43
    3a40:	e1 fc       	sbrc	r14, 1
    3a42:	04 c0       	rjmp	.+8      	; 0x3a4c <dtoa_prf+0x4a>
    3a44:	9e 2d       	mov	r25, r14
    3a46:	91 70       	andi	r25, 0x01	; 1
    3a48:	e0 fc       	sbrc	r14, 0
    3a4a:	3a c0       	rjmp	.+116    	; 0x3ac0 <dtoa_prf+0xbe>
    3a4c:	5e 2d       	mov	r21, r14
    3a4e:	50 71       	andi	r21, 0x10	; 16
    3a50:	e8 2f       	mov	r30, r24
    3a52:	e8 70       	andi	r30, 0x08	; 8
    3a54:	83 ff       	sbrs	r24, 3
    3a56:	46 c0       	rjmp	.+140    	; 0x3ae4 <dtoa_prf+0xe2>
    3a58:	84 e0       	ldi	r24, 0x04	; 4
    3a5a:	91 11       	cpse	r25, r1
    3a5c:	01 c0       	rjmp	.+2      	; 0x3a60 <dtoa_prf+0x5e>
    3a5e:	83 e0       	ldi	r24, 0x03	; 3
    3a60:	ef 2d       	mov	r30, r15
    3a62:	e8 1b       	sub	r30, r24
    3a64:	8f 15       	cp	r24, r15
    3a66:	08 f0       	brcs	.+2      	; 0x3a6a <dtoa_prf+0x68>
    3a68:	e0 e0       	ldi	r30, 0x00	; 0
    3a6a:	d6 01       	movw	r26, r12
    3a6c:	8e 2f       	mov	r24, r30
    3a6e:	20 e2       	ldi	r18, 0x20	; 32
    3a70:	55 23       	and	r21, r21
    3a72:	51 f1       	breq	.+84     	; 0x3ac8 <dtoa_prf+0xc6>
    3a74:	99 23       	and	r25, r25
    3a76:	29 f0       	breq	.+10     	; 0x3a82 <dtoa_prf+0x80>
    3a78:	d6 01       	movw	r26, r12
    3a7a:	9c 93       	st	X, r25
    3a7c:	c6 01       	movw	r24, r12
    3a7e:	01 96       	adiw	r24, 0x01	; 1
    3a80:	6c 01       	movw	r12, r24
    3a82:	96 01       	movw	r18, r12
    3a84:	2d 5f       	subi	r18, 0xFD	; 253
    3a86:	3f 4f       	sbci	r19, 0xFF	; 255
    3a88:	e2 fe       	sbrs	r14, 2
    3a8a:	24 c0       	rjmp	.+72     	; 0x3ad4 <dtoa_prf+0xd2>
    3a8c:	8e e4       	ldi	r24, 0x4E	; 78
    3a8e:	d6 01       	movw	r26, r12
    3a90:	8c 93       	st	X, r24
    3a92:	91 e4       	ldi	r25, 0x41	; 65
    3a94:	11 96       	adiw	r26, 0x01	; 1
    3a96:	9c 93       	st	X, r25
    3a98:	11 97       	sbiw	r26, 0x01	; 1
    3a9a:	12 96       	adiw	r26, 0x02	; 2
    3a9c:	8c 93       	st	X, r24
    3a9e:	d9 01       	movw	r26, r18
    3aa0:	8e 2f       	mov	r24, r30
    3aa2:	90 e2       	ldi	r25, 0x20	; 32
    3aa4:	81 11       	cpse	r24, r1
    3aa6:	1b c0       	rjmp	.+54     	; 0x3ade <dtoa_prf+0xdc>
    3aa8:	e2 0f       	add	r30, r18
    3aaa:	f3 2f       	mov	r31, r19
    3aac:	f1 1d       	adc	r31, r1
    3aae:	10 82       	st	Z, r1
    3ab0:	8e ef       	ldi	r24, 0xFE	; 254
    3ab2:	9f ef       	ldi	r25, 0xFF	; 255
    3ab4:	29 96       	adiw	r28, 0x09	; 9
    3ab6:	ec e0       	ldi	r30, 0x0C	; 12
    3ab8:	0c 94 d5 20 	jmp	0x41aa	; 0x41aa <__epilogue_restores__+0xc>
    3abc:	9d e2       	ldi	r25, 0x2D	; 45
    3abe:	c6 cf       	rjmp	.-116    	; 0x3a4c <dtoa_prf+0x4a>
    3ac0:	90 e2       	ldi	r25, 0x20	; 32
    3ac2:	c4 cf       	rjmp	.-120    	; 0x3a4c <dtoa_prf+0x4a>
    3ac4:	2d 93       	st	X+, r18
    3ac6:	81 50       	subi	r24, 0x01	; 1
    3ac8:	81 11       	cpse	r24, r1
    3aca:	fc cf       	rjmp	.-8      	; 0x3ac4 <dtoa_prf+0xc2>
    3acc:	ce 0e       	add	r12, r30
    3ace:	d1 1c       	adc	r13, r1
    3ad0:	e0 e0       	ldi	r30, 0x00	; 0
    3ad2:	d0 cf       	rjmp	.-96     	; 0x3a74 <dtoa_prf+0x72>
    3ad4:	8e e6       	ldi	r24, 0x6E	; 110
    3ad6:	d6 01       	movw	r26, r12
    3ad8:	8c 93       	st	X, r24
    3ada:	91 e6       	ldi	r25, 0x61	; 97
    3adc:	db cf       	rjmp	.-74     	; 0x3a94 <dtoa_prf+0x92>
    3ade:	9d 93       	st	X+, r25
    3ae0:	81 50       	subi	r24, 0x01	; 1
    3ae2:	e0 cf       	rjmp	.-64     	; 0x3aa4 <dtoa_prf+0xa2>
    3ae4:	48 2f       	mov	r20, r24
    3ae6:	44 70       	andi	r20, 0x04	; 4
    3ae8:	82 ff       	sbrs	r24, 2
    3aea:	3d c0       	rjmp	.+122    	; 0x3b66 <dtoa_prf+0x164>
    3aec:	84 e0       	ldi	r24, 0x04	; 4
    3aee:	91 11       	cpse	r25, r1
    3af0:	01 c0       	rjmp	.+2      	; 0x3af4 <dtoa_prf+0xf2>
    3af2:	83 e0       	ldi	r24, 0x03	; 3
    3af4:	8f 15       	cp	r24, r15
    3af6:	10 f4       	brcc	.+4      	; 0x3afc <dtoa_prf+0xfa>
    3af8:	ef 2d       	mov	r30, r15
    3afa:	e8 1b       	sub	r30, r24
    3afc:	d6 01       	movw	r26, r12
    3afe:	8e 2f       	mov	r24, r30
    3b00:	20 e2       	ldi	r18, 0x20	; 32
    3b02:	55 23       	and	r21, r21
    3b04:	09 f1       	breq	.+66     	; 0x3b48 <dtoa_prf+0x146>
    3b06:	99 23       	and	r25, r25
    3b08:	29 f0       	breq	.+10     	; 0x3b14 <dtoa_prf+0x112>
    3b0a:	d6 01       	movw	r26, r12
    3b0c:	9c 93       	st	X, r25
    3b0e:	c6 01       	movw	r24, r12
    3b10:	01 96       	adiw	r24, 0x01	; 1
    3b12:	6c 01       	movw	r12, r24
    3b14:	96 01       	movw	r18, r12
    3b16:	2d 5f       	subi	r18, 0xFD	; 253
    3b18:	3f 4f       	sbci	r19, 0xFF	; 255
    3b1a:	e2 fe       	sbrs	r14, 2
    3b1c:	1b c0       	rjmp	.+54     	; 0x3b54 <dtoa_prf+0x152>
    3b1e:	89 e4       	ldi	r24, 0x49	; 73
    3b20:	d6 01       	movw	r26, r12
    3b22:	8c 93       	st	X, r24
    3b24:	8e e4       	ldi	r24, 0x4E	; 78
    3b26:	11 96       	adiw	r26, 0x01	; 1
    3b28:	8c 93       	st	X, r24
    3b2a:	11 97       	sbiw	r26, 0x01	; 1
    3b2c:	86 e4       	ldi	r24, 0x46	; 70
    3b2e:	12 96       	adiw	r26, 0x02	; 2
    3b30:	8c 93       	st	X, r24
    3b32:	d9 01       	movw	r26, r18
    3b34:	8e 2f       	mov	r24, r30
    3b36:	90 e2       	ldi	r25, 0x20	; 32
    3b38:	88 23       	and	r24, r24
    3b3a:	09 f4       	brne	.+2      	; 0x3b3e <dtoa_prf+0x13c>
    3b3c:	b5 cf       	rjmp	.-150    	; 0x3aa8 <dtoa_prf+0xa6>
    3b3e:	9d 93       	st	X+, r25
    3b40:	81 50       	subi	r24, 0x01	; 1
    3b42:	fa cf       	rjmp	.-12     	; 0x3b38 <dtoa_prf+0x136>
    3b44:	2d 93       	st	X+, r18
    3b46:	81 50       	subi	r24, 0x01	; 1
    3b48:	81 11       	cpse	r24, r1
    3b4a:	fc cf       	rjmp	.-8      	; 0x3b44 <dtoa_prf+0x142>
    3b4c:	ce 0e       	add	r12, r30
    3b4e:	d1 1c       	adc	r13, r1
    3b50:	e0 e0       	ldi	r30, 0x00	; 0
    3b52:	d9 cf       	rjmp	.-78     	; 0x3b06 <dtoa_prf+0x104>
    3b54:	89 e6       	ldi	r24, 0x69	; 105
    3b56:	d6 01       	movw	r26, r12
    3b58:	8c 93       	st	X, r24
    3b5a:	8e e6       	ldi	r24, 0x6E	; 110
    3b5c:	11 96       	adiw	r26, 0x01	; 1
    3b5e:	8c 93       	st	X, r24
    3b60:	11 97       	sbiw	r26, 0x01	; 1
    3b62:	86 e6       	ldi	r24, 0x66	; 102
    3b64:	e4 cf       	rjmp	.-56     	; 0x3b2e <dtoa_prf+0x12c>
    3b66:	9b 01       	movw	r18, r22
    3b68:	77 ff       	sbrs	r23, 7
    3b6a:	02 c0       	rjmp	.+4      	; 0x3b70 <dtoa_prf+0x16e>
    3b6c:	30 e0       	ldi	r19, 0x00	; 0
    3b6e:	20 e0       	ldi	r18, 0x00	; 0
    3b70:	a1 e0       	ldi	r26, 0x01	; 1
    3b72:	b0 e0       	ldi	r27, 0x00	; 0
    3b74:	91 11       	cpse	r25, r1
    3b76:	02 c0       	rjmp	.+4      	; 0x3b7c <dtoa_prf+0x17a>
    3b78:	b0 e0       	ldi	r27, 0x00	; 0
    3b7a:	a0 e0       	ldi	r26, 0x00	; 0
    3b7c:	f9 01       	movw	r30, r18
    3b7e:	31 96       	adiw	r30, 0x01	; 1
    3b80:	ae 0f       	add	r26, r30
    3b82:	bf 1f       	adc	r27, r31
    3b84:	8b 2c       	mov	r8, r11
    3b86:	91 2c       	mov	r9, r1
    3b88:	bb 20       	and	r11, r11
    3b8a:	09 f4       	brne	.+2      	; 0x3b8e <dtoa_prf+0x18c>
    3b8c:	61 c0       	rjmp	.+194    	; 0x3c50 <dtoa_prf+0x24e>
    3b8e:	54 01       	movw	r10, r8
    3b90:	ef ef       	ldi	r30, 0xFF	; 255
    3b92:	ae 1a       	sub	r10, r30
    3b94:	be 0a       	sbc	r11, r30
    3b96:	aa 0d       	add	r26, r10
    3b98:	bb 1d       	adc	r27, r11
    3b9a:	fa 16       	cp	r15, r26
    3b9c:	1b 06       	cpc	r1, r27
    3b9e:	19 f0       	breq	.+6      	; 0x3ba6 <dtoa_prf+0x1a4>
    3ba0:	14 f0       	brlt	.+4      	; 0x3ba6 <dtoa_prf+0x1a4>
    3ba2:	4f 2d       	mov	r20, r15
    3ba4:	4a 1b       	sub	r20, r26
    3ba6:	51 11       	cpse	r21, r1
    3ba8:	88 c0       	rjmp	.+272    	; 0x3cba <dtoa_prf+0x2b8>
    3baa:	e3 fc       	sbrc	r14, 3
    3bac:	59 c0       	rjmp	.+178    	; 0x3c60 <dtoa_prf+0x25e>
    3bae:	76 01       	movw	r14, r12
    3bb0:	a4 2f       	mov	r26, r20
    3bb2:	b0 e2       	ldi	r27, 0x20	; 32
    3bb4:	a1 11       	cpse	r26, r1
    3bb6:	4f c0       	rjmp	.+158    	; 0x3c56 <dtoa_prf+0x254>
    3bb8:	c4 0e       	add	r12, r20
    3bba:	d1 1c       	adc	r13, r1
    3bbc:	99 23       	and	r25, r25
    3bbe:	09 f4       	brne	.+2      	; 0x3bc2 <dtoa_prf+0x1c0>
    3bc0:	5b c0       	rjmp	.+182    	; 0x3c78 <dtoa_prf+0x276>
    3bc2:	40 e0       	ldi	r20, 0x00	; 0
    3bc4:	d6 01       	movw	r26, r12
    3bc6:	11 96       	adiw	r26, 0x01	; 1
    3bc8:	f6 01       	movw	r30, r12
    3bca:	90 83       	st	Z, r25
    3bcc:	6d 01       	movw	r12, r26
    3bce:	55 23       	and	r21, r21
    3bd0:	09 f4       	brne	.+2      	; 0x3bd4 <dtoa_prf+0x1d2>
    3bd2:	48 c0       	rjmp	.+144    	; 0x3c64 <dtoa_prf+0x262>
    3bd4:	01 2f       	mov	r16, r17
    3bd6:	06 0f       	add	r16, r22
    3bd8:	9a 81       	ldd	r25, Y+2	; 0x02
    3bda:	58 2f       	mov	r21, r24
    3bdc:	50 71       	andi	r21, 0x10	; 16
    3bde:	84 ff       	sbrs	r24, 4
    3be0:	03 c0       	rjmp	.+6      	; 0x3be8 <dtoa_prf+0x1e6>
    3be2:	91 33       	cpi	r25, 0x31	; 49
    3be4:	09 f4       	brne	.+2      	; 0x3be8 <dtoa_prf+0x1e6>
    3be6:	01 50       	subi	r16, 0x01	; 1
    3be8:	10 16       	cp	r1, r16
    3bea:	0c f0       	brlt	.+2      	; 0x3bee <dtoa_prf+0x1ec>
    3bec:	47 c0       	rjmp	.+142    	; 0x3c7c <dtoa_prf+0x27a>
    3bee:	09 30       	cpi	r16, 0x09	; 9
    3bf0:	08 f0       	brcs	.+2      	; 0x3bf4 <dtoa_prf+0x1f2>
    3bf2:	08 e0       	ldi	r16, 0x08	; 8
    3bf4:	ee e2       	ldi	r30, 0x2E	; 46
    3bf6:	fe 2e       	mov	r15, r30
    3bf8:	5b 01       	movw	r10, r22
    3bfa:	a0 1a       	sub	r10, r16
    3bfc:	b1 08       	sbc	r11, r1
    3bfe:	85 01       	movw	r16, r10
    3c00:	91 94       	neg	r9
    3c02:	81 94       	neg	r8
    3c04:	91 08       	sbc	r9, r1
    3c06:	2f 3f       	cpi	r18, 0xFF	; 255
    3c08:	32 07       	cpc	r19, r18
    3c0a:	29 f4       	brne	.+10     	; 0x3c16 <dtoa_prf+0x214>
    3c0c:	d6 01       	movw	r26, r12
    3c0e:	fc 92       	st	X, r15
    3c10:	f6 01       	movw	r30, r12
    3c12:	31 96       	adiw	r30, 0x01	; 1
    3c14:	6f 01       	movw	r12, r30
    3c16:	62 17       	cp	r22, r18
    3c18:	73 07       	cpc	r23, r19
    3c1a:	94 f1       	brlt	.+100    	; 0x3c80 <dtoa_prf+0x27e>
    3c1c:	02 17       	cp	r16, r18
    3c1e:	13 07       	cpc	r17, r19
    3c20:	7c f5       	brge	.+94     	; 0x3c80 <dtoa_prf+0x27e>
    3c22:	db 01       	movw	r26, r22
    3c24:	a2 1b       	sub	r26, r18
    3c26:	b3 0b       	sbc	r27, r19
    3c28:	aa 24       	eor	r10, r10
    3c2a:	a3 94       	inc	r10
    3c2c:	b1 2c       	mov	r11, r1
    3c2e:	ac 0e       	add	r10, r28
    3c30:	bd 1e       	adc	r11, r29
    3c32:	aa 0d       	add	r26, r10
    3c34:	bb 1d       	adc	r27, r11
    3c36:	11 96       	adiw	r26, 0x01	; 1
    3c38:	8c 91       	ld	r24, X
    3c3a:	21 50       	subi	r18, 0x01	; 1
    3c3c:	31 09       	sbc	r19, r1
    3c3e:	d6 01       	movw	r26, r12
    3c40:	11 96       	adiw	r26, 0x01	; 1
    3c42:	28 15       	cp	r18, r8
    3c44:	39 05       	cpc	r19, r9
    3c46:	f4 f0       	brlt	.+60     	; 0x3c84 <dtoa_prf+0x282>
    3c48:	f6 01       	movw	r30, r12
    3c4a:	80 83       	st	Z, r24
    3c4c:	6d 01       	movw	r12, r26
    3c4e:	db cf       	rjmp	.-74     	; 0x3c06 <dtoa_prf+0x204>
    3c50:	b1 2c       	mov	r11, r1
    3c52:	a1 2c       	mov	r10, r1
    3c54:	a0 cf       	rjmp	.-192    	; 0x3b96 <dtoa_prf+0x194>
    3c56:	f7 01       	movw	r30, r14
    3c58:	b1 93       	st	Z+, r27
    3c5a:	7f 01       	movw	r14, r30
    3c5c:	a1 50       	subi	r26, 0x01	; 1
    3c5e:	aa cf       	rjmp	.-172    	; 0x3bb4 <dtoa_prf+0x1b2>
    3c60:	91 11       	cpse	r25, r1
    3c62:	b0 cf       	rjmp	.-160    	; 0x3bc4 <dtoa_prf+0x1c2>
    3c64:	d6 01       	movw	r26, r12
    3c66:	94 2f       	mov	r25, r20
    3c68:	50 e3       	ldi	r21, 0x30	; 48
    3c6a:	02 c0       	rjmp	.+4      	; 0x3c70 <dtoa_prf+0x26e>
    3c6c:	5d 93       	st	X+, r21
    3c6e:	91 50       	subi	r25, 0x01	; 1
    3c70:	91 11       	cpse	r25, r1
    3c72:	fc cf       	rjmp	.-8      	; 0x3c6c <dtoa_prf+0x26a>
    3c74:	c4 0e       	add	r12, r20
    3c76:	d1 1c       	adc	r13, r1
    3c78:	40 e0       	ldi	r20, 0x00	; 0
    3c7a:	ac cf       	rjmp	.-168    	; 0x3bd4 <dtoa_prf+0x1d2>
    3c7c:	01 e0       	ldi	r16, 0x01	; 1
    3c7e:	ba cf       	rjmp	.-140    	; 0x3bf4 <dtoa_prf+0x1f2>
    3c80:	80 e3       	ldi	r24, 0x30	; 48
    3c82:	db cf       	rjmp	.-74     	; 0x3c3a <dtoa_prf+0x238>
    3c84:	62 17       	cp	r22, r18
    3c86:	73 07       	cpc	r23, r19
    3c88:	31 f4       	brne	.+12     	; 0x3c96 <dtoa_prf+0x294>
    3c8a:	96 33       	cpi	r25, 0x36	; 54
    3c8c:	88 f4       	brcc	.+34     	; 0x3cb0 <dtoa_prf+0x2ae>
    3c8e:	95 33       	cpi	r25, 0x35	; 53
    3c90:	11 f4       	brne	.+4      	; 0x3c96 <dtoa_prf+0x294>
    3c92:	55 23       	and	r21, r21
    3c94:	69 f0       	breq	.+26     	; 0x3cb0 <dtoa_prf+0x2ae>
    3c96:	f6 01       	movw	r30, r12
    3c98:	80 83       	st	Z, r24
    3c9a:	fd 01       	movw	r30, r26
    3c9c:	84 2f       	mov	r24, r20
    3c9e:	90 e2       	ldi	r25, 0x20	; 32
    3ca0:	81 11       	cpse	r24, r1
    3ca2:	08 c0       	rjmp	.+16     	; 0x3cb4 <dtoa_prf+0x2b2>
    3ca4:	a4 0f       	add	r26, r20
    3ca6:	b1 1d       	adc	r27, r1
    3ca8:	1c 92       	st	X, r1
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	80 e0       	ldi	r24, 0x00	; 0
    3cae:	02 cf       	rjmp	.-508    	; 0x3ab4 <dtoa_prf+0xb2>
    3cb0:	81 e3       	ldi	r24, 0x31	; 49
    3cb2:	f1 cf       	rjmp	.-30     	; 0x3c96 <dtoa_prf+0x294>
    3cb4:	91 93       	st	Z+, r25
    3cb6:	81 50       	subi	r24, 0x01	; 1
    3cb8:	f3 cf       	rjmp	.-26     	; 0x3ca0 <dtoa_prf+0x29e>
    3cba:	91 11       	cpse	r25, r1
    3cbc:	83 cf       	rjmp	.-250    	; 0x3bc4 <dtoa_prf+0x1c2>
    3cbe:	8a cf       	rjmp	.-236    	; 0x3bd4 <dtoa_prf+0x1d2>

00003cc0 <strtod>:
strtod():
    3cc0:	b0 e0       	ldi	r27, 0x00	; 0
    3cc2:	a0 e0       	ldi	r26, 0x00	; 0
    3cc4:	e6 e6       	ldi	r30, 0x66	; 102
    3cc6:	fe e1       	ldi	r31, 0x1E	; 30
    3cc8:	0c 94 b9 20 	jmp	0x4172	; 0x4172 <__prologue_saves__+0xc>
    3ccc:	5c 01       	movw	r10, r24
    3cce:	7b 01       	movw	r14, r22
    3cd0:	61 15       	cp	r22, r1
    3cd2:	71 05       	cpc	r23, r1
    3cd4:	19 f0       	breq	.+6      	; 0x3cdc <strtod+0x1c>
    3cd6:	db 01       	movw	r26, r22
    3cd8:	8d 93       	st	X+, r24
    3cda:	9c 93       	st	X, r25
    3cdc:	85 01       	movw	r16, r10
    3cde:	0f 5f       	subi	r16, 0xFF	; 255
    3ce0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ce2:	f5 01       	movw	r30, r10
    3ce4:	d0 81       	ld	r29, Z
    3ce6:	8d 2f       	mov	r24, r29
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
    3cea:	0e 94 8c 1c 	call	0x3918	; 0x3918 <isspace>
    3cee:	6c 01       	movw	r12, r24
    3cf0:	89 2b       	or	r24, r25
    3cf2:	b9 f5       	brne	.+110    	; 0x3d62 <strtod+0xa2>
    3cf4:	dd 32       	cpi	r29, 0x2D	; 45
    3cf6:	b9 f5       	brne	.+110    	; 0x3d66 <strtod+0xa6>
    3cf8:	0f 5f       	subi	r16, 0xFF	; 255
    3cfa:	1f 4f       	sbci	r17, 0xFF	; 255
    3cfc:	d5 01       	movw	r26, r10
    3cfe:	11 96       	adiw	r26, 0x01	; 1
    3d00:	dc 91       	ld	r29, X
    3d02:	c1 e0       	ldi	r28, 0x01	; 1
    3d04:	58 01       	movw	r10, r16
    3d06:	f1 e0       	ldi	r31, 0x01	; 1
    3d08:	af 1a       	sub	r10, r31
    3d0a:	b1 08       	sbc	r11, r1
    3d0c:	43 e0       	ldi	r20, 0x03	; 3
    3d0e:	50 e0       	ldi	r21, 0x00	; 0
    3d10:	6e e9       	ldi	r22, 0x9E	; 158
    3d12:	70 e0       	ldi	r23, 0x00	; 0
    3d14:	c5 01       	movw	r24, r10
    3d16:	0e 94 8b 20 	call	0x4116	; 0x4116 <strncasecmp_P>
    3d1a:	89 2b       	or	r24, r25
    3d1c:	69 f5       	brne	.+90     	; 0x3d78 <strtod+0xb8>
    3d1e:	68 01       	movw	r12, r16
    3d20:	82 e0       	ldi	r24, 0x02	; 2
    3d22:	c8 0e       	add	r12, r24
    3d24:	d1 1c       	adc	r13, r1
    3d26:	45 e0       	ldi	r20, 0x05	; 5
    3d28:	50 e0       	ldi	r21, 0x00	; 0
    3d2a:	69 e9       	ldi	r22, 0x99	; 153
    3d2c:	70 e0       	ldi	r23, 0x00	; 0
    3d2e:	c6 01       	movw	r24, r12
    3d30:	0e 94 8b 20 	call	0x4116	; 0x4116 <strncasecmp_P>
    3d34:	89 2b       	or	r24, r25
    3d36:	21 f4       	brne	.+8      	; 0x3d40 <strtod+0x80>
    3d38:	68 01       	movw	r12, r16
    3d3a:	97 e0       	ldi	r25, 0x07	; 7
    3d3c:	c9 0e       	add	r12, r25
    3d3e:	d1 1c       	adc	r13, r1
    3d40:	e1 14       	cp	r14, r1
    3d42:	f1 04       	cpc	r15, r1
    3d44:	19 f0       	breq	.+6      	; 0x3d4c <strtod+0x8c>
    3d46:	d7 01       	movw	r26, r14
    3d48:	cd 92       	st	X+, r12
    3d4a:	dc 92       	st	X, r13
    3d4c:	60 e0       	ldi	r22, 0x00	; 0
    3d4e:	70 e0       	ldi	r23, 0x00	; 0
    3d50:	80 e8       	ldi	r24, 0x80	; 128
    3d52:	9f ef       	ldi	r25, 0xFF	; 255
    3d54:	c1 11       	cpse	r28, r1
    3d56:	ff c0       	rjmp	.+510    	; 0x3f56 <strtod+0x296>
    3d58:	60 e0       	ldi	r22, 0x00	; 0
    3d5a:	70 e0       	ldi	r23, 0x00	; 0
    3d5c:	80 e8       	ldi	r24, 0x80	; 128
    3d5e:	9f e7       	ldi	r25, 0x7F	; 127
    3d60:	fa c0       	rjmp	.+500    	; 0x3f56 <strtod+0x296>
    3d62:	58 01       	movw	r10, r16
    3d64:	bb cf       	rjmp	.-138    	; 0x3cdc <strtod+0x1c>
    3d66:	db 32       	cpi	r29, 0x2B	; 43
    3d68:	29 f4       	brne	.+10     	; 0x3d74 <strtod+0xb4>
    3d6a:	85 01       	movw	r16, r10
    3d6c:	0e 5f       	subi	r16, 0xFE	; 254
    3d6e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d70:	f5 01       	movw	r30, r10
    3d72:	d1 81       	ldd	r29, Z+1	; 0x01
    3d74:	c0 e0       	ldi	r28, 0x00	; 0
    3d76:	c6 cf       	rjmp	.-116    	; 0x3d04 <strtod+0x44>
    3d78:	43 e0       	ldi	r20, 0x03	; 3
    3d7a:	50 e0       	ldi	r21, 0x00	; 0
    3d7c:	66 e9       	ldi	r22, 0x96	; 150
    3d7e:	70 e0       	ldi	r23, 0x00	; 0
    3d80:	c5 01       	movw	r24, r10
    3d82:	0e 94 8b 20 	call	0x4116	; 0x4116 <strncasecmp_P>
    3d86:	89 2b       	or	r24, r25
    3d88:	e9 f0       	breq	.+58     	; 0x3dc4 <strtod+0x104>
    3d8a:	f8 01       	movw	r30, r16
    3d8c:	10 e0       	ldi	r17, 0x00	; 0
    3d8e:	00 e0       	ldi	r16, 0x00	; 0
    3d90:	20 e0       	ldi	r18, 0x00	; 0
    3d92:	30 e0       	ldi	r19, 0x00	; 0
    3d94:	a9 01       	movw	r20, r18
    3d96:	5f 01       	movw	r10, r30
    3d98:	b0 ed       	ldi	r27, 0xD0	; 208
    3d9a:	8b 2e       	mov	r8, r27
    3d9c:	8d 0e       	add	r8, r29
    3d9e:	89 e0       	ldi	r24, 0x09	; 9
    3da0:	88 15       	cp	r24, r8
    3da2:	c8 f1       	brcs	.+114    	; 0x3e16 <strtod+0x156>
    3da4:	9c 2e       	mov	r9, r28
    3da6:	68 94       	set
    3da8:	91 f8       	bld	r9, 1
    3daa:	8c 2f       	mov	r24, r28
    3dac:	88 70       	andi	r24, 0x08	; 8
    3dae:	c2 ff       	sbrs	r28, 2
    3db0:	16 c0       	rjmp	.+44     	; 0x3dde <strtod+0x11e>
    3db2:	81 11       	cpse	r24, r1
    3db4:	02 c0       	rjmp	.+4      	; 0x3dba <strtod+0xfa>
    3db6:	0f 5f       	subi	r16, 0xFF	; 255
    3db8:	1f 4f       	sbci	r17, 0xFF	; 255
    3dba:	31 96       	adiw	r30, 0x01	; 1
    3dbc:	d5 01       	movw	r26, r10
    3dbe:	dc 91       	ld	r29, X
    3dc0:	c9 2d       	mov	r28, r9
    3dc2:	e9 cf       	rjmp	.-46     	; 0x3d96 <strtod+0xd6>
    3dc4:	e1 14       	cp	r14, r1
    3dc6:	f1 04       	cpc	r15, r1
    3dc8:	29 f0       	breq	.+10     	; 0x3dd4 <strtod+0x114>
    3dca:	0e 5f       	subi	r16, 0xFE	; 254
    3dcc:	1f 4f       	sbci	r17, 0xFF	; 255
    3dce:	f7 01       	movw	r30, r14
    3dd0:	11 83       	std	Z+1, r17	; 0x01
    3dd2:	00 83       	st	Z, r16
    3dd4:	60 e0       	ldi	r22, 0x00	; 0
    3dd6:	70 e0       	ldi	r23, 0x00	; 0
    3dd8:	80 ec       	ldi	r24, 0xC0	; 192
    3dda:	9f e7       	ldi	r25, 0x7F	; 127
    3ddc:	bc c0       	rjmp	.+376    	; 0x3f56 <strtod+0x296>
    3dde:	88 23       	and	r24, r24
    3de0:	11 f0       	breq	.+4      	; 0x3de6 <strtod+0x126>
    3de2:	01 50       	subi	r16, 0x01	; 1
    3de4:	11 09       	sbc	r17, r1
    3de6:	a5 e0       	ldi	r26, 0x05	; 5
    3de8:	b0 e0       	ldi	r27, 0x00	; 0
    3dea:	0e 94 2d 1a 	call	0x345a	; 0x345a <__muluhisi3>
    3dee:	9b 01       	movw	r18, r22
    3df0:	ac 01       	movw	r20, r24
    3df2:	22 0f       	add	r18, r18
    3df4:	33 1f       	adc	r19, r19
    3df6:	44 1f       	adc	r20, r20
    3df8:	55 1f       	adc	r21, r21
    3dfa:	28 0d       	add	r18, r8
    3dfc:	31 1d       	adc	r19, r1
    3dfe:	41 1d       	adc	r20, r1
    3e00:	51 1d       	adc	r21, r1
    3e02:	28 39       	cpi	r18, 0x98	; 152
    3e04:	99 e9       	ldi	r25, 0x99	; 153
    3e06:	39 07       	cpc	r19, r25
    3e08:	49 07       	cpc	r20, r25
    3e0a:	99 e1       	ldi	r25, 0x19	; 25
    3e0c:	59 07       	cpc	r21, r25
    3e0e:	a8 f2       	brcs	.-86     	; 0x3dba <strtod+0xfa>
    3e10:	c6 60       	ori	r28, 0x06	; 6
    3e12:	9c 2e       	mov	r9, r28
    3e14:	d2 cf       	rjmp	.-92     	; 0x3dba <strtod+0xfa>
    3e16:	ae ef       	ldi	r26, 0xFE	; 254
    3e18:	8a 12       	cpse	r8, r26
    3e1a:	06 c0       	rjmp	.+12     	; 0x3e28 <strtod+0x168>
    3e1c:	c3 fd       	sbrc	r28, 3
    3e1e:	3c c0       	rjmp	.+120    	; 0x3e98 <strtod+0x1d8>
    3e20:	9c 2e       	mov	r9, r28
    3e22:	68 94       	set
    3e24:	93 f8       	bld	r9, 3
    3e26:	c9 cf       	rjmp	.-110    	; 0x3dba <strtod+0xfa>
    3e28:	df 7d       	andi	r29, 0xDF	; 223
    3e2a:	d5 34       	cpi	r29, 0x45	; 69
    3e2c:	a9 f5       	brne	.+106    	; 0x3e98 <strtod+0x1d8>
    3e2e:	80 81       	ld	r24, Z
    3e30:	8d 32       	cpi	r24, 0x2D	; 45
    3e32:	39 f4       	brne	.+14     	; 0x3e42 <strtod+0x182>
    3e34:	c0 61       	ori	r28, 0x10	; 16
    3e36:	df 01       	movw	r26, r30
    3e38:	12 96       	adiw	r26, 0x02	; 2
    3e3a:	81 81       	ldd	r24, Z+1	; 0x01
    3e3c:	62 e0       	ldi	r22, 0x02	; 2
    3e3e:	70 e0       	ldi	r23, 0x00	; 0
    3e40:	06 c0       	rjmp	.+12     	; 0x3e4e <strtod+0x18e>
    3e42:	df 01       	movw	r26, r30
    3e44:	8b 32       	cpi	r24, 0x2B	; 43
    3e46:	c1 f3       	breq	.-16     	; 0x3e38 <strtod+0x178>
    3e48:	11 96       	adiw	r26, 0x01	; 1
    3e4a:	61 e0       	ldi	r22, 0x01	; 1
    3e4c:	70 e0       	ldi	r23, 0x00	; 0
    3e4e:	80 53       	subi	r24, 0x30	; 48
    3e50:	5d 01       	movw	r10, r26
    3e52:	a6 1a       	sub	r10, r22
    3e54:	b7 0a       	sbc	r11, r23
    3e56:	8a 30       	cpi	r24, 0x0A	; 10
    3e58:	f8 f4       	brcc	.+62     	; 0x3e98 <strtod+0x1d8>
    3e5a:	e0 e8       	ldi	r30, 0x80	; 128
    3e5c:	ce 16       	cp	r12, r30
    3e5e:	ec e0       	ldi	r30, 0x0C	; 12
    3e60:	de 06       	cpc	r13, r30
    3e62:	5c f4       	brge	.+22     	; 0x3e7a <strtod+0x1ba>
    3e64:	b6 01       	movw	r22, r12
    3e66:	66 0f       	add	r22, r22
    3e68:	77 1f       	adc	r23, r23
    3e6a:	66 0f       	add	r22, r22
    3e6c:	77 1f       	adc	r23, r23
    3e6e:	c6 0e       	add	r12, r22
    3e70:	d7 1e       	adc	r13, r23
    3e72:	cc 0c       	add	r12, r12
    3e74:	dd 1c       	adc	r13, r13
    3e76:	c8 0e       	add	r12, r24
    3e78:	d1 1c       	adc	r13, r1
    3e7a:	5d 01       	movw	r10, r26
    3e7c:	ff ef       	ldi	r31, 0xFF	; 255
    3e7e:	af 1a       	sub	r10, r31
    3e80:	bf 0a       	sbc	r11, r31
    3e82:	8c 91       	ld	r24, X
    3e84:	80 53       	subi	r24, 0x30	; 48
    3e86:	8a 30       	cpi	r24, 0x0A	; 10
    3e88:	a8 f1       	brcs	.+106    	; 0x3ef4 <strtod+0x234>
    3e8a:	c4 ff       	sbrs	r28, 4
    3e8c:	03 c0       	rjmp	.+6      	; 0x3e94 <strtod+0x1d4>
    3e8e:	d1 94       	neg	r13
    3e90:	c1 94       	neg	r12
    3e92:	d1 08       	sbc	r13, r1
    3e94:	0c 0d       	add	r16, r12
    3e96:	1d 1d       	adc	r17, r13
    3e98:	c1 ff       	sbrs	r28, 1
    3e9a:	09 c0       	rjmp	.+18     	; 0x3eae <strtod+0x1ee>
    3e9c:	e1 14       	cp	r14, r1
    3e9e:	f1 04       	cpc	r15, r1
    3ea0:	31 f0       	breq	.+12     	; 0x3eae <strtod+0x1ee>
    3ea2:	81 e0       	ldi	r24, 0x01	; 1
    3ea4:	a8 1a       	sub	r10, r24
    3ea6:	b1 08       	sbc	r11, r1
    3ea8:	d7 01       	movw	r26, r14
    3eaa:	ad 92       	st	X+, r10
    3eac:	bc 92       	st	X, r11
    3eae:	ca 01       	movw	r24, r20
    3eb0:	b9 01       	movw	r22, r18
    3eb2:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__floatunsisf>
    3eb6:	c3 70       	andi	r28, 0x03	; 3
    3eb8:	c3 30       	cpi	r28, 0x03	; 3
    3eba:	09 f4       	brne	.+2      	; 0x3ebe <strtod+0x1fe>
    3ebc:	90 58       	subi	r25, 0x80	; 128
    3ebe:	4b 01       	movw	r8, r22
    3ec0:	5c 01       	movw	r10, r24
    3ec2:	20 e0       	ldi	r18, 0x00	; 0
    3ec4:	30 e0       	ldi	r19, 0x00	; 0
    3ec6:	a9 01       	movw	r20, r18
    3ec8:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <__cmpsf2>
    3ecc:	88 23       	and	r24, r24
    3ece:	09 f4       	brne	.+2      	; 0x3ed2 <strtod+0x212>
    3ed0:	40 c0       	rjmp	.+128    	; 0x3f52 <strtod+0x292>
    3ed2:	cd ec       	ldi	r28, 0xCD	; 205
    3ed4:	d0 e0       	ldi	r29, 0x00	; 0
    3ed6:	17 ff       	sbrs	r17, 7
    3ed8:	05 c0       	rjmp	.+10     	; 0x3ee4 <strtod+0x224>
    3eda:	11 95       	neg	r17
    3edc:	01 95       	neg	r16
    3ede:	11 09       	sbc	r17, r1
    3ee0:	c5 eb       	ldi	r28, 0xB5	; 181
    3ee2:	d0 e0       	ldi	r29, 0x00	; 0
    3ee4:	6e 01       	movw	r12, r28
    3ee6:	b8 e1       	ldi	r27, 0x18	; 24
    3ee8:	cb 1a       	sub	r12, r27
    3eea:	d1 08       	sbc	r13, r1
    3eec:	80 e2       	ldi	r24, 0x20	; 32
    3eee:	e8 2e       	mov	r14, r24
    3ef0:	f1 2c       	mov	r15, r1
    3ef2:	0f c0       	rjmp	.+30     	; 0x3f12 <strtod+0x252>
    3ef4:	d5 01       	movw	r26, r10
    3ef6:	b1 cf       	rjmp	.-158    	; 0x3e5a <strtod+0x19a>
    3ef8:	fe 01       	movw	r30, r28
    3efa:	25 91       	lpm	r18, Z+
    3efc:	35 91       	lpm	r19, Z+
    3efe:	45 91       	lpm	r20, Z+
    3f00:	54 91       	lpm	r21, Z
    3f02:	0e 19       	sub	r16, r14
    3f04:	1f 09       	sbc	r17, r15
    3f06:	c5 01       	movw	r24, r10
    3f08:	b4 01       	movw	r22, r8
    3f0a:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    3f0e:	4b 01       	movw	r8, r22
    3f10:	5c 01       	movw	r10, r24
    3f12:	d5 01       	movw	r26, r10
    3f14:	c4 01       	movw	r24, r8
    3f16:	0e 15       	cp	r16, r14
    3f18:	1f 05       	cpc	r17, r15
    3f1a:	74 f7       	brge	.-36     	; 0x3ef8 <strtod+0x238>
    3f1c:	24 97       	sbiw	r28, 0x04	; 4
    3f1e:	f5 94       	asr	r15
    3f20:	e7 94       	ror	r14
    3f22:	cc 16       	cp	r12, r28
    3f24:	dd 06       	cpc	r13, r29
    3f26:	a9 f7       	brne	.-22     	; 0x3f12 <strtod+0x252>
    3f28:	8a 2f       	mov	r24, r26
    3f2a:	88 0f       	add	r24, r24
    3f2c:	8b 2f       	mov	r24, r27
    3f2e:	88 1f       	adc	r24, r24
    3f30:	8f 3f       	cpi	r24, 0xFF	; 255
    3f32:	49 f0       	breq	.+18     	; 0x3f46 <strtod+0x286>
    3f34:	20 e0       	ldi	r18, 0x00	; 0
    3f36:	30 e0       	ldi	r19, 0x00	; 0
    3f38:	a9 01       	movw	r20, r18
    3f3a:	c5 01       	movw	r24, r10
    3f3c:	b4 01       	movw	r22, r8
    3f3e:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <__cmpsf2>
    3f42:	81 11       	cpse	r24, r1
    3f44:	06 c0       	rjmp	.+12     	; 0x3f52 <strtod+0x292>
    3f46:	82 e2       	ldi	r24, 0x22	; 34
    3f48:	90 e0       	ldi	r25, 0x00	; 0
    3f4a:	90 93 1b 04 	sts	0x041B, r25	; 0x80041b <errno+0x1>
    3f4e:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <errno>
    3f52:	c5 01       	movw	r24, r10
    3f54:	b4 01       	movw	r22, r8
    3f56:	cd b7       	in	r28, 0x3d	; 61
    3f58:	de b7       	in	r29, 0x3e	; 62
    3f5a:	ec e0       	ldi	r30, 0x0C	; 12
    3f5c:	0c 94 d5 20 	jmp	0x41aa	; 0x41aa <__epilogue_restores__+0xc>

00003f60 <__ftoa_engine>:
__ftoa_engine():
    3f60:	28 30       	cpi	r18, 0x08	; 8
    3f62:	08 f0       	brcs	.+2      	; 0x3f66 <__ftoa_engine+0x6>
    3f64:	27 e0       	ldi	r18, 0x07	; 7
    3f66:	33 27       	eor	r19, r19
    3f68:	da 01       	movw	r26, r20
    3f6a:	99 0f       	add	r25, r25
    3f6c:	31 1d       	adc	r19, r1
    3f6e:	87 fd       	sbrc	r24, 7
    3f70:	91 60       	ori	r25, 0x01	; 1
    3f72:	00 96       	adiw	r24, 0x00	; 0
    3f74:	61 05       	cpc	r22, r1
    3f76:	71 05       	cpc	r23, r1
    3f78:	39 f4       	brne	.+14     	; 0x3f88 <__ftoa_engine+0x28>
    3f7a:	32 60       	ori	r19, 0x02	; 2
    3f7c:	2e 5f       	subi	r18, 0xFE	; 254
    3f7e:	3d 93       	st	X+, r19
    3f80:	30 e3       	ldi	r19, 0x30	; 48
    3f82:	2a 95       	dec	r18
    3f84:	e1 f7       	brne	.-8      	; 0x3f7e <__ftoa_engine+0x1e>
    3f86:	08 95       	ret
    3f88:	9f 3f       	cpi	r25, 0xFF	; 255
    3f8a:	30 f0       	brcs	.+12     	; 0x3f98 <__ftoa_engine+0x38>
    3f8c:	80 38       	cpi	r24, 0x80	; 128
    3f8e:	71 05       	cpc	r23, r1
    3f90:	61 05       	cpc	r22, r1
    3f92:	09 f0       	breq	.+2      	; 0x3f96 <__ftoa_engine+0x36>
    3f94:	3c 5f       	subi	r19, 0xFC	; 252
    3f96:	3c 5f       	subi	r19, 0xFC	; 252
    3f98:	3d 93       	st	X+, r19
    3f9a:	91 30       	cpi	r25, 0x01	; 1
    3f9c:	08 f0       	brcs	.+2      	; 0x3fa0 <__ftoa_engine+0x40>
    3f9e:	80 68       	ori	r24, 0x80	; 128
    3fa0:	91 1d       	adc	r25, r1
    3fa2:	df 93       	push	r29
    3fa4:	cf 93       	push	r28
    3fa6:	1f 93       	push	r17
    3fa8:	0f 93       	push	r16
    3faa:	ff 92       	push	r15
    3fac:	ef 92       	push	r14
    3fae:	19 2f       	mov	r17, r25
    3fb0:	98 7f       	andi	r25, 0xF8	; 248
    3fb2:	96 95       	lsr	r25
    3fb4:	e9 2f       	mov	r30, r25
    3fb6:	96 95       	lsr	r25
    3fb8:	96 95       	lsr	r25
    3fba:	e9 0f       	add	r30, r25
    3fbc:	ff 27       	eor	r31, r31
    3fbe:	e5 5d       	subi	r30, 0xD5	; 213
    3fc0:	fe 4f       	sbci	r31, 0xFE	; 254
    3fc2:	99 27       	eor	r25, r25
    3fc4:	33 27       	eor	r19, r19
    3fc6:	ee 24       	eor	r14, r14
    3fc8:	ff 24       	eor	r15, r15
    3fca:	a7 01       	movw	r20, r14
    3fcc:	e7 01       	movw	r28, r14
    3fce:	05 90       	lpm	r0, Z+
    3fd0:	08 94       	sec
    3fd2:	07 94       	ror	r0
    3fd4:	28 f4       	brcc	.+10     	; 0x3fe0 <__ftoa_engine+0x80>
    3fd6:	36 0f       	add	r19, r22
    3fd8:	e7 1e       	adc	r14, r23
    3fda:	f8 1e       	adc	r15, r24
    3fdc:	49 1f       	adc	r20, r25
    3fde:	51 1d       	adc	r21, r1
    3fe0:	66 0f       	add	r22, r22
    3fe2:	77 1f       	adc	r23, r23
    3fe4:	88 1f       	adc	r24, r24
    3fe6:	99 1f       	adc	r25, r25
    3fe8:	06 94       	lsr	r0
    3fea:	a1 f7       	brne	.-24     	; 0x3fd4 <__ftoa_engine+0x74>
    3fec:	05 90       	lpm	r0, Z+
    3fee:	07 94       	ror	r0
    3ff0:	28 f4       	brcc	.+10     	; 0x3ffc <__ftoa_engine+0x9c>
    3ff2:	e7 0e       	add	r14, r23
    3ff4:	f8 1e       	adc	r15, r24
    3ff6:	49 1f       	adc	r20, r25
    3ff8:	56 1f       	adc	r21, r22
    3ffa:	c1 1d       	adc	r28, r1
    3ffc:	77 0f       	add	r23, r23
    3ffe:	88 1f       	adc	r24, r24
    4000:	99 1f       	adc	r25, r25
    4002:	66 1f       	adc	r22, r22
    4004:	06 94       	lsr	r0
    4006:	a1 f7       	brne	.-24     	; 0x3ff0 <__ftoa_engine+0x90>
    4008:	05 90       	lpm	r0, Z+
    400a:	07 94       	ror	r0
    400c:	28 f4       	brcc	.+10     	; 0x4018 <__ftoa_engine+0xb8>
    400e:	f8 0e       	add	r15, r24
    4010:	49 1f       	adc	r20, r25
    4012:	56 1f       	adc	r21, r22
    4014:	c7 1f       	adc	r28, r23
    4016:	d1 1d       	adc	r29, r1
    4018:	88 0f       	add	r24, r24
    401a:	99 1f       	adc	r25, r25
    401c:	66 1f       	adc	r22, r22
    401e:	77 1f       	adc	r23, r23
    4020:	06 94       	lsr	r0
    4022:	a1 f7       	brne	.-24     	; 0x400c <__ftoa_engine+0xac>
    4024:	05 90       	lpm	r0, Z+
    4026:	07 94       	ror	r0
    4028:	20 f4       	brcc	.+8      	; 0x4032 <__ftoa_engine+0xd2>
    402a:	49 0f       	add	r20, r25
    402c:	56 1f       	adc	r21, r22
    402e:	c7 1f       	adc	r28, r23
    4030:	d8 1f       	adc	r29, r24
    4032:	99 0f       	add	r25, r25
    4034:	66 1f       	adc	r22, r22
    4036:	77 1f       	adc	r23, r23
    4038:	88 1f       	adc	r24, r24
    403a:	06 94       	lsr	r0
    403c:	a9 f7       	brne	.-22     	; 0x4028 <__ftoa_engine+0xc8>
    403e:	84 91       	lpm	r24, Z
    4040:	10 95       	com	r17
    4042:	17 70       	andi	r17, 0x07	; 7
    4044:	41 f0       	breq	.+16     	; 0x4056 <__ftoa_engine+0xf6>
    4046:	d6 95       	lsr	r29
    4048:	c7 95       	ror	r28
    404a:	57 95       	ror	r21
    404c:	47 95       	ror	r20
    404e:	f7 94       	ror	r15
    4050:	e7 94       	ror	r14
    4052:	1a 95       	dec	r17
    4054:	c1 f7       	brne	.-16     	; 0x4046 <__ftoa_engine+0xe6>
    4056:	e1 ed       	ldi	r30, 0xD1	; 209
    4058:	f0 e0       	ldi	r31, 0x00	; 0
    405a:	68 94       	set
    405c:	15 90       	lpm	r1, Z+
    405e:	15 91       	lpm	r17, Z+
    4060:	35 91       	lpm	r19, Z+
    4062:	65 91       	lpm	r22, Z+
    4064:	95 91       	lpm	r25, Z+
    4066:	05 90       	lpm	r0, Z+
    4068:	7f e2       	ldi	r23, 0x2F	; 47
    406a:	73 95       	inc	r23
    406c:	e1 18       	sub	r14, r1
    406e:	f1 0a       	sbc	r15, r17
    4070:	43 0b       	sbc	r20, r19
    4072:	56 0b       	sbc	r21, r22
    4074:	c9 0b       	sbc	r28, r25
    4076:	d0 09       	sbc	r29, r0
    4078:	c0 f7       	brcc	.-16     	; 0x406a <__ftoa_engine+0x10a>
    407a:	e1 0c       	add	r14, r1
    407c:	f1 1e       	adc	r15, r17
    407e:	43 1f       	adc	r20, r19
    4080:	56 1f       	adc	r21, r22
    4082:	c9 1f       	adc	r28, r25
    4084:	d0 1d       	adc	r29, r0
    4086:	7e f4       	brtc	.+30     	; 0x40a6 <__ftoa_engine+0x146>
    4088:	70 33       	cpi	r23, 0x30	; 48
    408a:	11 f4       	brne	.+4      	; 0x4090 <__ftoa_engine+0x130>
    408c:	8a 95       	dec	r24
    408e:	e6 cf       	rjmp	.-52     	; 0x405c <__ftoa_engine+0xfc>
    4090:	e8 94       	clt
    4092:	01 50       	subi	r16, 0x01	; 1
    4094:	30 f0       	brcs	.+12     	; 0x40a2 <__ftoa_engine+0x142>
    4096:	08 0f       	add	r16, r24
    4098:	0a f4       	brpl	.+2      	; 0x409c <__ftoa_engine+0x13c>
    409a:	00 27       	eor	r16, r16
    409c:	02 17       	cp	r16, r18
    409e:	08 f4       	brcc	.+2      	; 0x40a2 <__ftoa_engine+0x142>
    40a0:	20 2f       	mov	r18, r16
    40a2:	23 95       	inc	r18
    40a4:	02 2f       	mov	r16, r18
    40a6:	7a 33       	cpi	r23, 0x3A	; 58
    40a8:	28 f0       	brcs	.+10     	; 0x40b4 <__ftoa_engine+0x154>
    40aa:	79 e3       	ldi	r23, 0x39	; 57
    40ac:	7d 93       	st	X+, r23
    40ae:	2a 95       	dec	r18
    40b0:	e9 f7       	brne	.-6      	; 0x40ac <__ftoa_engine+0x14c>
    40b2:	10 c0       	rjmp	.+32     	; 0x40d4 <__ftoa_engine+0x174>
    40b4:	7d 93       	st	X+, r23
    40b6:	2a 95       	dec	r18
    40b8:	89 f6       	brne	.-94     	; 0x405c <__ftoa_engine+0xfc>
    40ba:	06 94       	lsr	r0
    40bc:	97 95       	ror	r25
    40be:	67 95       	ror	r22
    40c0:	37 95       	ror	r19
    40c2:	17 95       	ror	r17
    40c4:	17 94       	ror	r1
    40c6:	e1 18       	sub	r14, r1
    40c8:	f1 0a       	sbc	r15, r17
    40ca:	43 0b       	sbc	r20, r19
    40cc:	56 0b       	sbc	r21, r22
    40ce:	c9 0b       	sbc	r28, r25
    40d0:	d0 09       	sbc	r29, r0
    40d2:	98 f0       	brcs	.+38     	; 0x40fa <__ftoa_engine+0x19a>
    40d4:	23 95       	inc	r18
    40d6:	7e 91       	ld	r23, -X
    40d8:	73 95       	inc	r23
    40da:	7a 33       	cpi	r23, 0x3A	; 58
    40dc:	08 f0       	brcs	.+2      	; 0x40e0 <__ftoa_engine+0x180>
    40de:	70 e3       	ldi	r23, 0x30	; 48
    40e0:	7c 93       	st	X, r23
    40e2:	20 13       	cpse	r18, r16
    40e4:	b8 f7       	brcc	.-18     	; 0x40d4 <__ftoa_engine+0x174>
    40e6:	7e 91       	ld	r23, -X
    40e8:	70 61       	ori	r23, 0x10	; 16
    40ea:	7d 93       	st	X+, r23
    40ec:	30 f0       	brcs	.+12     	; 0x40fa <__ftoa_engine+0x19a>
    40ee:	83 95       	inc	r24
    40f0:	71 e3       	ldi	r23, 0x31	; 49
    40f2:	7d 93       	st	X+, r23
    40f4:	70 e3       	ldi	r23, 0x30	; 48
    40f6:	2a 95       	dec	r18
    40f8:	e1 f7       	brne	.-8      	; 0x40f2 <__ftoa_engine+0x192>
    40fa:	11 24       	eor	r1, r1
    40fc:	ef 90       	pop	r14
    40fe:	ff 90       	pop	r15
    4100:	0f 91       	pop	r16
    4102:	1f 91       	pop	r17
    4104:	cf 91       	pop	r28
    4106:	df 91       	pop	r29
    4108:	99 27       	eor	r25, r25
    410a:	87 fd       	sbrc	r24, 7
    410c:	90 95       	com	r25
    410e:	08 95       	ret

00004110 <__ctype_isfalse>:
__ctype_isfalse():
    4110:	99 27       	eor	r25, r25
    4112:	88 27       	eor	r24, r24

00004114 <__ctype_istrue>:
__ctype_istrue():
    4114:	08 95       	ret

00004116 <strncasecmp_P>:
strncasecmp_P():
    4116:	fb 01       	movw	r30, r22
    4118:	dc 01       	movw	r26, r24
    411a:	41 50       	subi	r20, 0x01	; 1
    411c:	50 40       	sbci	r21, 0x00	; 0
    411e:	88 f0       	brcs	.+34     	; 0x4142 <strncasecmp_P+0x2c>
    4120:	8d 91       	ld	r24, X+
    4122:	81 34       	cpi	r24, 0x41	; 65
    4124:	1c f0       	brlt	.+6      	; 0x412c <strncasecmp_P+0x16>
    4126:	8b 35       	cpi	r24, 0x5B	; 91
    4128:	0c f4       	brge	.+2      	; 0x412c <strncasecmp_P+0x16>
    412a:	80 5e       	subi	r24, 0xE0	; 224
    412c:	65 91       	lpm	r22, Z+
    412e:	61 34       	cpi	r22, 0x41	; 65
    4130:	1c f0       	brlt	.+6      	; 0x4138 <strncasecmp_P+0x22>
    4132:	6b 35       	cpi	r22, 0x5B	; 91
    4134:	0c f4       	brge	.+2      	; 0x4138 <strncasecmp_P+0x22>
    4136:	60 5e       	subi	r22, 0xE0	; 224
    4138:	86 1b       	sub	r24, r22
    413a:	61 11       	cpse	r22, r1
    413c:	71 f3       	breq	.-36     	; 0x411a <strncasecmp_P+0x4>
    413e:	99 0b       	sbc	r25, r25
    4140:	08 95       	ret
    4142:	88 1b       	sub	r24, r24
    4144:	fc cf       	rjmp	.-8      	; 0x413e <strncasecmp_P+0x28>

00004146 <strrev>:
strrev():
    4146:	dc 01       	movw	r26, r24
    4148:	fc 01       	movw	r30, r24
    414a:	67 2f       	mov	r22, r23
    414c:	71 91       	ld	r23, Z+
    414e:	77 23       	and	r23, r23
    4150:	e1 f7       	brne	.-8      	; 0x414a <strrev+0x4>
    4152:	32 97       	sbiw	r30, 0x02	; 2
    4154:	04 c0       	rjmp	.+8      	; 0x415e <strrev+0x18>
    4156:	7c 91       	ld	r23, X
    4158:	6d 93       	st	X+, r22
    415a:	70 83       	st	Z, r23
    415c:	62 91       	ld	r22, -Z
    415e:	ae 17       	cp	r26, r30
    4160:	bf 07       	cpc	r27, r31
    4162:	c8 f3       	brcs	.-14     	; 0x4156 <strrev+0x10>
    4164:	08 95       	ret

00004166 <__prologue_saves__>:
__prologue_saves__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    4166:	2f 92       	push	r2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    4168:	3f 92       	push	r3
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    416a:	4f 92       	push	r4
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    416c:	5f 92       	push	r5
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    416e:	6f 92       	push	r6
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    4170:	7f 92       	push	r7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    4172:	8f 92       	push	r8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    4174:	9f 92       	push	r9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    4176:	af 92       	push	r10
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    4178:	bf 92       	push	r11
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    417a:	cf 92       	push	r12
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    417c:	df 92       	push	r13
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    417e:	ef 92       	push	r14
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    4180:	ff 92       	push	r15
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    4182:	0f 93       	push	r16
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    4184:	1f 93       	push	r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    4186:	cf 93       	push	r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    4188:	df 93       	push	r29
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    418a:	cd b7       	in	r28, 0x3d	; 61
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    418c:	de b7       	in	r29, 0x3e	; 62
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    418e:	ca 1b       	sub	r28, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    4190:	db 0b       	sbc	r29, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    4192:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    4194:	f8 94       	cli
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    4196:	de bf       	out	0x3e, r29	; 62
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    4198:	0f be       	out	0x3f, r0	; 63
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    419a:	cd bf       	out	0x3d, r28	; 61
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    419c:	09 94       	ijmp

0000419e <__epilogue_restores__>:
__epilogue_restores__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    419e:	2a 88       	ldd	r2, Y+18	; 0x12
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    41a0:	39 88       	ldd	r3, Y+17	; 0x11
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    41a2:	48 88       	ldd	r4, Y+16	; 0x10
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    41a4:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    41a6:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    41a8:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    41aa:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    41ac:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    41ae:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    41b0:	b9 84       	ldd	r11, Y+9	; 0x09
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    41b2:	c8 84       	ldd	r12, Y+8	; 0x08
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    41b4:	df 80       	ldd	r13, Y+7	; 0x07
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    41b6:	ee 80       	ldd	r14, Y+6	; 0x06
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    41b8:	fd 80       	ldd	r15, Y+5	; 0x05
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    41ba:	0c 81       	ldd	r16, Y+4	; 0x04
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    41bc:	1b 81       	ldd	r17, Y+3	; 0x03
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    41be:	aa 81       	ldd	r26, Y+2	; 0x02
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    41c0:	b9 81       	ldd	r27, Y+1	; 0x01
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    41c2:	ce 0f       	add	r28, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    41c4:	d1 1d       	adc	r29, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    41c6:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    41c8:	f8 94       	cli
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    41ca:	de bf       	out	0x3e, r29	; 62
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    41cc:	0f be       	out	0x3f, r0	; 63
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    41ce:	cd bf       	out	0x3d, r28	; 61
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    41d0:	ed 01       	movw	r28, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    41d2:	08 95       	ret

000041d4 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    41d4:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    41d6:	ca e1       	ldi	r28, 0x1A	; 26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    41d8:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    41da:	04 c0       	rjmp	.+8      	; 0x41e4 <__do_global_dtors+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    41dc:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    41de:	0e 94 4c 1a 	call	0x3498	; 0x3498 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    41e2:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    41e4:	cb 31       	cpi	r28, 0x1B	; 27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    41e6:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    41e8:	c9 f7       	brne	.-14     	; 0x41dc <__do_global_dtors+0x8>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    41ea:	f8 94       	cli

000041ec <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    41ec:	ff cf       	rjmp	.-2      	; 0x41ec <__stop_program>
